<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小明</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.decade.run/"/>
  <updated>2020-11-09T02:58:54.281Z</updated>
  <id>http://blog.decade.run/</id>
  
  <author>
    <name>Decade W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>element-ui-3-源码学习-4</title>
    <link href="http://blog.decade.run/2020/11/09/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-4/"/>
    <id>http://blog.decade.run/2020/11/09/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-4/</id>
    <published>2020-11-09T02:29:41.000Z</published>
    <updated>2020-11-09T02:58:54.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="checkboxGroup-文件路径-package-checkbox-group"><a href="#checkboxGroup-文件路径-package-checkbox-group" class="headerlink" title="checkboxGroup 文件路径 package/checkbox-group"></a><code>checkboxGroup</code> 文件路径 <code>package/checkbox-group</code></h3><p><code>2.x</code>和<code>3.0</code>没有多大的差别 有差别了 我再抽出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;el-checkbox-group&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;checkbox-group&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useEmitter &#125; from &#39;..&#x2F;..&#x2F;src&#x2F;use&#x2F;emitter&#39;</span><br><span class="line">import &#123; provide, getCurrentInstance, computed, inject &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;ElCheckboxGroup&#39;,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    modelValue: Array,</span><br><span class="line">    disabled: Boolean,</span><br><span class="line">    min: Number,</span><br><span class="line">    max: Number,</span><br><span class="line">    size: String,</span><br><span class="line">    fill: String,</span><br><span class="line">    textColor: String,</span><br><span class="line">    border: Boolean</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 定义的emit</span><br><span class="line">  emits: [&#39;update:modelValue&#39;, &#39;change&#39;],</span><br><span class="line"></span><br><span class="line">  setup(props, &#123; emit &#125;) &#123;</span><br><span class="line">    &#x2F;&#x2F; 拿到el-form注入的</span><br><span class="line">    const elForm &#x3D; inject(&#39;elForm&#39;, &#123; props: &#123;&#125;, ctx: &#123;&#125; &#125;)</span><br><span class="line">    &#x2F;&#x2F; 拿到el-form-item注入的</span><br><span class="line">    const elFormItem &#x3D; inject(&#39;elFormItem&#39;, &#123;</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">      ctx: &#123;&#125;,</span><br><span class="line">      emit: () &#x3D;&gt; &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 提供给checkbox的</span><br><span class="line">    provide(&#39;elCheckboxGroup&#39;, getCurrentInstance())</span><br><span class="line">    &#x2F;&#x2F; 取出dispatch 和 on 方法</span><br><span class="line">    const &#123; dispatch, on &#125; &#x3D; useEmitter()</span><br><span class="line">    &#x2F;&#x2F; 返回checkboxGroup的size 当前自己没定义 如果在el-form中就看el-form-item里面有没有定义</span><br><span class="line">    const checkboxGroupSize &#x3D; computed(() &#x3D;&gt; &#123;</span><br><span class="line">      return props.size || elFormItem.ctx.elFormItemSize</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 返回checkboxGroup的disabled 原理同上 多了一看el-form的disabled定义没有</span><br><span class="line">    const checkboxGroupDisabled &#x3D; computed(() &#x3D;&gt; &#123;</span><br><span class="line">      return props.disabled || elFormItem.disabled || elForm.disabled</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; 接收到事件 然后继续向上发射 和派发事件</span><br><span class="line">    on(&#39;update:modelValue&#39;, (v) &#x3D;&gt; &#123;</span><br><span class="line">      emit(&#39;update:modelValue&#39;, v)</span><br><span class="line">      dispatch(&#39;el.form.change&#39;, v)</span><br><span class="line">    &#125;)</span><br><span class="line">&#x2F;&#x2F; 接收到change, 发射change</span><br><span class="line">    on(&#39;change&#39;, (v) &#x3D;&gt; &#123;</span><br><span class="line">      emit(&#39;change&#39;, v)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      checkboxGroupSize,</span><br><span class="line">      checkboxGroupDisabled</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><code>checkbox-button</code> 的逻辑和 <code>checkbox</code> 的逻辑差不多.我就不怎么分析了</p>]]></content>
    
    <summary type="html">
    
      element Ui 学习笔记
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="element-ui" scheme="http://blog.decade.run/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>element-ui-3-源码学习-3</title>
    <link href="http://blog.decade.run/2020/11/05/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-3/"/>
    <id>http://blog.decade.run/2020/11/05/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-3/</id>
    <published>2020-11-05T01:51:48.000Z</published>
    <updated>2020-11-09T03:01:01.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="checkbox-组件"><a href="#checkbox-组件" class="headerlink" title="checkbox 组件"></a>checkbox 组件</h3><p><strong><code>文件位置</code></strong>  <code>2.x</code> 的在<code>packages/checkbox/src/checkbox.vue</code>  因为 <code>2.x</code> 与 <code>3.0</code> 在重构上存在 少许差异 我分开来分析</p><h4 id="2-x"><a href="#2-x" class="headerlink" title="2.x"></a>2.x</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;label</span><br><span class="line">    class&#x3D;&quot;el-checkbox&quot;</span><br><span class="line">    :class&#x3D;&quot;[</span><br><span class="line">      border &amp;&amp; checkboxSize ? &#39;el-checkbox--&#39; + checkboxSize : &#39;&#39;,</span><br><span class="line">      &#123; &#39;is-disabled&#39;: isDisabled &#125;,</span><br><span class="line">      &#123; &#39;is-bordered&#39;: border &#125;,</span><br><span class="line">      &#123; &#39;is-checked&#39;: isChecked &#125;</span><br><span class="line">    ]&quot;</span><br><span class="line">    :id&#x3D;&quot;id&quot;</span><br><span class="line">  &gt;&lt;!-- border存在的情况下 checkboxSize才能生效 --&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;el-checkbox__input&quot;</span><br><span class="line">      :class&#x3D;&quot;&#123;</span><br><span class="line">        &#39;is-disabled&#39;: isDisabled,</span><br><span class="line">        &#39;is-checked&#39;: isChecked,</span><br><span class="line">        &#39;is-indeterminate&#39;: indeterminate,</span><br><span class="line">        &#39;is-focus&#39;: focus</span><br><span class="line">      &#125;&quot;</span><br><span class="line">      :tabindex&#x3D;&quot;indeterminate ? 0 : false&quot;</span><br><span class="line">      :role&#x3D;&quot;indeterminate ? &#39;checkbox&#39; : false&quot;</span><br><span class="line">      :aria-checked&#x3D;&quot;indeterminate ? &#39;mixed&#39; : false&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;el-checkbox__inner&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        v-if&#x3D;&quot;trueLabel || falseLabel&quot;</span><br><span class="line">        class&#x3D;&quot;el-checkbox__original&quot;</span><br><span class="line">        type&#x3D;&quot;checkbox&quot;</span><br><span class="line">        :aria-hidden&#x3D;&quot;indeterminate ? &#39;true&#39; : &#39;false&#39;&quot;</span><br><span class="line">        :name&#x3D;&quot;name&quot;</span><br><span class="line">        :disabled&#x3D;&quot;isDisabled&quot;</span><br><span class="line">        :true-value&#x3D;&quot;trueLabel&quot;</span><br><span class="line">        :false-value&#x3D;&quot;falseLabel&quot;</span><br><span class="line">        v-model&#x3D;&quot;model&quot;</span><br><span class="line">        @change&#x3D;&quot;handleChange&quot;</span><br><span class="line">        @focus&#x3D;&quot;focus &#x3D; true&quot;</span><br><span class="line">        @blur&#x3D;&quot;focus &#x3D; false&quot;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        v-else</span><br><span class="line">        class&#x3D;&quot;el-checkbox__original&quot;</span><br><span class="line">        type&#x3D;&quot;checkbox&quot;</span><br><span class="line">        :aria-hidden&#x3D;&quot;indeterminate ? &#39;true&#39; : &#39;false&#39;&quot;</span><br><span class="line">        :disabled&#x3D;&quot;isDisabled&quot;</span><br><span class="line">        :value&#x3D;&quot;label&quot;</span><br><span class="line">        :name&#x3D;&quot;name&quot;</span><br><span class="line">        v-model&#x3D;&quot;model&quot;</span><br><span class="line">        @change&#x3D;&quot;handleChange&quot;</span><br><span class="line">        @focus&#x3D;&quot;focus &#x3D; true&quot;</span><br><span class="line">        @blur&#x3D;&quot;focus &#x3D; false&quot;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;el-checkbox__label&quot; v-if&#x3D;&quot;$slots.default || label&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">      &lt;template v-if&#x3D;&quot;!$slots.default&quot;&gt;&#123;&#123;label&#125;&#125;&lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Emitter from &#39;element-ui&#x2F;src&#x2F;mixins&#x2F;emitter&#39;;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;ElCheckbox&#39;,</span><br><span class="line"></span><br><span class="line">    mixins: [Emitter], &#x2F;&#x2F; 混入emitter</span><br><span class="line"></span><br><span class="line">    inject: &#123;</span><br><span class="line">      elForm: &#123;</span><br><span class="line">        default: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      elFormItem: &#123;</span><br><span class="line">        default: &#39;&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    componentName: &#39;ElCheckbox&#39;,</span><br><span class="line"></span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        selfModel: false, &#x2F;&#x2F; 组件自己的model 如果没有传入 默认不checked</span><br><span class="line">        focus: false, &#x2F;&#x2F; 控制组件是否聚焦</span><br><span class="line">        isLimitExceeded: false &#x2F;&#x2F; 是否超出限制</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    computed: &#123;</span><br><span class="line">      model: &#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">          return this.isGroup</span><br><span class="line">            ? this.store : this.value !&#x3D;&#x3D; undefined</span><br><span class="line">              ? this.value : this.selfModel; &#x2F;&#x2F; 如果checkboxgroup有没有指定值,有且不为undefined则用, 没有或者为undefined用checkbox指定的, 如果checkbox也没指定 则为默认的false</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        set(val) &#123;</span><br><span class="line">          if (this.isGroup) &#123; &#x2F;&#x2F; 处于checkboxgroup中 至少会有两个checkbox 所以val是数组</span><br><span class="line">            this.isLimitExceeded &#x3D; false;</span><br><span class="line">            &#x2F;&#x2F; 如果checkboxgroup组件的min属性值不为undefined 且 当前选中的checkbox个数 小于 min 就会实现限制效果</span><br><span class="line">            (this._checkboxGroup.min !&#x3D;&#x3D; undefined &amp;&amp;</span><br><span class="line">              val.length &lt; this._checkboxGroup.min &amp;&amp;</span><br><span class="line">              (this.isLimitExceeded &#x3D; true));</span><br><span class="line">   &#x2F;&#x2F; 如果checkboxgroup组件的max属性值不为undefined 且 当前选中的checkbox个数 超过 max 就会实现限制效果</span><br><span class="line">            (this._checkboxGroup.max !&#x3D;&#x3D; undefined &amp;&amp;</span><br><span class="line">              val.length &gt; this._checkboxGroup.max &amp;&amp;</span><br><span class="line">              (this.isLimitExceeded &#x3D; true));</span><br><span class="line"></span><br><span class="line">            this.isLimitExceeded &#x3D;&#x3D;&#x3D; false &amp;&amp;</span><br><span class="line">            this.dispatch(&#39;ElCheckboxGroup&#39;, &#39;input&#39;, [val]); &#x2F;&#x2F; 只有没有限制 的时候才能派发事件</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$emit(&#39;input&#39;, val); &#x2F;&#x2F; 不处于直接触发input事件</span><br><span class="line">            this.selfModel &#x3D; val;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 控制是否checked</span><br><span class="line">      isChecked() &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果是布尔值</span><br><span class="line">        if (&#123;&#125;.toString.call(this.model) &#x3D;&#x3D;&#x3D; &#39;[object Boolean]&#39;) &#123;</span><br><span class="line">          return this.model;</span><br><span class="line">        &#x2F;&#x2F; 如果是数组</span><br><span class="line">        &#125; else if (Array.isArray(this.model)) &#123;</span><br><span class="line">          return this.model.indexOf(this.label) &gt; -1;</span><br><span class="line">        &#x2F;&#x2F; 两个都不是 则默认展示truelabel</span><br><span class="line">        &#125; else if (this.model !&#x3D;&#x3D; null &amp;&amp; this.model !&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">          return this.model &#x3D;&#x3D;&#x3D; this.trueLabel;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 判断当前组件是否在 checkboxgroup 组件里面</span><br><span class="line">      isGroup() &#123;</span><br><span class="line">        let parent &#x3D; this.$parent; &#x2F;&#x2F; 获取当前组件的父组件实例</span><br><span class="line">        while (parent) &#123;</span><br><span class="line">          if (parent.$options.componentName !&#x3D;&#x3D; &#39;ElCheckboxGroup&#39;) &#123; &#x2F;&#x2F; 判断父组件的组件名字属性是否是ElCheckboxGroup</span><br><span class="line">            parent &#x3D; parent.$parent; &#x2F;&#x2F; 不是继续向上找</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this._checkboxGroup &#x3D; parent; &#x2F;&#x2F; 将值赋给 _checkboxGroup</span><br><span class="line">            return true;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      &#x2F;&#x2F; 看是否存在 _checkboxGroup 返回checkboxgroup的value 或者 当前的value</span><br><span class="line">      store() &#123;</span><br><span class="line">        return this._checkboxGroup ? this._checkboxGroup.value : this.value;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 超出限制 则 不能使用</span><br><span class="line">      isLimitDisabled() &#123;</span><br><span class="line">        const &#123; max, min &#125; &#x3D; this._checkboxGroup;</span><br><span class="line">        &#x2F;&#x2F; 假设当前checkboxgroup有5个 max为3 min为1</span><br><span class="line">        &#x2F;&#x2F; !! 转成布尔值 只要max和min有一个定义了 就返回true </span><br><span class="line">        &#x2F;&#x2F; &amp;&amp; 的 优先级 大于 || </span><br><span class="line">        &#x2F;*</span><br><span class="line">        下面的代码意思就是 </span><br><span class="line">        1. 如果max和min没有给 返回false</span><br><span class="line">        2. max和min都给了, 则在选中的个数 达到3个或者1个时候 就返回true</span><br><span class="line">        3. max给了值, min没有给, 只有在选中的个数达到3的时候 返回true</span><br><span class="line">        4. min给了值, max没给, 则只有在选中的个数只有1时, 返回true</span><br><span class="line">        *&#x2F;</span><br><span class="line">        return !!(max || min) &amp;&amp;</span><br><span class="line">          (this.model.length &gt;&#x3D; max &amp;&amp; !this.isChecked) ||</span><br><span class="line">          (this.model.length &lt;&#x3D; min &amp;&amp; this.isChecked);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 判断是否disabled</span><br><span class="line">      isDisabled() &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        1. 如果在checkboxgroup中 只要 checkboxgroup的disabled为true, 或者当前的属性的disabled设置true, 或者这个checkboxgroup处于elform里面 并且这个el-form&#x2F;el-form-item设置disabled为true, 或者触发了超出限制 返回为true 则disabled</span><br><span class="line">        2. 不在 就看自身设置没有, 没有就看 是否在el-form&#x2F;el-form-item中设置没有</span><br><span class="line">        *&#x2F;</span><br><span class="line">        return this.isGroup</span><br><span class="line">          ? this._checkboxGroup.disabled || this.disabled || (this.elForm || &#123;&#125;).disabled || this.isLimitDisabled</span><br><span class="line">          : this.disabled || (this.elForm || &#123;&#125;).disabled;</span><br><span class="line">      &#125;,</span><br><span class="line"> </span><br><span class="line">      &#x2F;&#x2F; 返回size small&#x2F;mini...</span><br><span class="line">      _elFormItemSize() &#123;</span><br><span class="line">        return (this.elFormItem || &#123;&#125;).elFormItemSize;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#x2F;*</span><br><span class="line">      1. 如果自己没有设置 则用 el-form-item的, 如果也没有 就用 默认的</span><br><span class="line">      2. 如果处于checkboxgroup中且checkboxgroup设置 就用 没用就用temCheckboxSize</span><br><span class="line">      *&#x2F;</span><br><span class="line">      checkboxSize() &#123;</span><br><span class="line">        const temCheckboxSize &#x3D; this.size || this._elFormItemSize || (this.$ELEMENT || &#123;&#125;).size;</span><br><span class="line">        return this.isGroup</span><br><span class="line">          ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize</span><br><span class="line">          : temCheckboxSize;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;&#125;, &#x2F;&#x2F; 指定的值</span><br><span class="line">      label: &#123;&#125;, &#x2F;&#x2F; 选中状态的值 只有在checkboxgroup 或者绑定的值类型是array 生效</span><br><span class="line">      indeterminate: Boolean, &#x2F;&#x2F; 设置 indeterminate 状态，只负责样式控制</span><br><span class="line">      disabled: Boolean, &#x2F;&#x2F; 是否禁用</span><br><span class="line">      checked: Boolean, &#x2F;&#x2F; 是否勾选</span><br><span class="line">      name: String, &#x2F;&#x2F; 原生name</span><br><span class="line">      trueLabel: [String, Number], &#x2F;&#x2F; 选中时的值</span><br><span class="line">      falseLabel: [String, Number], &#x2F;&#x2F; 没有选中时的值</span><br><span class="line">      id: String, &#x2F;* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*&#x2F;</span><br><span class="line">      controls: String, &#x2F;* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*&#x2F;</span><br><span class="line">      border: Boolean, &#x2F;&#x2F; 是否展示边框</span><br><span class="line">      size: String &#x2F;&#x2F; 尺寸，仅在 border 为真时有效  border &amp;&amp; checkboxSize ? &#39;el-checkbox--&#39; + checkboxSize : &#39;&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      addToStore() &#123;</span><br><span class="line">        &#x2F;&#x2F; 判断是否是数组 如果是数组 再看值不能存在存在</span><br><span class="line">        if (</span><br><span class="line">          Array.isArray(this.model) &amp;&amp;</span><br><span class="line">          this.model.indexOf(this.label) &#x3D;&#x3D;&#x3D; -1</span><br><span class="line">        ) &#123;</span><br><span class="line">            &#x2F;&#x2F; 不存在push进去</span><br><span class="line">          this.model.push(this.label);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          &#x2F;&#x2F; 否则设置为true</span><br><span class="line">          this.model &#x3D; this.trueLabel || true;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      handleChange(ev) &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果已经被限制了 就直接返回</span><br><span class="line">        if (this.isLimitExceeded) return;</span><br><span class="line">        let value;</span><br><span class="line">        &#x2F;&#x2F; 判断是否选中</span><br><span class="line">        if (ev.target.checked) &#123;</span><br><span class="line">          value &#x3D; this.trueLabel &#x3D;&#x3D;&#x3D; undefined ? true : this.trueLabel;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          value &#x3D; this.falseLabel &#x3D;&#x3D;&#x3D; undefined ? false : this.falseLabel;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 触发事件</span><br><span class="line">        this.$emit(&#39;change&#39;, value, ev);</span><br><span class="line">        this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; 如果在checkboxgroup中</span><br><span class="line">          if (this.isGroup) &#123;</span><br><span class="line">            &#x2F;&#x2F; 派发事件</span><br><span class="line">            this.dispatch(&#39;ElCheckboxGroup&#39;, &#39;change&#39;, [this._checkboxGroup.value]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    created() &#123;</span><br><span class="line">      this.checked &amp;&amp; this.addToStore();</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123; &#x2F;&#x2F; 为indeterminate元素 添加aria-controls 属性</span><br><span class="line">      if (this.indeterminate) &#123;</span><br><span class="line">        this.$el.setAttribute(&#39;aria-controls&#39;, this.controls);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    watch: &#123;</span><br><span class="line">     &#x2F;&#x2F; value 变化时 派发</span><br><span class="line">      value(value) &#123;</span><br><span class="line">        this.dispatch(&#39;ElFormItem&#39;, &#39;el.form.change&#39;, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="3-0版本"><a href="#3-0版本" class="headerlink" title="3.0版本"></a><code>3.0版本</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;label</span><br><span class="line">    class&#x3D;&quot;el-checkbox&quot;</span><br><span class="line">    role&#x3D;&quot;checkbox&quot;</span><br><span class="line">    :class&#x3D;&quot;[</span><br><span class="line">      isBorder &amp;&amp; checkboxSize ? &#39;el-checkbox--&#39; + checkboxSize : &#39;&#39;,</span><br><span class="line">      &#123; &#39;is-disabled&#39;: isDisabled &#125;,</span><br><span class="line">      &#123; &#39;is-bordered&#39;: isBorder &#125;,</span><br><span class="line">      &#123; &#39;is-checked&#39;: isChecked &#125;</span><br><span class="line">    ]&quot;</span><br><span class="line">    :id&#x3D;&quot;id&quot;</span><br><span class="line">    :aria-checked&#x3D;&quot;isChecked&quot;</span><br><span class="line">    :aria-disabled&#x3D;&quot;isDisabled&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;span</span><br><span class="line">      class&#x3D;&quot;el-checkbox__input&quot;</span><br><span class="line">      :class&#x3D;&quot;&#123;</span><br><span class="line">        &#39;is-disabled&#39;: isDisabled,</span><br><span class="line">        &#39;is-checked&#39;: isChecked,</span><br><span class="line">        &#39;is-indeterminate&#39;: indeterminate,</span><br><span class="line">        &#39;is-focus&#39;: focus</span><br><span class="line">      &#125;&quot;</span><br><span class="line">      :tabindex&#x3D;&quot;indeterminate ? 0 : false&quot;</span><br><span class="line">      :role&#x3D;&quot;indeterminate ? &#39;checkbox&#39; : false&quot;</span><br><span class="line">      :aria-checked&#x3D;&quot;indeterminate ? &#39;mixed&#39; : false&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;el-checkbox__inner&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        class&#x3D;&quot;el-checkbox__original&quot;</span><br><span class="line">        type&#x3D;&quot;checkbox&quot;</span><br><span class="line">        ref&#x3D;&quot;checkbox&quot;</span><br><span class="line">        :aria-hidden&#x3D;&quot;indeterminate ? &#39;true&#39; : &#39;false&#39;&quot;</span><br><span class="line">        :name&#x3D;&quot;name&quot;</span><br><span class="line">        :disabled&#x3D;&quot;isDisabled&quot;</span><br><span class="line">        :true-value&#x3D;&quot;trueLabel&quot;</span><br><span class="line">        :false-value&#x3D;&quot;falseLabel&quot;</span><br><span class="line">        :value&#x3D;&quot;label&quot;</span><br><span class="line">        @change&#x3D;&quot;handleChange&quot;</span><br><span class="line">        @input&#x3D;&quot;model &#x3D; &#123; label, checked: $event.target.checked &#125;&quot;</span><br><span class="line">        @focus&#x3D;&quot;focus &#x3D; true&quot;</span><br><span class="line">        @blur&#x3D;&quot;focus &#x3D; false&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;el-checkbox__label&quot; v-if&#x3D;&quot;$slots.default || label&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">      &lt;template v-if&#x3D;&quot;!$slots.default&quot;&gt;&#123;&#123; label &#125;&#125;&lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#39;vue&#39;</span><br><span class="line">import &#123;</span><br><span class="line">  useModel,</span><br><span class="line">  useAria,</span><br><span class="line">  useCheckSelected,</span><br><span class="line">  useSize,</span><br><span class="line">  useLimit,</span><br><span class="line">  useDisabled,</span><br><span class="line">  useBorder</span><br><span class="line">&#125; from &#39;.&#x2F;uses.js&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;ElCheckbox&#39;,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    modelValue: [String, Number, Boolean, Symbol, Array],</span><br><span class="line">    label: [String, Number, Boolean, Symbol],</span><br><span class="line">    indeterminate: Boolean,</span><br><span class="line">    disabled: Boolean,</span><br><span class="line">    checked: Boolean,</span><br><span class="line">    name: String,</span><br><span class="line">    trueLabel: &#123; type: [String, Number, Boolean], default: true &#125;,</span><br><span class="line">    falseLabel: &#123; type: [String, Number, Boolean], default: false &#125;,</span><br><span class="line">    id: String &#x2F;* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系 *&#x2F;,</span><br><span class="line">    controls: String &#x2F;* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系 *&#x2F;,</span><br><span class="line">    border: Boolean,</span><br><span class="line">    size: String</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  emits: [&#39;update:modelValue&#39;, &#39;change&#39;],</span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    const state &#x3D; reactive(&#123;</span><br><span class="line">      focus: false</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    useAria()</span><br><span class="line"></span><br><span class="line">    const &#123; model, handleChange &#125; &#x3D; useModel()</span><br><span class="line"></span><br><span class="line">    const isLimit &#x3D; useLimit(&#123; model &#125;)</span><br><span class="line"></span><br><span class="line">    const &#123; isChecked, checkbox &#125; &#x3D; useCheckSelected(&#123; model &#125;)</span><br><span class="line"></span><br><span class="line">    const checkboxSize &#x3D; useSize()</span><br><span class="line"></span><br><span class="line">    const isDisabled &#x3D; useDisabled(&#123; isLimit &#125;)</span><br><span class="line"></span><br><span class="line">    const isBorder &#x3D; useBorder()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">      checkbox,</span><br><span class="line">      model,</span><br><span class="line">      isDisabled,</span><br><span class="line">      checkboxSize,</span><br><span class="line">      isChecked,</span><br><span class="line">      handleChange,</span><br><span class="line">      isBorder</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><code>3.0</code>版本的代码可以看出, 没有像<code>2.x</code>那样的反复横跳, 更清楚的知道的逻辑的出处</p><p><code>use.js</code>  源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isArray &#125; <span class="keyword">from</span> <span class="string">'@vue/shared'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  computed,</span><br><span class="line">  ref,</span><br><span class="line">  onMounted,</span><br><span class="line">  getCurrentInstance,</span><br><span class="line">  inject,</span><br><span class="line">  nextTick,</span><br><span class="line">  reactive,</span><br><span class="line">  watchEffect</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEmitter &#125; <span class="keyword">from</span> <span class="string">'../../src/use/emitter'</span></span><br><span class="line"><span class="keyword">import</span> &#123; usePropUtils &#125; <span class="keyword">from</span> <span class="string">'../../src/use/prop-utils'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useModel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// core</span></span><br><span class="line">  <span class="keyword">const</span> &#123; emit, props &#125; = getCurrentInstance(); <span class="comment">// 获取当前实例的 emit, prop</span></span><br><span class="line">  <span class="keyword">const</span> elCheckboxGroup = inject(<span class="string">'elCheckboxGroup'</span>, &#123; <span class="attr">props</span>: &#123;&#125; &#125;) <span class="comment">// 获取checkboxGroup注入的对象</span></span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch &#125; = useEmitter() <span class="comment">// 拿出dispatch方法</span></span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    modelValue: <span class="literal">null</span></span><br><span class="line">  &#125;) <span class="comment">// 定义一个响应式的对象</span></span><br><span class="line"></span><br><span class="line">  watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 监听副作用 当值发生变化时 赋值</span></span><br><span class="line">    state.modelValue = elCheckboxGroup.props.modelValue || props.modelValue</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">const</span> model = computed(&#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> state.modelValue</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(&#123; label, checked &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (label &amp;&amp; isArray(model.value)) &#123;</span><br><span class="line">        <span class="comment">// label存在且 model.value是一个数组</span></span><br><span class="line">        <span class="keyword">const</span> modelValue = model.value</span><br><span class="line">        <span class="keyword">const</span> labelIndex = modelValue.indexOf(label)</span><br><span class="line">        <span class="comment">// 找不到label 且 checked为true 就 push进 数组</span></span><br><span class="line">        labelIndex === <span class="number">-1</span> &amp;&amp; checked === <span class="literal">true</span> &amp;&amp; modelValue.push(label)</span><br><span class="line">        <span class="comment">// 找得到 且 checked为false 就删除</span></span><br><span class="line">        labelIndex !== <span class="number">-1</span> &amp;&amp;</span><br><span class="line">          checked === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">          modelValue.splice(labelIndex, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 重新赋值</span></span><br><span class="line">        state.modelValue = modelValue</span><br><span class="line">        <span class="comment">// 发射事件</span></span><br><span class="line">        emit(<span class="string">'update:modelValue'</span>, modelValue)</span><br><span class="line">        <span class="comment">// 派发</span></span><br><span class="line">        dispatch(<span class="string">'update:modelValue'</span>, modelValue)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 说明model.value就是单个值</span></span><br><span class="line">        <span class="keyword">const</span> modelValue = checked ? props.trueLabel : props.falseLabel</span><br><span class="line">        state.modelValue = modelValue</span><br><span class="line">        emit(<span class="string">'update:modelValue'</span>, modelValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// change事件</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> nextTick()</span><br><span class="line">    emit(<span class="string">'change'</span>, model.value)</span><br><span class="line">    dispatch(<span class="string">'change'</span>, model.value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; model, handleChange &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useAria</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; props, vnode &#125; = getCurrentInstance()</span><br><span class="line">  onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (props.indeterminate) &#123;</span><br><span class="line">      vnode.el.setAttribute(<span class="string">'aria-controls'</span>, props.controls)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否select</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useCheckSelected</span>(<span class="params">&#123; model &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; props &#125; = getCurrentInstance()</span><br><span class="line">  <span class="keyword">const</span> &#123; isAfferentProp &#125; = usePropUtils() <span class="comment">// 这个方法是某个属性是否是传入的属性</span></span><br><span class="line">  <span class="keyword">const</span> checkbox = ref(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂在完成后 判断 checked是否是传入的属性 是就给model.value赋值</span></span><br><span class="line">  onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    isAfferentProp(<span class="string">'checked'</span>) &amp;&amp;</span><br><span class="line">      (model.value = &#123; <span class="attr">label</span>: props.label, <span class="attr">checked</span>: props.checked &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isChecked = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里就是给它赋值</span></span><br><span class="line">    <span class="keyword">const</span> _isChecked = isArray(model.value)</span><br><span class="line">      ? model.value.indexOf(props.label) !== <span class="number">-1</span></span><br><span class="line">      : model.value === props.trueLabel</span><br><span class="line">    checkbox.value &amp;&amp; (checkbox.value.checked = _isChecked)</span><br><span class="line">    <span class="keyword">return</span> _isChecked</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; isChecked, checkbox &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回size</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elCheckboxGroup = inject(<span class="string">'elCheckboxGroup'</span>, &#123; <span class="attr">props</span>: &#123;&#125;, <span class="attr">ctx</span>: &#123;&#125; &#125;)</span><br><span class="line">  <span class="keyword">const</span> &#123; props, ctx &#125; = getCurrentInstance()</span><br><span class="line">  <span class="keyword">const</span> checkboxSize = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      props.size ||</span><br><span class="line">      elCheckboxGroup.ctx.checkboxGroupSize ||</span><br><span class="line">      (ctx.$ELEMENT || &#123;&#125;).size</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> checkboxSize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否限制 就是checkbox使用了max min</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useLimit</span>(<span class="params">&#123; model &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elCheckboxGroup = inject(<span class="string">'elCheckboxGroup'</span>, &#123; <span class="attr">props</span>: &#123;&#125;, <span class="attr">ctx</span>: &#123;&#125; &#125;)</span><br><span class="line">  <span class="keyword">const</span> &#123; props &#125; = getCurrentInstance()</span><br><span class="line">  <span class="keyword">const</span> isLimit = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elCheckboxGroup.props.modelValue) &#123;</span><br><span class="line">      <span class="comment">// if elCheckboxGroup exist</span></span><br><span class="line">      <span class="keyword">const</span> modelValueLength = elCheckboxGroup.props.modelValue.length</span><br><span class="line">      <span class="keyword">const</span> min = elCheckboxGroup.props.min</span><br><span class="line">      <span class="keyword">const</span> max = elCheckboxGroup.props.max</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        (modelValueLength &lt;= min &amp;&amp; model.value.indexOf(props.label) !== <span class="number">-1</span>) ||</span><br><span class="line">        (modelValueLength &gt;= max &amp;&amp; model.value.indexOf(props.label) === <span class="number">-1</span>)</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> isLimit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否禁用</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useDisabled</span>(<span class="params">&#123; isLimit &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elCheckboxGroup = inject(<span class="string">'elCheckboxGroup'</span>, &#123; <span class="attr">props</span>: &#123;&#125;, <span class="attr">ctx</span>: &#123;&#125; &#125;)</span><br><span class="line">  <span class="keyword">const</span> &#123; props &#125; = getCurrentInstance()</span><br><span class="line">  <span class="keyword">const</span> isDisabled = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      props.disabled ||</span><br><span class="line">      elCheckboxGroup.ctx.checkboxGroupDisabled ||</span><br><span class="line">      isLimit.value</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> isDisabled</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否展示border</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useBorder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elCheckboxGroup = inject(<span class="string">'elCheckboxGroup'</span>, &#123; <span class="attr">props</span>: &#123;&#125;, <span class="attr">ctx</span>: &#123;&#125; &#125;)</span><br><span class="line">  <span class="keyword">const</span> &#123; props &#125; = getCurrentInstance()</span><br><span class="line">  <span class="keyword">const</span> isBorder = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> props.border || elCheckboxGroup.props.border</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> isBorder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 激活的样式</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useActiveStyle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elCheckboxGroup = inject(<span class="string">'elCheckboxGroup'</span>, &#123; <span class="attr">props</span>: &#123;&#125;, <span class="attr">ctx</span>: &#123;&#125; &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    backgroundColor: elCheckboxGroup.props.fill || <span class="string">''</span>,</span><br><span class="line">    borderColor: elCheckboxGroup.props.fill || <span class="string">''</span>,</span><br><span class="line">    color: elCheckboxGroup.props.textColor || <span class="string">''</span>,</span><br><span class="line">    <span class="string">'box-shadow'</span>: <span class="string">'-1px 0 0 0 '</span> + elCheckboxGroup.props.fill</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是把相应的方法抽离出去 使得那个文件更加清爽</p>]]></content>
    
    <summary type="html">
    
      element Ui 学习笔记
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="element-ui" scheme="http://blog.decade.run/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>element-ui-3-源码学习-2</title>
    <link href="http://blog.decade.run/2020/10/27/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-2/"/>
    <id>http://blog.decade.run/2020/10/27/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-2/</id>
    <published>2020-10-27T06:52:12.000Z</published>
    <updated>2020-10-27T08:12:20.641Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Button-组件-源码"><a href="#Button-组件-源码" class="headerlink" title="Button 组件 源码"></a><code>Button</code> 组件 源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button</span><br><span class="line">    class&#x3D;&quot;el-button&quot;</span><br><span class="line">    @click&#x3D;&quot;handleClick&quot;</span><br><span class="line">    :disabled&#x3D;&quot;buttonDisabled || loading&quot;</span><br><span class="line">    :autofocus&#x3D;&quot;autofocus&quot;</span><br><span class="line">    :type&#x3D;&quot;nativeType&quot;</span><br><span class="line">    :class&#x3D;&quot;[</span><br><span class="line">      type ? &#39;el-button--&#39; + type : &#39;&#39;,</span><br><span class="line">      buttonSize ? &#39;el-button--&#39; + buttonSize : &#39;&#39;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#39;is-disabled&#39;: buttonDisabled,</span><br><span class="line">        &#39;is-loading&#39;: loading,</span><br><span class="line">        &#39;is-plain&#39;: plain,</span><br><span class="line">        &#39;is-round&#39;: round,</span><br><span class="line">        &#39;is-circle&#39;: circle</span><br><span class="line">      &#125;</span><br><span class="line">    ]&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;el-icon-loading&quot; v-if&#x3D;&quot;loading&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;i :class&#x3D;&quot;icon&quot; v-if&#x3D;&quot;icon &amp;&amp; !loading&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;span v-if&#x3D;&quot;$slots.default&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p><strong><code>vue2.x</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'ElButton'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vue2.x使用的注入 在button组件中拿到注入的elForm 和 elFormItem</span></span><br><span class="line">    inject: &#123;</span><br><span class="line">      elForm: &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      elFormItem: &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父组件传个子组件的props</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      <span class="comment">// 这个控制 bottom的展示样式 primary/text...</span></span><br><span class="line">      type: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'default'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//  控制大小 small/mini...</span></span><br><span class="line">      size: <span class="built_in">String</span>,</span><br><span class="line">      <span class="comment">// bottom的图标</span></span><br><span class="line">      icon: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 原生类型 submit/reset</span></span><br><span class="line">      nativeType: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'button'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 是否加载</span></span><br><span class="line">      loading: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="comment">// 是否禁用</span></span><br><span class="line">      disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="comment">// 是否朴素</span></span><br><span class="line">      plain: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="comment">// 是否聚焦</span></span><br><span class="line">      autofocus: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="comment">// 是否圆角</span></span><br><span class="line">      round: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="comment">// 是否圆形</span></span><br><span class="line">      circle: <span class="built_in">Boolean</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.x的计算属性</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      <span class="comment">// 方便控制像 el-form 设置了size 然后 el-form里面有el-form-item / 这是el-form的size 就会是el-form-item的size</span></span><br><span class="line">      _elFormItemSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.elFormItem || &#123;&#125;).elFormItemSize;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 如果父组件没有给el-button设置size, 然后看是否在el-form-item里面 最后看 Vue.$ELEMENT的默认的 </span></span><br><span class="line">      buttonSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size || <span class="keyword">this</span>._elFormItemSize || (<span class="keyword">this</span>.$ELEMENT || &#123;&#125;).size;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 同理父组件没有设置disabled 看所在form 有没有设置</span></span><br><span class="line">      buttonDisabled() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.disabled || (<span class="keyword">this</span>.elForm || &#123;&#125;).disabled;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="comment">// 触发点击事件</span></span><br><span class="line">      handleClick(evt) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'click'</span>, evt);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>vue3.0</code></strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, inject, toRefs, unref, getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    </span><br><span class="line">  name: <span class="string">'ElButton'</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3.0的props声明 与 2.x的一样 </span></span><br><span class="line">  props: &#123;</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'default'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    size: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    icon: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    nativeType: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'button'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    loading: <span class="built_in">Boolean</span>,</span><br><span class="line">    disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">    plain: <span class="built_in">Boolean</span>,</span><br><span class="line">    autofocus: <span class="built_in">Boolean</span>,</span><br><span class="line">    round: <span class="built_in">Boolean</span>,</span><br><span class="line">    circle: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 多一个 发射的事件 是一个什么事件 就是你 emit(type, e)的type </span></span><br><span class="line">  <span class="comment">// 这样可以避免 例如多次触发点击事件 </span></span><br><span class="line">  emits: [<span class="string">'click'</span>],</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  setup(props, ctx) &#123;</span><br><span class="line">    <span class="comment">// props是 父组件给的props</span></span><br><span class="line">    <span class="comment">// ctx 上下文对象</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 首先我们必须知道 props不能直接解构</span></span><br><span class="line">    <span class="comment">// 例如: const &#123; size, disabled &#125; = props;</span></span><br><span class="line">    <span class="comment">// 这解构出来的数据 是没有响应式的</span></span><br><span class="line">    <span class="comment">// 这是可以通过toRefs来使其响应式</span></span><br><span class="line">    <span class="keyword">const</span> &#123; size, disabled &#125; = toRefs(props)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 命名感觉有点像react 的hook  大家都这么命名!!!</span></span><br><span class="line">    <span class="keyword">const</span> buttonSize = useButtonSize(size)</span><br><span class="line">    <span class="keyword">const</span> buttonDisabled = useButtonDisabled(disabled)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.0中的emit放在ctx上下文中 </span></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">      ctx.emit(<span class="string">'click'</span>, evt)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在模板中使用必须return</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      handleClick,</span><br><span class="line">      buttonSize,</span><br><span class="line">      buttonDisabled</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个响应式的值</span></span><br><span class="line"><span class="keyword">const</span> useButtonSize = <span class="function">(<span class="params">size</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// vue3.0中使用的inject注入 注入的可以是一个响应式的数据</span></span><br><span class="line">  <span class="comment">// 3.0中inject只能在当前的实例中使用 2.x所有</span></span><br><span class="line">  <span class="keyword">const</span> elFormItem = inject(<span class="string">'elFormItem'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.0中computed</span></span><br><span class="line">  <span class="keyword">const</span> _elFormItemSize = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将注入的elFormItem.elFormItemSize 失去响应式 </span></span><br><span class="line">    <span class="keyword">return</span> unref(elFormItem.elFormItemSize)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下面的思路与2.x的思路一样</span></span><br><span class="line">  <span class="comment">// getCurrentInstance返回的是当前的实例 </span></span><br><span class="line">  <span class="comment">// getCurrentInstance().proxy.$ELEMENT 就相当于2.x 的this.$ELEMENT</span></span><br><span class="line">  <span class="comment">// 3.0 中注册全局属性或者方法 app.config.globalProperties.$ELEMENT = xxxx; </span></span><br><span class="line">  <span class="keyword">const</span> buttonSize = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      size.value ||</span><br><span class="line">      _elFormItemSize.value ||</span><br><span class="line">      (getCurrentInstance().proxy.$ELEMENT || &#123;&#125;).size</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> buttonSize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useButtonDisabled = <span class="function">(<span class="params">disabled</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> elForm = inject(<span class="string">'elForm'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> buttonDisabled = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> disabled.value || unref(elForm.disabled)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> buttonDisabled</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      element Ui 学习笔记
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="element-ui" scheme="http://blog.decade.run/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>element-ui 3 源码学习 (一)</title>
    <link href="http://blog.decade.run/2020/10/26/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://blog.decade.run/2020/10/26/element-ui-3-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-1/</id>
    <published>2020-10-26T03:53:22.000Z</published>
    <updated>2020-10-27T07:25:52.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p><a href="https://github.com/kkbjs/element3" target="_blank" rel="noopener">element3</a></p><h4 id="src-use-emitter-js"><a href="#src-use-emitter-js" class="headerlink" title="src/use/emitter.js"></a>src/use/emitter.js</h4><p>说起这个我得先把  <code>mitt</code> <a href="https://github.com/developit/mitt" target="_blank" rel="noopener">地址</a>  因为vue3中已经把 <code>$on</code>  给去除了 如果想要像  <code>vue2.x</code> 那样 使用 必须引入这个库, 我使用的cdn引入的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/mitt/dist/mitt.umd.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /* </span><br><span class="line">    这样引入的mitt是一个方法 返回的是一个emitter对象</span><br><span class="line">    这个一个emitter对象上面有四个属性</span><br><span class="line"><span class="javascript">    all 是一个<span class="built_in">Map</span>对象, </span></span><br><span class="line">    on 监听注册的事件,  on(type, handle)</span><br><span class="line">    emit 发射注册的事件, emit(type, handle)</span><br><span class="line">    off 移除 off(type, handle)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    type: string | <span class="built_in">Symbol</span></span></span><br><span class="line"><span class="javascript">    handle: <span class="built_in">Function</span></span></span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> emiiter = mitt();</span></span><br><span class="line"><span class="actionscript">    emiiter.on(<span class="string">'foo'</span>, e =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e) <span class="comment">// &#123;name: decade&#125;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    emiiter.on(<span class="string">'*'</span>, (type, e) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(type, e); <span class="comment">// 'foo', &#123;name: decade&#125;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    emiiter.emit(<span class="string">'foo'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">'decade'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是<code>emitter</code> 源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">'mitt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DISPATCH = <span class="string">'dispatch'</span></span><br><span class="line"><span class="keyword">const</span> BROADCAST = <span class="string">'broadcast'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wrapper = <span class="built_in">Symbol</span>(<span class="string">'wrapper'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter = mitt()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useEmitter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到当前vue组件的实例</span></span><br><span class="line">  <span class="keyword">const</span> currentComponentInstance = getCurrentInstance(); </span><br><span class="line">  <span class="comment">// 定义on方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// type 监听的string | Symbol</span></span><br><span class="line">    <span class="keyword">const</span> handleWrapper = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 定义的方法</span></span><br><span class="line">      <span class="keyword">const</span> &#123; value, type, emitComponentInstance &#125; = e</span><br><span class="line">      <span class="comment">// e 就是 发射事件 传入的参数</span></span><br><span class="line">      <span class="keyword">if</span> (type === BROADCAST) &#123;</span><br><span class="line">        <span class="comment">// 广播 由子往父</span></span><br><span class="line">        <span class="keyword">if</span> (isChildComponent(currentComponentInstance, emitComponentInstance)) &#123;</span><br><span class="line">          handler &amp;&amp; handler(...value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === DISPATCH) &#123;</span><br><span class="line">        <span class="comment">// 派发 由父往子</span></span><br><span class="line">        <span class="keyword">if</span> (isChildComponent(emitComponentInstance, currentComponentInstance)) &#123;</span><br><span class="line">          handler &amp;&amp; handler(...value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 就找监听的</span></span><br><span class="line">        handler &amp;&amp; handler(...value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save the real handler because the need to call off</span></span><br><span class="line">    handler[wrapper] = handleWrapper</span><br><span class="line">    emitter.on(type, handleWrapper)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 广播</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">type, ...args</span>) </span>&#123; </span><br><span class="line">    emitter.emit(type, &#123;</span><br><span class="line">      type: BROADCAST,</span><br><span class="line">      emitComponentInstance: currentComponentInstance,</span><br><span class="line">      value: args</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 派发</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">type, ...args</span>) </span>&#123;</span><br><span class="line">    emitter.emit(type, &#123;</span><br><span class="line">      type: DISPATCH,</span><br><span class="line">      emitComponentInstance: currentComponentInstance,</span><br><span class="line">      value: args</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    emitter.off(type, handler[wrapper])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只触发一次</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> handleOn = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      handler &amp;&amp; handler(...args)</span><br><span class="line">      off(type, handleOn)</span><br><span class="line">    &#125;</span><br><span class="line">    on(type, handleOn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    on,</span><br><span class="line">    broadcast,</span><br><span class="line">    dispatch,</span><br><span class="line">    off,</span><br><span class="line">    once</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * check componentChild is componentParent child components</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">componentChild</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">componentParent</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是子组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isChildComponent</span>(<span class="params">componentChild, componentParent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parentUId = componentParent.uid</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (componentChild &amp;&amp; componentChild?.parent?.uid !== parentUId) &#123;</span><br><span class="line">    componentChild = componentChild.parent</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Boolean</span>(componentChild)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>附带vue2.x emitter.js</code> 源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">componentName, eventName, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name = child.$options.componentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name === componentName) &#123;</span><br><span class="line">      child.$emit.apply(child, [eventName].concat(params));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      broadcast.apply(child, [componentName, eventName].concat([params]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      <span class="keyword">var</span> parent = <span class="keyword">this</span>.$parent || <span class="keyword">this</span>.$root;</span><br><span class="line">      <span class="keyword">var</span> name = parent.$options.componentName;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span><br><span class="line">        parent = parent.$parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">          name = parent.$options.componentName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    broadcast(componentName, eventName, params) &#123;</span><br><span class="line">      broadcast.call(<span class="keyword">this</span>, componentName, eventName, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      element Ui 学习笔记
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="element-ui" scheme="http://blog.decade.run/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>初识 jest (二)</title>
    <link href="http://blog.decade.run/2020/10/10/learn-jest-2/"/>
    <id>http://blog.decade.run/2020/10/10/learn-jest-2/</id>
    <published>2020-10-10T02:17:44.000Z</published>
    <updated>2020-10-10T03:29:07.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jest-中的匹配器"><a href="#Jest-中的匹配器" class="headerlink" title="Jest 中的匹配器"></a><code>Jest</code> 中的匹配器</h3><ul><li><p><code>toBe</code>  相当于  <code>===</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'two plus two is four'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">2</span> + <span class="number">2</span>).toBe(<span class="number">4</span>);</span><br><span class="line">  <span class="comment">// const a = &#123;</span></span><br><span class="line">  <span class="comment">//   name: 'decade'</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// expect(a).toBe(&#123;name: 'decade'&#125;); // 使用toBe来比较对象 会失败</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toEqual</code> 用于比较值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'object a '</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> a = &#123;</span><br><span class="line">    name: <span class="string">'decade'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  expect(a).toEqual(&#123;<span class="attr">name</span>: <span class="string">'decade'</span>&#125;); <span class="comment">// 这样就能通过了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>not</code>  去相反的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'not'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// expect(5).not.toBe(5);</span></span><br><span class="line">  expect(<span class="number">5</span>).not.toBe(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeNull</code>  只匹配 <code>Null</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'null'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="literal">null</span>).toBeNull();</span><br><span class="line">  <span class="comment">// expect(0).toBeNull();</span></span><br><span class="line">  <span class="comment">// expect(undefined).toBeNull();</span></span><br><span class="line">  <span class="comment">// expect(false).toBeNull();</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeUndefined</code>   只匹配  <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'undefined '</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="literal">undefined</span>).toBeUndefined();</span><br><span class="line">  <span class="comment">// expect(null).toBeUndefined();</span></span><br><span class="line">  <span class="comment">// expect(0).toBeUndefined();</span></span><br><span class="line">  <span class="comment">// expect(false).toBeUndefined();</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeDefined</code>  只匹配非 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeDefined '</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// expect(undefined).toBeDefined(); 希望得到的值不是undefined</span></span><br><span class="line">  expect(<span class="literal">null</span>).toBeDefined();</span><br><span class="line">  expect(<span class="number">0</span>).toBeDefined();</span><br><span class="line">  expect(<span class="literal">false</span>).toBeDefined();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeTruthy</code>  只匹配能使 <code>if</code>  语句为真的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeTruthy'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// expect(undefined).toBeTruthy();</span></span><br><span class="line">  <span class="comment">// expect(null).toBeTruthy();</span></span><br><span class="line">  <span class="comment">// expect(0).toBeTruthy();</span></span><br><span class="line">  <span class="comment">// expect(false).toBeTruthy();</span></span><br><span class="line">  <span class="comment">// expect().toBeTruthy(); 这样的相当于undefined</span></span><br><span class="line">  expect([]).toBeTruthy();</span><br><span class="line">  expect(&#123;&#125;).toBeTruthy();</span><br><span class="line">  expect(<span class="number">1</span>).toBeTruthy();</span><br><span class="line">  expect(<span class="literal">true</span>).toBeTruthy();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeFalsy</code>  只匹配 使 <code>if</code> 语句为假的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeFalsy'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="literal">undefined</span>).toBeFalsy();</span><br><span class="line">  expect(<span class="literal">null</span>).toBeFalsy();</span><br><span class="line">  expect(<span class="number">0</span>).toBeFalsy();</span><br><span class="line">  expect(<span class="literal">false</span>).toBeFalsy();</span><br><span class="line">  expect().toBeFalsy();</span><br><span class="line">  <span class="comment">// expect([]).toBeFalsy();</span></span><br><span class="line">  <span class="comment">// expect(&#123;&#125;).toBeFalsy();</span></span><br><span class="line">  <span class="comment">// expect(1).toBeFalsy();</span></span><br><span class="line">  <span class="comment">// expect(true).toBeFalsy();</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeGreaterThan</code> 期望值 大于  得到值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeGreaterThan'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">5</span>).toBeGreaterThan(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeGreaterThanOrEqual</code>  期望值 大于等于  得到值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeGreaterThanOrEqual'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">5</span>).toBeGreaterThanOrEqual(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeLessThan</code>  期望值 小于  得到值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeLessThan'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">5</span>).toBeLessThan(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeLessThanOrEqual</code> 期望值 小于等于  得到值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeLessThanOrEqual'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">5</span>).toBeLessThanOrEqual(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toBeCloseTo</code> 期望值 接近 得到值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'toBeCloseTo'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">0.1</span> + <span class="number">0.2</span>).toBeCloseTo(<span class="number">0.3</span>);</span><br><span class="line">  <span class="comment">// expect(1).toBeCloseTo(1.1); // Expected difference: &lt; 0.005</span></span><br><span class="line">  expect(<span class="number">1</span>).toBeCloseTo(<span class="number">1.00001</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个误差 在小于0.005</span></span><br></pre></td></tr></table></figure></li><li><p><code>toMatch</code>  期望值匹配正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'there is no I in team'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="string">'team'</span>).not.toMatch(<span class="regexp">/I/</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'but there is a "stop" in Christoph'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="string">'Christoph'</span>).toMatch(<span class="regexp">/stop/</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toContain</code>  得到值 包含在期望的列表里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> direction = [<span class="string">'up'</span>, <span class="string">'down'</span>, <span class="string">'left'</span>, <span class="string">'right'</span>];</span><br><span class="line"></span><br><span class="line">test(<span class="string">'the direction has up on it'</span>, () =&gt; &#123;</span><br><span class="line">  expect(direction).toContain(<span class="string">'up'</span>);</span><br><span class="line">  expect(<span class="keyword">new</span> <span class="built_in">Set</span>(direction)).toContain(<span class="string">'up'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>toThrow</code>  抛出异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileAndroidCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'you are using the wrong JDK'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'compiling android goes as expected'</span>, () =&gt; &#123;</span><br><span class="line">  expect(compileAndroidCode).toThrow();</span><br><span class="line">  expect(compileAndroidCode).toThrow(<span class="built_in">Error</span>);</span><br><span class="line">  expect(compileAndroidCode).toThrow(<span class="string">'you are using the wrong JDK'</span>);</span><br><span class="line">  expect(compileAndroidCode).toThrow(<span class="regexp">/JDK/</span>); <span class="comment">// 匹配 报错中是否有JDK</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      单元测试
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="Jest" scheme="http://blog.decade.run/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>初识 jest (一)</title>
    <link href="http://blog.decade.run/2020/10/10/learn-jest-1/"/>
    <id>http://blog.decade.run/2020/10/10/learn-jest-1/</id>
    <published>2020-10-10T00:45:08.000Z</published>
    <updated>2020-10-10T02:17:10.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Jest"><a href="#什么是-Jest" class="headerlink" title="什么是    Jest"></a>什么是    Jest</h3><p><a href="https://jestjs.io/docs/zh-Hans/getting-started" target="_blank" rel="noopener"><strong><code>Jest</code></strong></a> Facebook 的一套开源的 JavaScript 测试框架， 它自动集成了断言、JSDom、覆盖率报告等开发者所需要的所有测试工具，是一款几乎零配置的测试框架</p><p>创建一个 <code>Jest-Test</code> 文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Jest-Test</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>使用 <u><code>yarn</code></u> </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev jest</span><br></pre></td></tr></table></figure></li><li><p>使用  <u><code>npm</code></u> </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>创建一个  <code>twoSum.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = twoSum;</span><br></pre></td></tr></table></figure></li><li><p>创建一个 <code>twoSum.test.js</code> 文件     </p><p>jest 会默认<strong><code>.test.js</code></strong> 这样的文件为测试文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> twoSum = <span class="built_in">require</span>(<span class="string">"./twoSum"</span>);</span><br><span class="line">test(<span class="string">'add 1 + 2 equal 3'</span>, () =&gt; &#123;</span><br><span class="line">  expect(twoSum(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>运行</p><p>修改 <code>package.json</code>  中的 命令 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"test": "jest"</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn test</span><br></pre></td></tr></table></figure><p>控制台会打印出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> PASS  .&#x2F;twoSmu.test.js</span><br><span class="line">  √ add 1 + 2 equal 3 (2 ms)</span><br><span class="line"></span><br><span class="line">Test Suites: 1 passed, 1 total</span><br><span class="line">Tests:       1 passed, 1 total</span><br><span class="line">Snapshots:   0 total</span><br><span class="line">Time:        3.78 s</span><br><span class="line">Ran all test suites.</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用配置文件来配置"><a href="#使用配置文件来配置" class="headerlink" title="使用配置文件来配置"></a>使用配置文件来配置</h3><ul><li><p>全局安装jest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add jest</span><br></pre></td></tr></table></figure></li><li><p>生成配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">jest --init</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 选择node环境还是web浏览器环境</span><br><span class="line">? Choose the test environment that will be used for testing » - Use arrow-keys. Return to submit.</span><br><span class="line">    node</span><br><span class="line">&gt;   jsdom (browser-like)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否想让jest生成覆盖率报告</span><br><span class="line">? Do you want Jest to add coverage reports? » (y&#x2F;N) y</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 应该使用哪个提供程序来检测覆盖范围的代码</span><br><span class="line">? Which provider should be used to instrument code for coverage? » - Use arrow-keys. Return to submit.</span><br><span class="line">    v8</span><br><span class="line">&gt;   babel</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在每个测试之间自动清除模拟调用和实例</span><br><span class="line">? Automatically clear mock calls and instances between every test? » (y&#x2F;N) y</span><br></pre></td></tr></table></figure></li><li><p>生成的 <code>jest.config.js</code> 文件 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  clearMocks: <span class="literal">true</span>, <span class="comment">// 这个就是 自动清除模拟调用和实例</span></span><br><span class="line">  coverageDirectory: <span class="string">"coverage"</span>, <span class="comment">// 这个是生成 覆盖率文件的文件名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释的内容被我清除了</span></span><br></pre></td></tr></table></figure></li><li><p>由于 <code>jest</code> 不认识   <code>export/import</code> 所以我们需要使用 <code>babel</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev babel-jest @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>babel.config.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        targets: &#123;</span><br><span class="line">          node: <span class="string">'current'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>我们尝试下babel安装成功没有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// twoSum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> twoSum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// twoSum.test.js</span></span><br><span class="line"><span class="keyword">import</span> twoSum <span class="keyword">from</span> <span class="string">'./twoSum'</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>package.json</code>  中添加一条命令 生成覆盖率</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"coverage": "jest --coverage"</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">yarn test</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 成功</span><br><span class="line"> PASS  .&#x2F;twoSmu.test.js</span><br><span class="line">  √ add 1 + 2 equal 3 (2 ms)</span><br><span class="line"></span><br><span class="line">Test Suites: 1 passed, 1 total</span><br><span class="line">Tests:       1 passed, 1 total</span><br><span class="line">Snapshots:   0 total</span><br><span class="line">Time:        3.687 s</span><br><span class="line">Ran all test suites.</span><br><span class="line">Done in 5.32s.</span><br><span class="line"></span><br><span class="line">yarn coverage</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成的覆盖率 并且多了个coverage文件</span><br><span class="line">-----------|---------|----------|---------|---------|-------------------</span><br><span class="line">File       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s</span><br><span class="line">-----------|---------|----------|---------|---------|-------------------</span><br><span class="line">All files  |     100 |      100 |     100 |     100 |</span><br><span class="line"> twoSum.js |     100 |      100 |     100 |     100 |</span><br><span class="line">-----------|---------|----------|---------|---------|-------------------</span><br><span class="line">Test Suites: 1 passed, 1 total</span><br><span class="line">Tests:       1 passed, 1 total</span><br><span class="line">Snapshots:   0 total</span><br><span class="line">Time:        2.992 s, estimated 3 s</span><br><span class="line">Ran all test suites.</span><br><span class="line">Done in 4.35s.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      单元测试
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="Jest" scheme="http://blog.decade.run/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>learn-ts-5</title>
    <link href="http://blog.decade.run/2020/09/25/learn-ts-5/"/>
    <id>http://blog.decade.run/2020/09/25/learn-ts-5/</id>
    <published>2020-09-25T02:05:02.000Z</published>
    <updated>2020-10-01T01:13:28.008Z</updated>
    
    <summary type="html">
    
      学习使我快乐
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="TypeScript" scheme="http://blog.decade.run/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 重学 (四)</title>
    <link href="http://blog.decade.run/2020/09/25/learn-ts-4/"/>
    <id>http://blog.decade.run/2020/09/25/learn-ts-4/</id>
    <published>2020-09-25T02:04:19.000Z</published>
    <updated>2020-10-01T01:13:35.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TypeScript-泛型"><a href="#TypeScript-泛型" class="headerlink" title="TypeScript 泛型"></a>TypeScript 泛型</h3><p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p><p><strong>在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</strong></p><p>设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是：类的实例成员、类的方法、函数参数和函数返回值。</p><p>泛型（Generics）是允许同一个函数接受不同类型参数的一种模板。相比于使用 any 类型，使用泛型来创建可复用的组件要更好，因为泛型会保留参数类型。</p><ol><li><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Author&lt;T&gt; &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  (params: T): T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Temp&lt;T&gt; &#123;</span><br><span class="line">  value: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp = <span class="keyword">new</span> Temp&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>);</span><br><span class="line">temp.add = <span class="function"><span class="keyword">function</span>(<span class="params">x: nember, y: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="泛型变量"><a href="#泛型变量" class="headerlink" title="泛型变量"></a>泛型变量</h4><p>对刚接触 TypeScript 泛型的小伙伴来说，看到 T 和 E，还有 K 和 V 这些泛型变量时，估计会一脸懵逼。其实这些大写字母并没有什么本质的区别，只不过是一个约定好的规范而已。也就是说使用大写字母 A-Z 定义的类型变量都属于泛型，把 T 换成 A，也是一样的。下面我们介绍一下一些常见泛型变量代表的意思：</p><ul><li>T（Type）：表示一个 TypeScript 类型</li><li>K（Key）：表示对象中的键类型</li><li>V（Value）：表示对象中的值类型</li><li>E（Element）：表示元素类型</li></ul></li><li><h4 id="泛型工具类型"><a href="#泛型工具类型" class="headerlink" title="泛型工具类型"></a>泛型工具类型</h4><ol><li><p><strong>typeof</strong></p><p>在 TypeScript 中，<code>typeof</code> 操作符可以用来获取一个变量声明或对象的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bookData = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'JavaScript入门到入土'</span>,</span><br><span class="line">    author: <span class="string">'aaa'</span>,</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    publicDate: <span class="string">'xxxx-xx-xx'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'你不知道的JavaScript'</span>,</span><br><span class="line">    author: <span class="string">'bbb'</span>,</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    publicDate: <span class="string">'xxxx-xx-xx'</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BookType = <span class="keyword">typeof</span> bookData:</span><br><span class="line"><span class="comment">// TypeScript会自动的推断出BookType类型 &#123;name: string; author: string, id: number, publicDate: string &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddFuncType = <span class="keyword">typeof</span> add; <span class="comment">// =&gt; (x: number, y: number) =&gt; number</span></span><br></pre></td></tr></table></figure></li><li><p><strong>keyof</strong></p><p><code>keyof</code> 该操作符可以用于获取某种类型的所有键，其返回类型是联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> k1 = keyof Person; <span class="comment">// "name" | "age" </span></span><br><span class="line"><span class="keyword">let</span> a: k1 <span class="comment">// 这个时候a的取值 只能是"name" 或者 "age"</span></span><br><span class="line">a = <span class="string">"name"</span></span><br><span class="line">a = <span class="string">"age"</span></span><br><span class="line">a = <span class="string">"nihao"</span> <span class="comment">// Type '"nihao"' is not assignable to type '"name" | "age"'.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> k2 = keyof Person[]; </span><br><span class="line"><span class="comment">// type k2 = number | "length" | "toString" | "toLocaleString" | "pop" | "push" | "concat" | "join" | "reverse" | "shift" | "slice" | "sort" | "splice" | "unshift" | "indexOf" | "lastIndexOf" | ... 14 more ... | "includes"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b: k2;</span><br><span class="line"><span class="comment">// 通过上面的可以看出 b可以是数字 也可以是"length", "toString", "toLocaleString",  "pop", "push", "concat" ,"join" ,"reverse" ,"shift" ,"slice" ,"sort" ,"splice" ,"unshift" ,"indexOf" ,"lastIndexOf" ,"includes"  这些字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> k3 = keyof <span class="built_in">boolean</span>; <span class="comment">// type k3 = "valueOf"</span></span><br><span class="line"><span class="keyword">type</span> k4 = keyof <span class="built_in">number</span> <span class="comment">// type k4 = "toString" | "toFixed" | "toExponential" | "toPrecision" | "valueOf" | "toLocaleString"</span></span><br><span class="line"><span class="keyword">type</span> k5 = keyof <span class="built_in">string</span> <span class="comment">// type k5 = number | "toString" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | ... 27 more ... | "padEnd"</span></span><br><span class="line"><span class="keyword">type</span> k6 = keyof symbol <span class="comment">// type k6 = "toString" | "valueOf"</span></span><br><span class="line"><span class="keyword">type</span> k7 = keyof <span class="literal">undefined</span> <span class="comment">// type k7 = never</span></span><br><span class="line"><span class="keyword">type</span> k8 = keyof <span class="literal">null</span> <span class="comment">// type k8 = never</span></span><br><span class="line"><span class="keyword">type</span> k9 = keyof <span class="built_in">any</span> <span class="comment">// type k1 = string | number | symbol</span></span><br></pre></td></tr></table></figure><p><code>keyof</code> 也称为输入索引类型查询，与之相对应的是索引访问类型，也称为查找类型。在语法上，它们看起来像属性或元素访问，但最终会被转换为类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> k1 = Person[<span class="string">"name"</span>];  <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> k2 = Person[<span class="string">"name"</span> | <span class="string">"age"</span>];  <span class="comment">// string | number</span></span><br><span class="line"><span class="keyword">type</span> k3 = <span class="built_in">string</span>[<span class="string">"charAt"</span>];  <span class="comment">// (pos: number) =&gt; string</span></span><br><span class="line"><span class="keyword">type</span> k4 = <span class="built_in">string</span>[][<span class="string">"push"</span>];  <span class="comment">// (...items: string[]) =&gt; number</span></span><br></pre></td></tr></table></figure></li><li><p><strong>in</strong></p><p><code>in</code> 用来遍历枚举类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Keys = <span class="string">"a"</span> | <span class="string">"b"</span> | <span class="string">"c"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> obj = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> Keys]: <span class="built_in">any</span></span><br><span class="line">&#125;<span class="comment">// =&gt; &#123; a: any, b: any, c: any &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>infer</strong></p><p>在 TypeScript 中我们能够很方便地从复合类型中提取出单个类型，以数组、元组或对象为例，我们可以通过成员访问的语法来提取数组、元组或对象中元素或属性的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonName = Person[<span class="string">"name"</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> StrNumTuple = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">type</span> StrNumTuple0 = StrNumTuple[<span class="number">0</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> NumArr = <span class="built_in">number</span>[];</span><br><span class="line"><span class="keyword">type</span> NumArrMember = NumArr[<span class="number">0</span>]; <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> PersonName = Person[<span class="string">"name"</span>]; <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Dictionary&lt;T = any&gt; &#123;</span><br><span class="line">  [key: <span class="built_in">string</span>]: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StrDict = Dictionary&lt;<span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StrDictMember = StrDict[<span class="string">""</span>]; <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>除了上面的方式外, 我们还可以在条件类型语句中，可以用 <code>infer</code> 声明一个类型变量并且对它进行使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReturnType&lt;T&gt; = T <span class="keyword">extends</span> (...args: <span class="built_in">any</span>[]) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> func = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> variable = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> funcReturnType = ReturnType&lt;func&gt;; <span class="comment">// funcReturnType 类型为 number</span></span><br><span class="line"><span class="keyword">type</span> varReturnType = ReturnType&lt;variable&gt;; <span class="comment">// varReturnType 类型为 string</span></span><br></pre></td></tr></table></figure><p>  <code>infer</code> 可以用来解包</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没用infer</span></span><br><span class="line"><span class="keyword">type</span> Ids = <span class="built_in">number</span>[];</span><br><span class="line"><span class="keyword">type</span> Names = <span class="built_in">string</span>[];</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> Unpacked&lt;T&gt; = T <span class="keyword">extends</span> Names ? <span class="built_in">string</span> : T <span class="keyword">extends</span> Ids ? <span class="built_in">number</span> : T;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> idType = Unpacked&lt;Ids&gt;; <span class="comment">// idType 类型为 number</span></span><br><span class="line"><span class="keyword">type</span> nameType = Unpacked&lt;Names&gt;; <span class="comment">// nameType 类型为string</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 使用infer</span></span><br><span class="line"><span class="keyword">type</span> Unpacked&lt;T&gt; = T <span class="keyword">extends</span> (infer R)[] ? R : T;</span><br><span class="line"><span class="comment">// 如果T是某个待推断类型的数组，则返回推断的类型，否则返回T</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> idType = Unpacked&lt;Ids&gt;; <span class="comment">// idType 类型为 number</span></span><br><span class="line"><span class="keyword">type</span> nameType = Unpacked&lt;Names&gt;; <span class="comment">// nameType 类型为string</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// promise 中使用infer</span></span><br><span class="line">asyncfunction stringPromise() &#123;</span><br><span class="line">  <span class="keyword">return</span><span class="string">"Hello, Semlinker!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncfunction personPromise() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; name: <span class="string">"Semlinker"</span>, age: <span class="number">30</span> &#125; <span class="keyword">as</span> Person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PromiseType&lt;T&gt; = <span class="function">(<span class="params">args: <span class="built_in">any</span>[]</span>) =&gt;</span><span class="built_in">Promise</span>&lt;T&gt;;</span><br><span class="line"><span class="keyword">type</span> UnPromisify&lt;T&gt; = T <span class="keyword">extends</span> PromiseType&lt;infer U&gt; ? U : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> extractStringPromise = UnPromisify&lt;<span class="keyword">typeof</span> stringPromise&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> extractPersonPromise = UnPromisify&lt;<span class="keyword">typeof</span> personPromise&gt;; <span class="comment">// Person</span></span><br></pre></td></tr></table></figure><p>  <code>infer</code> 推断联合类型</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo&lt;T&gt; = T <span class="keyword">extends</span> &#123; a: infer U; b: infer U &#125; ? U : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T10 = Foo&lt;&#123; a: <span class="built_in">string</span>; b: <span class="built_in">string</span> &#125;&gt;; <span class="comment">// T10类型为 string</span></span><br><span class="line"><span class="keyword">type</span> T11 = Foo&lt;&#123; a: <span class="built_in">string</span>; b: <span class="built_in">number</span> &#125;&gt;; <span class="comment">// T11类型为 string | number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同一个类型变量在推断的值有多种情况的时候会推断为联合类型，针对这个特性，很方便的可以将元组转为联合类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ElementOf&lt;T&gt; = T <span class="keyword">extends</span> (infer R)[] ? R : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TTuple = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">type</span> Union = ElementOf&lt;TTuple&gt;; <span class="comment">// Union 类型为 string | number</span></span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> extractArrayType&lt;T&gt; = T <span class="keyword">extends</span> (infer U)[] ? U : never; <span class="comment">//传的必须是一个泛型数组</span></span><br><span class="line"><span class="keyword">let</span> stringType : extractArrayType&lt;[<span class="string">"test"</span>]&gt; = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringTypeNoArray : extractArrayType&lt;<span class="string">"test"</span>&gt; = <span class="string">"test"</span>;</span><br><span class="line"><span class="comment">// Type '"test"' is not assignable to type 'never'.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InferredAb&lt;T&gt; = T <span class="keyword">extends</span> &#123; a: infer U, b: infer U &#125; ? U : T; <span class="comment">// 就是能满足 返回 a | b 类型的联合类型</span></span><br><span class="line"><span class="keyword">type</span> abInferredNumber = InferredAb&lt; &#123; a :<span class="built_in">number</span>, b: <span class="built_in">number</span>&#125;&gt;; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">let</span> abinf : abInferredNumber = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> abInferredNumberString = InferredAb&lt; &#123; a :<span class="built_in">number</span>, b: <span class="built_in">string</span>&#125;&gt;; <span class="comment">// number | string </span></span><br><span class="line"><span class="keyword">let</span> abinfstr : abInferredNumberString = <span class="number">1</span>;</span><br><span class="line">abinfstr = <span class="string">"test"</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>extends</strong></p><p>有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ILengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ILengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error, number doesn't have a .length property</span></span><br><span class="line"></span><br><span class="line">loggingIdentity(&#123;length: <span class="number">10</span>, value: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li><p><strong>Partial</strong></p><p><code>Partial&lt;T&gt;</code> 的作用就是将某个类型里的属性全部变为可选项 <code>?</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * node_modules/typescript/lib/lib.es5.d.ts</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将T类型中的所有的属性 全部变成可选属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Author &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  hobby: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Author1 = Partial&lt;Author&gt;;</span><br><span class="line"><span class="comment">// type Author1 = &#123; name?: string; age?: number; hobby?: string; &#125;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>TypeScript 装饰器</p><ol><li><h4 id="装饰器是什么"><a href="#装饰器是什么" class="headerlink" title="装饰器是什么"></a>装饰器是什么</h4><ul><li>它是一个表达式</li><li>该表达式被执行后，返回一个函数</li><li>函数的入参分别为 target、name 和 descriptor</li><li>执行该函数后，可能返回 descriptor 对象，用于配置 target 对象</li></ul></li><li><h4 id="装饰器的分类"><a href="#装饰器的分类" class="headerlink" title="装饰器的分类"></a>装饰器的分类</h4><ul><li><p>类装饰器（Class decorators）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类装饰器的声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> ClassDecorator = &lt;TFunction <span class="keyword">extends</span> <span class="built_in">Function</span>&gt;(</span><br><span class="line">  target: TFunction</span><br><span class="line">) =&gt; TFunction | <span class="built_in">void</span>;</span><br><span class="line"><span class="comment">// 参数target 就是被装饰的类</span></span><br></pre></td></tr></table></figure></li><li><p>属性装饰器（Property decorators）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性装饰器声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> PropertyDecorator = (target:<span class="built_in">Object</span>, </span><br><span class="line">  propertyKey: <span class="built_in">string</span> | symbol ) =&gt; <span class="built_in">void</span>;</span><br><span class="line"><span class="comment">// target 被装饰的类 propertyKey: 被装饰的键名</span></span><br></pre></td></tr></table></figure></li><li><p>方法装饰器（Method decorators）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> MethodDecorator = &lt;T&gt;(target:<span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | symbol,    </span><br><span class="line">  descriptor: TypePropertyDescript&lt;T&gt;) =&gt; TypedPropertyDescriptor&lt;T&gt; | <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// target 被装饰的类  propertyKey: 方法名 descriptor: 属性描述符</span></span><br></pre></td></tr></table></figure></li><li><p>参数装饰器（Parameter decorators）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数装饰器声明</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> ParameterDecorator = (target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | symbol, </span><br><span class="line">  parameterIndex: <span class="built_in">number</span> ) =&gt; <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// target: 被装饰的类 propertyKey: 方法名 parameterIndex: 方法中参数的索引值</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><h3 id="编译上下文"><a href="#编译上下文" class="headerlink" title="编译上下文"></a>编译上下文</h3><ol><li><h4 id="tsconfig-json-的作用"><a href="#tsconfig-json-的作用" class="headerlink" title="tsconfig.json 的作用"></a>tsconfig.json 的作用</h4><ul><li>用于标识 TypeScript 项目的根路径；</li><li>用于配置 TypeScript 编译器；</li><li>用于指定编译的文件。</li></ul></li><li><h4 id="tsconfig-json-重要字段"><a href="#tsconfig-json-重要字段" class="headerlink" title="tsconfig.json 重要字段"></a>tsconfig.json 重要字段</h4><ul><li>files - 设置要编译的文件的名称；</li><li>include - 设置需要进行编译的文件，支持路径模式匹配；</li><li>exclude - 设置无需进行编译的文件，支持路径模式匹配；</li><li>compilerOptions - 设置与编译流程相关的选项</li></ul></li><li><h4 id="compilerOptions-选项"><a href="#compilerOptions-选项" class="headerlink" title="compilerOptions 选项"></a>compilerOptions 选项</h4><p>compilerOptions 支持很多选项，常见的有 <code>baseUrl</code>、 <code>target</code>、<code>baseUrl</code>、 <code>moduleResolution</code> 和 <code>lib</code> 等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 基本选项 */</span></span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,                       <span class="comment">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span></span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,                  <span class="comment">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span></span><br><span class="line">    <span class="string">"lib"</span>: [],                             <span class="comment">// 指定要包含在编译中的库文件</span></span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 允许编译 javascript 文件</span></span><br><span class="line">    <span class="string">"checkJs"</span>: <span class="literal">true</span>,                       <span class="comment">// 报告 javascript 文件中的错误</span></span><br><span class="line">    <span class="string">"jsx"</span>: <span class="string">"preserve"</span>,                     <span class="comment">// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'</span></span><br><span class="line">    <span class="string">"declaration"</span>: <span class="literal">true</span>,                   <span class="comment">// 生成相应的 '.d.ts' 文件</span></span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,                     <span class="comment">// 生成相应的 '.map' 文件</span></span><br><span class="line">    <span class="string">"outFile"</span>: <span class="string">"./"</span>,                       <span class="comment">// 将输出文件合并为一个文件</span></span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./"</span>,                        <span class="comment">// 指定输出目录</span></span><br><span class="line">    <span class="string">"rootDir"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用来控制输出目录结构 --outDir.</span></span><br><span class="line">    <span class="string">"removeComments"</span>: <span class="literal">true</span>,                <span class="comment">// 删除编译后的所有的注释</span></span><br><span class="line">    <span class="string">"noEmit"</span>: <span class="literal">true</span>,                        <span class="comment">// 不生成输出文件</span></span><br><span class="line">    <span class="string">"importHelpers"</span>: <span class="literal">true</span>,                 <span class="comment">// 从 tslib 导入辅助工具函数</span></span><br><span class="line">    <span class="string">"isolatedModules"</span>: <span class="literal">true</span>,               <span class="comment">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 严格的类型检查选项 */</span></span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span>,                        <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,                 <span class="comment">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class="line">    <span class="string">"strictNullChecks"</span>: <span class="literal">true</span>,              <span class="comment">// 启用严格的 null 检查</span></span><br><span class="line">    <span class="string">"noImplicitThis"</span>: <span class="literal">true</span>,                <span class="comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span><br><span class="line">    <span class="string">"alwaysStrict"</span>: <span class="literal">true</span>,                  <span class="comment">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 额外的检查 */</span></span><br><span class="line">    <span class="string">"noUnusedLocals"</span>: <span class="literal">true</span>,                <span class="comment">// 有未使用的变量时，抛出错误</span></span><br><span class="line">    <span class="string">"noUnusedParameters"</span>: <span class="literal">true</span>,            <span class="comment">// 有未使用的参数时，抛出错误</span></span><br><span class="line">    <span class="string">"noImplicitReturns"</span>: <span class="literal">true</span>,             <span class="comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span><br><span class="line">    <span class="string">"noFallthroughCasesInSwitch"</span>: <span class="literal">true</span>,    <span class="comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模块解析选项 */</span></span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,            <span class="comment">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span></span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"./"</span>,                       <span class="comment">// 用于解析非相对模块名称的基目录</span></span><br><span class="line">    <span class="string">"paths"</span>: &#123;&#125;,                           <span class="comment">// 模块名到基于 baseUrl 的路径映射的列表</span></span><br><span class="line">    <span class="string">"rootDirs"</span>: [],                        <span class="comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span><br><span class="line">    <span class="string">"typeRoots"</span>: [],                       <span class="comment">// 包含类型声明的文件列表</span></span><br><span class="line">    <span class="string">"types"</span>: [],                           <span class="comment">// 需要包含的类型声明文件名列表</span></span><br><span class="line">    <span class="string">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,  <span class="comment">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="string">"sourceRoot"</span>: <span class="string">"./"</span>,                    <span class="comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span><br><span class="line">    <span class="string">"mapRoot"</span>: <span class="string">"./"</span>,                       <span class="comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span><br><span class="line">    <span class="string">"inlineSourceMap"</span>: <span class="literal">true</span>,               <span class="comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span><br><span class="line">    <span class="string">"inlineSources"</span>: <span class="literal">true</span>,                 <span class="comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其他选项 */</span></span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,        <span class="comment">// 启用装饰器</span></span><br><span class="line">    <span class="string">"emitDecoratorMetadata"</span>: <span class="literal">true</span>          <span class="comment">// 为装饰器提供元数据的支持</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      学习使我快乐
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="TypeScript" scheme="http://blog.decade.run/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 重学 (三)</title>
    <link href="http://blog.decade.run/2020/09/24/learn-ts-3/"/>
    <id>http://blog.decade.run/2020/09/24/learn-ts-3/</id>
    <published>2020-09-24T03:39:00.000Z</published>
    <updated>2020-10-01T01:13:43.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TypeScript-数组"><a href="#TypeScript-数组" class="headerlink" title="TypeScript 数组"></a>TypeScript 数组</h3><ol><li><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">number</span>; </span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">number</span> ;</span><br><span class="line"><span class="keyword">let</span> z: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">[x,y,z] = arr;</span><br></pre></td></tr></table></figure></li><li><h4 id="数组展开运算符"><a href="#数组展开运算符" class="headerlink" title="数组展开运算符"></a>数组展开运算符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [...arr <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure></li><li><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors: <span class="built_in">string</span>[] = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i of colors) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="TypeScript-对象"><a href="#TypeScript-对象" class="headerlink" title="TypeScript 对象"></a>TypeScript 对象</h3><ol><li><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> author = &#123;</span><br><span class="line">  name: <span class="string">"Decade"</span>,</span><br><span class="line">  gender: <span class="string">"Male"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name, gender &#125; = author;</span><br></pre></td></tr></table></figure></li><li><h4 id="对象展开运算符"><a href="#对象展开运算符" class="headerlink" title="对象展开运算符"></a>对象展开运算符</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> author = &#123;</span><br><span class="line">  name: <span class="string">"Decade"</span>,</span><br><span class="line">  gender: <span class="string">"Male"</span>,</span><br><span class="line">  address: <span class="string">"ChongQing"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组装对象</span></span><br><span class="line"><span class="keyword">let</span> authorWithAge = &#123; ...author, age: <span class="number">33</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取除了某些项外的其它项</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, ...rest &#125; = author;</span><br></pre></td></tr></table></figure></li></ol><h3 id="TypeScript-接口"><a href="#TypeScript-接口" class="headerlink" title="TypeScript 接口"></a>TypeScript 接口</h3><p>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</p><p>TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</p><ol><li><h4 id="对象的形状"><a href="#对象的形状" class="headerlink" title="对象的形状"></a>对象的形状</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Author &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> author: Author = &#123;</span><br><span class="line">  name: <span class="string">"Decade"</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h4 id="可选-只读属性"><a href="#可选-只读属性" class="headerlink" title="可选 | 只读属性"></a>可选 | 只读属性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Author &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>; <span class="comment">// 只读</span></span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 可选</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只读属性用于限制只能在对象刚刚创建的时候修改其值。此外 TypeScript 还提供了 ReadonlyArray&lt;T&gt; 类型，它与 Array&lt;T&gt; 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="TypeScript-类"><a href="#TypeScript-类" class="headerlink" title="TypeScript 类"></a>TypeScript 类</h3><ol><li><h4 id="类的属性与方法"><a href="#类的属性与方法" class="headerlink" title="类的属性与方法"></a>类的属性与方法</h4><p>在面向对象语言中，类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Author &#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> name: <span class="built_in">string</span> = <span class="string">"Decade"</span>;</span><br><span class="line">  <span class="comment">// 成员属性</span></span><br><span class="line">  msg: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数 - 执行初始化操作</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.msg = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Class name is Author"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 成员方法</span></span><br><span class="line">  info() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.msg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> author = <span class="keyword">new</span> Author(<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure><p>那么成员属性与静态属性，成员方法与静态方法有什么区别呢？我们直接看一下以下编译生成的 ES5 代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> Author = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数 - 执行初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    Author.getClassName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Class name is Author"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    Author.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.msg;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    Author.cname = <span class="string">"Decade"</span>;</span><br><span class="line">    <span class="keyword">return</span> Author;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> author = <span class="keyword">new</span> Author(<span class="string">"world"</span>);</span><br></pre></td></tr></table></figure></li><li><h4 id="访问器"><a href="#访问器" class="headerlink" title="访问器"></a>访问器</h4><p>在 TypeScript 中，我们可以通过 <code>getter</code> 和 <code>setter</code> 方法来实现数据的封装和有效性校验，防止出现异常数据。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passcode = <span class="string">"Hello TypeScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> fullName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">"Hello TypeScript"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Error: Unauthorized update of employee!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Semlinker"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p>继承 (Inheritance) 是一种联结类与类的层次模型。指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = theName;</span><br><span class="line">  &#125;</span><br><span class="line">  move(distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Slithering..."</span>);</span><br><span class="line">    <span class="keyword">super</span>.move(distanceInMeters);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">"Sammy the Python"</span>);</span><br><span class="line">sam.move();</span><br></pre></td></tr></table></figure></li><li><h4 id="ECMAScript-私有字段"><a href="#ECMAScript-私有字段" class="headerlink" title="ECMAScript 私有字段"></a>ECMAScript 私有字段</h4><p>在 TypeScript 3.8 版本就开始支持<strong>ECMAScript 私有字段</strong>，使用方式如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  #name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.#name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.#name&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> semlinker = <span class="keyword">new</span> Person(<span class="string">"Semlinker"</span>);</span><br><span class="line"></span><br><span class="line">semlinker.#name;</span><br><span class="line"><span class="comment">//     ~~~~~</span></span><br><span class="line"><span class="comment">// Property '#name' is not accessible outside class 'Person'</span></span><br><span class="line"><span class="comment">// because it has a private identifier.</span></span><br></pre></td></tr></table></figure><p>与常规属性（甚至使用 <code>private</code> 修饰符声明的属性）不同，私有字段要牢记以下规则：</p><ul><li>私有字段以 <code>#</code> 字符开头，有时我们称之为私有名称；</li><li>每个私有字段名称都唯一地限定于其包含的类；</li><li>不能在私有字段上使用 TypeScript 可访问性修饰符（如 public 或 private）；</li><li>私有字段不能在包含的类之外访问，甚至不能被检测到。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      学习使我快乐
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="TypeScript" scheme="http://blog.decade.run/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 重学 (二)</title>
    <link href="http://blog.decade.run/2020/09/24/learn-ts-2/"/>
    <id>http://blog.decade.run/2020/09/24/learn-ts-2/</id>
    <published>2020-09-24T03:38:03.000Z</published>
    <updated>2020-10-01T01:13:45.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TypeScript类型断言"><a href="#TypeScript类型断言" class="headerlink" title="TypeScript类型断言"></a>TypeScript类型断言</h3><p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有这个一个例子 可以是string 或者 number 这时我们需要拿到例子的length属性 但是number是没有length </span></span><br><span class="line"><span class="keyword">let</span> example: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(example.length); <span class="comment">// 这样是会有报错的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用类型断言 我们可以怎么写</span></span><br><span class="line"><span class="keyword">let</span> length: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> example === <span class="string">'number'</span>) &#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">length = example.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类型断言</span></span><br><span class="line"><span class="comment">// 尖括号写法</span></span><br><span class="line">length = (&lt;<span class="built_in">string</span>&gt;example).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as写法 推荐这种</span></span><br><span class="line">length = (example <span class="keyword">as</span> <span class="built_in">string</span>).length</span><br></pre></td></tr></table></figure><h3 id="类型守卫"><a href="#类型守卫" class="headerlink" title="类型守卫"></a>类型守卫</h3><p>类型保护是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内。换句话说，类型保护可以保证一个字符串是一个字符串，尽管它的值也可以是一个数值。类型保护与特性检测并不是完全不同，其主要思想是尝试检测属性、方法或原型，以确定如何处理值。目前主要有四种的方式来实现类型保护：</p><ol><li><h4 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Teacher &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  wage: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Student &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  tuition: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDetail</span>(<span class="params">people: Teacher | Student</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">`我的名字是<span class="subst">$&#123;people.name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'wage'</span> <span class="keyword">in</span> people) &#123;</span><br><span class="line">    msg += <span class="string">`我的工资是<span class="subst">$&#123;people.wage&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'tuition'</span> <span class="keyword">in</span> people) &#123;</span><br><span class="line">    msg += <span class="string">`我的学费是<span class="subst">$&#123;people.tuition&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="typeof-关键字"><a href="#typeof-关键字" class="headerlink" title="typeof 关键字"></a>typeof 关键字</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> example: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> example === <span class="string">'number'</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(example)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(example.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以用来检验继承</span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以类型转换</span></span><br><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> parent: Child = <span class="keyword">new</span> Parent(<span class="string">"parent"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parent <span class="keyword">instanceof</span> Child) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(parent.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="自定义类型保护的类型谓词"><a href="#自定义类型保护的类型谓词" class="headerlink" title="自定义类型保护的类型谓词"></a>自定义类型保护的类型谓词</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"number"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"string"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="联合类型和类型别名"><a href="#联合类型和类型别名" class="headerlink" title="联合类型和类型别名"></a>联合类型和类型别名</h3><ol><li><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> numberOrString = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">let</span> example: numberOrString = <span class="number">1</span> </span><br><span class="line">example = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="可辨识联合"><a href="#可辨识联合" class="headerlink" title="可辨识联合"></a>可辨识联合</h4><p>TypeScript 可辨识联合（Discriminated Unions）类型，也称为代数数据类型或标签联合类型。<strong>它包含 3 个要点：可辨识、联合类型和类型守卫。</strong></p><p>这种类型的本质是结合联合类型和字面量类型的一种类型保护方法。<strong>如果一个类型是多个类型的联合类型，且多个类型含有一个公共属性，那么就可以利用这个公共属性，来创建不同的类型保护区块。</strong> </p><ol><li><p>可辨识要求联合类型中的每个元素都含有一个单例类型属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> CarTransmission &#123;</span><br><span class="line">  Automatic = <span class="number">200</span>,</span><br><span class="line">  Manual = <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Motorcycle &#123;</span><br><span class="line">  vType: <span class="string">"motorcycle"</span>; <span class="comment">// discriminant</span></span><br><span class="line">  make: <span class="built_in">number</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Car &#123;</span><br><span class="line">  vType: <span class="string">"car"</span>; <span class="comment">// discriminant</span></span><br><span class="line">  transmission: CarTransmission</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Truck &#123;</span><br><span class="line">  vType: <span class="string">"truck"</span>; <span class="comment">// discriminant</span></span><br><span class="line">  capacity: <span class="built_in">number</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们分别定义了 <code>Motorcycle</code>、 <code>Car</code> 和 <code>Truck</code> 三个接口，在这些接口中都包含一个 <code>vType</code> 属性，该属性被称为可辨识的属性，而其它的属性只跟特性的接口相关。</p></li><li><p>基于前面定义了三个接口，我们可以创建一个 <code>Vehicle</code> 联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vehicle = Motorcycle | Car | Truck;</span><br></pre></td></tr></table></figure><p>现在我们就可以开始使用 <code>Vehicle</code> 联合类型，对于 <code>Vehicle</code> 类型的变量，它可以表示不同类型的车辆。</p></li><li><p><strong>类型守卫</strong></p><p>下面我们来定义一个 <code>evaluatePrice</code> 方法，该方法用于根据车辆的类型、容量和评估因子来计算价格，具体实现如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EVALUATION_FACTOR = <span class="built_in">Math</span>.PI; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluatePrice</span>(<span class="params">vehicle: Vehicle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> vehicle.capacity * EVALUATION_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myTruck: Truck = &#123; vType: <span class="string">"truck"</span>, capacity: <span class="number">9.5</span> &#125;;</span><br><span class="line">evaluatePrice(myTruck);</span><br></pre></td></tr></table></figure><p>对于以上代码，TypeScript 编译器将会提示以下错误信息：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Property <span class="string">'capacity'</span> does not exist on <span class="keyword">type</span> <span class="string">'Vehicle'</span>.</span><br><span class="line">Property <span class="string">'capacity'</span> does not exist on <span class="keyword">type</span> <span class="string">'Motorcycle'</span>.</span><br></pre></td></tr></table></figure><p>原因是在 Motorcycle 接口中，并不存在 <code>capacity</code> 属性，而对于 Car 接口来说，它也不存在 <code>capacity</code> 属性。那么，现在我们应该如何解决以上问题呢？这时，我们可以使用类型守卫。下面我们来重构一下前面定义的 <code>evaluatePrice</code> 方法，重构后的代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluatePrice</span>(<span class="params">vehicle: Vehicle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(vehicle.vType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"car"</span>:</span><br><span class="line">      <span class="keyword">return</span> vehicle.transmission * EVALUATION_FACTOR;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"truck"</span>:</span><br><span class="line">      <span class="keyword">return</span> vehicle.capacity * EVALUATION_FACTOR;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"motorcycle"</span>:</span><br><span class="line">      <span class="keyword">return</span> vehicle.make * EVALUATION_FACTOR;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，我们使用 <code>switch</code> 和 <code>case</code> 运算符来实现类型守卫，从而确保在 <code>evaluatePrice</code> 方法中，我们可以安全地访问 <code>vehicle</code> 对象中的所包含的属性，来正确的计算该车辆类型所对应的价格。</p></li></ol></li><li><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message = <span class="built_in">string</span> | <span class="built_in">string</span>[];</span><br></pre></td></tr></table></figure></li></ol><h3 id="类型交叉"><a href="#类型交叉" class="headerlink" title="类型交叉"></a>类型交叉</h3><p>TypeScript 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IWorker &#123;</span><br><span class="line">  companyId: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IStaff = IPerson &amp; IWorker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> staff: IStaff = &#123;</span><br><span class="line">  id: <span class="string">'E1006'</span>,</span><br><span class="line">  age: <span class="number">33</span>,</span><br><span class="line">  companyId: <span class="string">'EFT'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="TypeScript-函数"><a href="#TypeScript-函数" class="headerlink" title="TypeScript 函数"></a>TypeScript 函数</h3><ol><li><h4 id="TypeScript-函数与-JavaScript-函数的区别"><a href="#TypeScript-函数与-JavaScript-函数的区别" class="headerlink" title="TypeScript 函数与 JavaScript 函数的区别"></a>TypeScript 函数与 JavaScript 函数的区别</h4><table><thead><tr><th align="left">TypeScript</th><th align="left">JavaScript</th></tr></thead><tbody><tr><td align="left">含有类型</td><td align="left">无类型</td></tr><tr><td align="left">箭头函数</td><td align="left">箭头函数（ES2015）</td></tr><tr><td align="left">函数类型</td><td align="left">无函数类型</td></tr><tr><td align="left">必填和可选参数</td><td align="left">所有参数都是可选的</td></tr><tr><td align="left">默认参数</td><td align="left">默认参数</td></tr><tr><td align="left">剩余参数</td><td align="left">剩余参数</td></tr><tr><td align="left">函数重载</td><td align="left">无函数重载</td></tr></tbody></table></li><li><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>typescript 中的箭头函数 是函数的返回类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getLength:<span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getLength 这个方法 满足 参数 是string类型 返回值 是number类型</span></span><br></pre></td></tr></table></figure><p>可选参数和默认参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 可选参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar: <span class="built_in">number</span>, bas?: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 默认</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar: <span class="built_in">number</span>, bas: <span class="built_in">string</span> = 'hello'</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bar, bas);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 参数是对象的时候</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">&#123;one , two &#125; : &#123;one:<span class="built_in">number</span>, two:<span class="built_in">number</span>&#125;</span>) :<span class="title">number</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> one + two</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">const</span> three = add(&#123;one:<span class="number">1</span>,two:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p>剩余参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">conbime</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> result = [];</span><br><span class="line">     items.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       result.push(items)</span><br><span class="line">    &#125;)</span><br><span class="line">     result = [...array, ...result]</span><br><span class="line">&#125;;</span><br><span class="line">   <span class="comment">// 注意添加的数组的类型要一样</span></span><br></pre></td></tr></table></figure></li><li><p>函数重载</p><p>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。要解决前面遇到的问题，方法就是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">all: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">topAndBottom: <span class="built_in">number</span>, leftAndRight: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">top: <span class="built_in">number</span>, right: <span class="built_in">number</span>, bottom: <span class="built_in">number</span>, left: <span class="built_in">number</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span>, c?: <span class="built_in">number</span>, d?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="literal">undefined</span> &amp;&amp; c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span>) &#123;</span><br><span class="line">     b = c = d = a;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      c = a;</span><br><span class="line">      d = b;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c !== <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      d = b</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     top: a,</span><br><span class="line">     right: b,</span><br><span class="line">     bottom: c,</span><br><span class="line">     left: d</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      学习使我快乐
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="TypeScript" scheme="http://blog.decade.run/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 重学 (一)</title>
    <link href="http://blog.decade.run/2020/09/24/learn-ts-1/"/>
    <id>http://blog.decade.run/2020/09/24/learn-ts-1/</id>
    <published>2020-09-24T00:27:21.000Z</published>
    <updated>2020-10-01T01:13:50.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TypeScript-是什么"><a href="#TypeScript-是什么" class="headerlink" title="TypeScript 是什么"></a>TypeScript 是什么</h3><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件</p><ul><li><h4 id="TypeScript-与-JavaScript-的区别"><a href="#TypeScript-与-JavaScript-的区别" class="headerlink" title="TypeScript 与 JavaScript 的区别"></a>TypeScript 与 JavaScript 的区别</h4><table><thead><tr><th align="center">TypeScript</th><th align="center">JavaScript</th></tr></thead><tbody><tr><td align="center">JavaScript 的超集用于解决大型项目的代码复杂性</td><td align="center">一种脚本语言，用于创建动态网页。</td></tr><tr><td align="center">可以在编译期间发现并纠正错误</td><td align="center">作为一种解释型语言，只能在运行时发现错误</td></tr><tr><td align="center">强类型，支持静态和动态类型</td><td align="center">弱类型，没有静态类型选项</td></tr><tr><td align="center">最终被编译成 JavaScript 代码，使浏览器可以理解</td><td align="center">可以直接在浏览器中使用</td></tr><tr><td align="center">支持模块、泛型和接口</td><td align="center">不支持模块，泛型或接口</td></tr><tr><td align="center">支持 ES3，ES4，ES5 和 ES6 等</td><td align="center">不支持编译其他 ES3，ES4，ES5 或 ES6 功能</td></tr><tr><td align="center">社区的支持仍在增长，而且还不是很大</td><td align="center">大量的社区支持以及大量文档和解决问题的支持</td></tr></tbody></table></li><li><h4 id="安装TypeScript"><a href="#安装TypeScript" class="headerlink" title="安装TypeScript"></a>安装TypeScript</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">npm install typescript -g</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译ts文件</span></span><br><span class="line">tsc HelloWorld.ts</span><br><span class="line"><span class="comment">// 就会生辰相应的js文件</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="TypeScript-基础类型"><a href="#TypeScript-基础类型" class="headerlink" title="TypeScript 基础类型"></a>TypeScript 基础类型</h3><ul><li><h4 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isActive: <span class="built_in">Boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count: <span class="built_in">number</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"decade"</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="Array-类型"><a href="#Array-类型" class="headerlink" title="Array 类型"></a>Array 类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrT: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// Array&lt;number&gt;泛型语法</span></span><br></pre></td></tr></table></figure></li><li><h4 id="Enum-类型"><a href="#Enum-类型" class="headerlink" title="Enum 类型"></a>Enum 类型</h4><p>使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript 支持数字的和基于字符串的枚举。</p><ul><li><p><strong>数字枚举</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  UP,</span><br><span class="line">  DOWN,</span><br><span class="line">  RIGHT,</span><br><span class="line">  LEFT,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dir: Direction = Direction.UP;</span><br></pre></td></tr></table></figure><p>默认情况下，UP的初始值为 0，其余的成员会从 1 开始自动增长。换句话说，Direction.DOWN的值为 1，Direction.RIGHT的值为 2，Direction.LEFT的值为 3。上面的枚举示例代码经过编译后会生成以下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> Direction;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Direction</span>) </span>&#123;</span><br><span class="line">  Direction[(Direction[<span class="string">"UP"</span>] = <span class="number">0</span>)] = <span class="string">"NORTHUP</span></span><br><span class="line"><span class="string">  Direction[(Direction["</span>DOWN<span class="string">"] = 1)] = "</span>DOWN<span class="string">";</span></span><br><span class="line"><span class="string">  Direction[(Direction["</span>RIGHT<span class="string">"] = 2)] = "</span>RIGHT<span class="string">";</span></span><br><span class="line"><span class="string">  Direction[(Direction["</span>LEFT<span class="string">"] = 3)] = "</span>LEFT<span class="string">";</span></span><br><span class="line"><span class="string">&#125;)(Direction || (Direction = &#123;&#125;));</span></span><br><span class="line"><span class="string">var dir = Direction.UP;</span></span><br></pre></td></tr></table></figure><p>根据上面的编译我们也可以这么用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Direction[<span class="number">0</span>]) <span class="comment">// UP</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction[<span class="string">"UP"</span>]) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction[Direction.UP]) <span class="comment">// UP</span></span><br></pre></td></tr></table></figure><p>当然我们也可以设置 NORTH 的初始值，比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">  UP = <span class="number">3</span>,</span><br><span class="line">  DOWN,</span><br><span class="line">  RIGHT,</span><br><span class="line">  LEFT,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>字符串枚举</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MediaTypes &#123;</span><br><span class="line"><span class="built_in">JSON</span> = <span class="string">"application/json"</span>,</span><br><span class="line">XML = <span class="string">"application/xml"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MediaTypes;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">MediaTypes</span>) </span>&#123;</span><br><span class="line">    MediaTypes[<span class="string">"JSON"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">    MediaTypes[<span class="string">"XML"</span>] = <span class="string">"application/xml"</span>;</span><br><span class="line">&#125;)(MediaTypes || (MediaTypes = &#123;&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样意味着 我们不能 通过 MediaTypes["application/json"]; 来访问JSON</span></span><br></pre></td></tr></table></figure></li><li><p><strong>异构枚举</strong></p><p>异构枚举的成员值是数字和字符串的混合：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Enum &#123;</span><br><span class="line">  A,</span><br><span class="line">  B,</span><br><span class="line">  C = <span class="string">"C"</span>,</span><br><span class="line">  D = <span class="string">"D"</span>,</span><br><span class="line">  E = <span class="number">8</span>,</span><br><span class="line">  F,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="Any-类型"><a href="#Any-类型" class="headerlink" title="Any 类型"></a>Any 类型</h4><p>在 TypeScript 中，任何类型都可以被归为 any 类型。这让 any 类型成为了类型系统的顶级类型（也被称作全局超级类型）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">666</span>;</span><br><span class="line">notSure = <span class="string">"DECADE"</span>;</span><br><span class="line">notSure = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><code>any</code> 类型本质上是类型系统的一个逃逸舱。作为开发者，这给了我们很大的自由：TypeScript 允许我们对 <code>any</code> 类型的值执行任何操作，而无需事先执行任何形式的检查。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">value.foo.bar; <span class="comment">// OK</span></span><br><span class="line">value.trim(); <span class="comment">// OK</span></span><br><span class="line">value(); <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">new</span> value(); <span class="comment">// OK</span></span><br><span class="line">value[<span class="number">0</span>][<span class="number">1</span>]; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>在许多场景下，这太宽松了。使用 <code>any</code> 类型，可以很容易地编写类型正确但在运行时有问题的代码。如果我们使用 <code>any</code> 类型，就无法使用 TypeScript 提供的大量的保护机制。为了解决 <code>any</code> 带来的问题，TypeScript 3.0 引入了 <code>unknown</code> 类型。</p></li><li><h4 id="Unknown-类型"><a href="#Unknown-类型" class="headerlink" title="Unknown 类型"></a>Unknown 类型</h4><p>就像所有类型都可以赋值给 <code>any</code>，所有类型也都可以赋值给 <code>unknown</code>。这使得 <code>unknown</code> 成为 TypeScript 类型系统的另一种顶级类型（另一种是 <code>any</code>）。下面我们来看一下 <code>unknown</code> 类型的使用示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown;</span><br><span class="line"></span><br><span class="line">value = <span class="literal">true</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">"Hello World"</span>; <span class="comment">// OK</span></span><br><span class="line">value = []; <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;; <span class="comment">// OK</span></span><br><span class="line">value = <span class="built_in">Math</span>.random; <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>; <span class="comment">// OK</span></span><br><span class="line">value = <span class="keyword">new</span> <span class="built_in">TypeError</span>(); <span class="comment">// OK</span></span><br><span class="line">value = Symbol(<span class="string">"type"</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>对 <code>value</code> 变量的所有赋值都被认为是类型正确的。但是，当我们尝试将类型为 <code>unknown</code> 的值赋值给其他类型的变量时会发生什么？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value1: unknown = value; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> value2: <span class="built_in">any</span> = value; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> value3: <span class="built_in">boolean</span> = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value4: <span class="built_in">number</span> = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value5: <span class="built_in">string</span> = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value6: object = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value7: <span class="built_in">any</span>[] = value; <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> value8: <span class="built_in">Function</span> = value; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p><code>unknown</code> 类型只能被赋值给 <code>any</code> 类型和 <code>unknown</code> 类型本身。直观地说，这是有道理的：只有能够保存任意类型值的容器才能保存 <code>unknown</code> 类型的值。毕竟我们不知道变量 <code>value</code> 中存储了什么类型的值。</p><p>现在让我们看看当我们尝试对类型为 <code>unknown</code> 的值执行操作时会发生什么。以下是我们在之前 <code>any</code> 章节看过的相同操作：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown;</span><br><span class="line"></span><br><span class="line">value.foo.bar; <span class="comment">// Error</span></span><br><span class="line">value.trim(); <span class="comment">// Error</span></span><br><span class="line">value(); <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">new</span> value(); <span class="comment">// Error</span></span><br><span class="line">value[<span class="number">0</span>][<span class="number">1</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>将 <code>value</code> 变量类型设置为 <code>unknown</code> 后，这些操作都不再被认为是类型正确的。通过将 <code>any</code> 类型改变为 <code>unknown</code> 类型，我们已将允许所有更改的默认设置，更改为禁止任何更改。</p></li><li><h4 id="Tuple-类型"><a href="#Tuple-类型" class="headerlink" title="Tuple 类型"></a>Tuple 类型</h4><p>众所周知，数组一般由同种类型的值组成，但有时我们需要在单个变量中存储不同类型的值，这时候我们就可以使用元组。在 JavaScript 中是没有元组的，元组是 TypeScript 中特有的类型，其工作方式类似于数组。</p><p>元组可用于定义具有有限数量的未命名属性的类型。每个属性都有一个关联的类型。使用元组时，必须提供每个属性的值。为了更直观地理解元组的概念，我们来看一个具体的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tupleType: [<span class="built_in">string</span>, <span class="built_in">boolean</span>];</span><br><span class="line">tupleType = [<span class="string">"DECADE"</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul><p>  在上面代码中，我们定义了一个名为 <code>tupleType</code> 的变量，它的类型是一个类型数组 <code>[string, boolean]</code>，然后我们按照正确的类型依次初始化 tupleType 变量。与数组一样，我们可以通过下标来访问元组中的元素：</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(tupleType[<span class="number">0</span>]); <span class="comment">// DECADE</span></span><br><span class="line"><span class="built_in">console</span>.log(tupleType[<span class="number">1</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>  在元组初始化的时候，如果出现类型不匹配的话，比如：</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tupleType = [<span class="literal">true</span>, <span class="string">"DECADE"</span>];</span><br></pre></td></tr></table></figure><p>  此时，TypeScript 编译器会提示以下错误信息：</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>]: Type <span class="string">'true'</span> is not assignable to <span class="keyword">type</span> <span class="string">'string'</span>.</span><br><span class="line">[<span class="number">1</span>]: Type <span class="string">'string'</span> is not assignable to <span class="keyword">type</span> <span class="string">'boolean'</span>.</span><br></pre></td></tr></table></figure><p>  很明显是因为类型不匹配导致的。在元组初始化的时候，我们还必须提供每个属性的值，不然也会出现错误，比如：</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tupleType = [<span class="string">"DECADE"</span>];</span><br></pre></td></tr></table></figure><p>  此时，TypeScript 编译器会提示以下错误信息：</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Property <span class="string">'1'</span> is missing <span class="keyword">in</span> <span class="keyword">type</span> <span class="string">'[string]'</span> but required <span class="keyword">in</span> <span class="keyword">type</span> <span class="string">'[string, boolean]'</span>.</span><br></pre></td></tr></table></figure><p>  元组类型的解构</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> employee: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">"decade"</span>];</span><br><span class="line"><span class="keyword">let</span> [id, username] = employee;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`id: <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`username: <span class="subst">$&#123;username&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是解构数组元素多了 会报错</span></span><br><span class="line"><span class="keyword">let</span> [id, username, age] = employee;</span><br><span class="line"><span class="comment">// Tuple type '[number, string]' of length '2' has no element at index '2'.</span></span><br></pre></td></tr></table></figure><p>  元组类型的可选参数</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> optionalTuple: [<span class="built_in">string</span>, <span class="built_in">boolean</span>?] = [<span class="string">"decade"</span>];</span><br></pre></td></tr></table></figure><p>  元组类型的剩余元素</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RestTupleType = [<span class="built_in">number</span>, ...string[]];</span><br><span class="line"><span class="keyword">let</span> restTuple: RestTupleType = [<span class="number">666</span>, <span class="string">"decade"</span>, <span class="string">"zi-o"</span>, <span class="string">"build"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果中间 放个不是string 的</span></span><br><span class="line">restTuple = [<span class="number">666</span>, <span class="string">"decade"</span>, <span class="number">20</span>, <span class="string">"build"</span>];</span><br><span class="line"><span class="comment">// Type '[number, string, number, string]' is not assignable to type '[number, ...string[]]'.</span></span><br><span class="line"><span class="comment">//  Property '2' is incompatible with rest element type.</span></span><br><span class="line"><span class="comment">//    Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><p>  元组类型的展开表达式</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point3D = [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> drawPoint = <span class="function">(<span class="params">...point3D: Point3D</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(point3D);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xyzCoordinate: Point3D = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字面量的形式设置值</span></span><br><span class="line">drawPoint(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用索引的方式来访问xyzCoordinate元组中的元素</span></span><br><span class="line">drawPoint(xyzCoordinate[<span class="number">0</span>], xyzCoordinate[<span class="number">1</span>], xyzCoordinate[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用展开语法来访问xyzCoordinate元组中的元素</span></span><br><span class="line">drawPoint(...xyzCoordinate);</span><br></pre></td></tr></table></figure><ul><li><h4 id="Void-类型"><a href="#Void-类型" class="headerlink" title="Void 类型"></a>Void 类型</h4><p>某种程度上来说，void 类型像是与 any 类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 void：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数返回值为void</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  以上代码编译生成的 ES5 代码如下：</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  需要注意的是，声明一个 void 类型的变量没有什么作用，因为它的值只能为 <code>undefined</code> 或 <code>null</code>：</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><ul><li><h4 id="Null-和-Undefined-类型"><a href="#Null-和-Undefined-类型" class="headerlink" title="Null 和 Undefined 类型"></a>Null 和 Undefined 类型</h4><p>TypeScript 里，<code>undefined</code> 和 <code>null</code> 两者有各自的类型分别为 <code>undefined</code> 和 <code>null</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。<strong>然而，如果你指定了<code>--strictNullChecks</code> 标记，<code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们各自的类型。</strong></p></li><li><h4 id="Never-类型"><a href="#Never-类型" class="headerlink" title="Never 类型"></a>Never 类型</h4><p><code>never</code> 类型表示的是那些永不存在的值的类型。 例如，<code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 TypeScript 中，可以利用 never 类型的特性来实现全面性检查，具体示例如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">controlFlowAnalysisWithNever</span>(<span class="params">foo: Foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里 foo 被收窄为 string 类型</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里 foo 被收窄为 number 类型</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// foo 在这里是 never</span></span><br><span class="line">    <span class="keyword">const</span> check: never = foo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      学习使我快乐
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="TypeScript" scheme="http://blog.decade.run/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>quick start vue3 - 1</title>
    <link href="http://blog.decade.run/2020/09/23/quick-start-vue3-1/"/>
    <id>http://blog.decade.run/2020/09/23/quick-start-vue3-1/</id>
    <published>2020-09-23T00:33:55.000Z</published>
    <updated>2020-09-25T00:33:20.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="应用配置项"><a href="#应用配置项" class="headerlink" title="应用配置项"></a>应用配置项</h3><p>config 是一个包含 Vue 应用程序全局配置的对象。可以在挂载应用程序之前修改下面列出的属性。</p><ul><li><strong>devtools</strong> <strong>类型：</strong> boolean <strong>默认值：</strong> true <strong>如何使用：</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.config.devtools = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 是否开启 vue-devtools 工具的检测，默认情况下开发环境是 true，生产环境下则为 false。</span></span><br></pre></td></tr></table></figure><ul><li><strong>errorHandler</strong> <strong>类型：</strong> Function <strong>默认值：</strong> undefined <strong>如何使用：</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.config.errorHandler = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// info 为 Vue 在某个生命周期发生错误的信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为组件渲染功能和观察程序期间的未捕获错误分配处理程序。</span></span><br></pre></td></tr></table></figure><ul><li><strong>globalProperties</strong> 🌟 <strong>类型：</strong> [key: string]: any <strong>默认值：</strong> undefined <strong>如何使用：</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.config.globalProperties.userName = <span class="string">'decade'</span></span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'c-component'</span>, &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.userName) <span class="comment">// 'decade'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若是组件内也有 name 属性，则组建内的属性权限比较高。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还有一个知识点很重要，在 Vue2.x 中，我们定义一个全局属性或者方法都是如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$md5 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>在 Vue3.0 中，我们便可这样定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.config.globalProperties.$md5 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>performance</strong> <strong>类型：</strong> boolean <strong>默认值：</strong> false <strong>如何使用：</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.config.performance = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 将其设置为 true 可在浏览器 devtool 性能/时间线面板中启用组件初始化，编译，渲染和补丁性能跟踪。 仅在开发模式和支持 Performance.mark API的浏览器中工作。</span></span><br></pre></td></tr></table></figure><h4 id="Application-API"><a href="#Application-API" class="headerlink" title="Application API"></a>Application API</h4><p>全局改变的动作，都在 createApp 所创建的应用实例中，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>那么 app 下这些属性：</p><ul><li><strong>component</strong> <strong>参数：</strong> 第一个参数 string 类型表示组件名，第二个参数 Function 或 Object <strong>返回值：</strong> 只传第一个参数，返回组建。带上第二个参数则返回应用程序实例 <strong>如何使用：</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;)</span><br><span class="line"><span class="comment">// 注册一个 options 对象</span></span><br><span class="line">app.component(<span class="string">'shisan-component'</span>, &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检索注册的组件</span></span><br><span class="line"><span class="keyword">const</span> DecadeComponent = app.component(<span class="string">'decade-component'</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>config</strong>(上面第一段讲过了)</li><li><strong>directive</strong> 自定义指令变化不大，还是之前那些东西，如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.directive(<span class="string">'my-directive'</span>, &#123;</span><br><span class="line">  <span class="comment">// 挂载前</span></span><br><span class="line">  beforeMount() &#123;&#125;,</span><br><span class="line">  <span class="comment">// 挂载后</span></span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  <span class="comment">// 更新前</span></span><br><span class="line">  beforeUpdate() &#123;&#125;,</span><br><span class="line">  <span class="comment">// 更新后</span></span><br><span class="line">  updated() &#123;&#125;,</span><br><span class="line">  <span class="comment">// 卸载前</span></span><br><span class="line">  beforeUnmount() &#123;&#125;,</span><br><span class="line">  <span class="comment">// 卸载后</span></span><br><span class="line">  unmounted() &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="composition-api"><a href="#composition-api" class="headerlink" title="composition api"></a>composition api</h3><p>composition api为vue应用提供更好的逻辑复用和代码组织。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &lt;p&gt;counter: &#123;&#123;counter&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p&gt;doubleCounter: &#123;&#123;doubleCounter&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p ref&#x3D;&quot;desc&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;</span><br><span class="line"> reactive,</span><br><span class="line"> computed,</span><br><span class="line"> watch,</span><br><span class="line"> ref,</span><br><span class="line"> toRefs,</span><br><span class="line"> onMounted,</span><br><span class="line"> onUnmounted,</span><br><span class="line">&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">   const data &#x3D; reactive(&#123;</span><br><span class="line">     counter: 1,</span><br><span class="line">     doubleCounter: computed(() &#x3D;&gt; data.counter * 2),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">   let timer</span><br><span class="line"></span><br><span class="line">   onMounted(() &#x3D;&gt; &#123;</span><br><span class="line">     timer &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">       data.counter++</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">   onUnmounted(() &#x3D;&gt; &#123;</span><br><span class="line">     clearInterval(timer)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">   const desc &#x3D; ref(null)</span><br><span class="line"></span><br><span class="line">   watch(()&#x3D;&gt;data.counter, (val,oldVal)&#x3D;&gt;&#123;</span><br><span class="line">     &#x2F;&#x2F; console.log(&#96;counter change from $&#123;oldVal&#125; to $&#123;val&#125;&#96;);</span><br><span class="line">     desc.value.textContent &#x3D; &#96;counter change from $&#123;oldVal&#125; to $&#123;val&#125;&#96;</span><br><span class="line">  &#125;)</span><br><span class="line">   </span><br><span class="line">   return &#123;...toRefs(data), desc&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><p>传送门组件提供一种简洁的方式可以指定它里面内容的父元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button @click&#x3D;&quot;modalOpen &#x3D; true&quot;&gt;</span><br><span class="line">  弹出一个全屏模态窗口&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line"> &lt;teleport to&#x3D;&quot;body&quot;&gt;</span><br><span class="line">   &lt;div v-if&#x3D;&quot;modalOpen&quot; class&#x3D;&quot;modal&quot;&gt;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">      这是一个模态窗口!</span><br><span class="line">      我的父元素是&quot;body&quot;！</span><br><span class="line">       &lt;button @click&#x3D;&quot;modalOpen &#x3D; false&quot;&gt;Close&lt;&#x2F;button&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;teleport&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> data() &#123;</span><br><span class="line">   return &#123;</span><br><span class="line">     modalOpen: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.modal &#123;</span><br><span class="line"> position: absolute;</span><br><span class="line"> top: 0; right: 0; bottom: 0; left: 0;</span><br><span class="line"> background-color: rgba(0,0,0,.5);</span><br><span class="line"> display: flex;</span><br><span class="line"> flex-direction: column;</span><br><span class="line"> align-items: center;</span><br><span class="line"> justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.modal div &#123;</span><br><span class="line"> display: flex;</span><br><span class="line"> flex-direction: column;</span><br><span class="line"> align-items: center;</span><br><span class="line"> justify-content: center;</span><br><span class="line"> background-color: white;</span><br><span class="line"> width: 300px;</span><br><span class="line"> height: 300px;</span><br><span class="line"> padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h3><p>vue3中组件可以拥有多个根。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;header&gt;...&lt;&#x2F;header&gt;</span><br><span class="line"> &lt;main v-bind&#x3D;&quot;$attrs&quot;&gt;...&lt;&#x2F;main&gt;</span><br><span class="line"> &lt;footer&gt;...&lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h3 id="Emits-Component-Option"><a href="#Emits-Component-Option" class="headerlink" title="Emits Component Option"></a>Emits Component Option</h3><p>vue3中组件发送的自定义事件需要定义在emits选项中：</p><ul><li>原生事件会触发两次，比如<code>click</code></li><li>更好的指示组件工作方式</li><li>对象形式事件校验</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div @click&#x3D;&quot;$emit(&#39;click&#39;)&quot;&gt;</span><br><span class="line">   &lt;h3&gt;自定义事件&lt;&#x2F;h3&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> emits: [&#39;click&#39;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义渲染器-custom-renderer"><a href="#自定义渲染器-custom-renderer" class="headerlink" title="自定义渲染器 custom renderer"></a>自定义渲染器 custom renderer</h3><p>Vue3.0中支持 <em>自定义渲染器</em> (Renderer)：这个 API 可以用来自定义渲染逻辑。比如下面的案例我们可以把数据渲染到canvas上。</p><ul><li><p>首先创建一个组件描述要渲染的数据，我们想要渲染一个叫做piechart的组件，我们不需要单独声明该组件，因为我们只是想把它携带的数据绘制到canvas上。创建CanvasApp.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;piechart @click&#x3D;&quot;handleClick&quot; :data&#x3D;&quot;state.data&quot; :x&#x3D;&quot;200&quot; :y&#x3D;&quot;200&quot; :r&#x3D;&quot;200&quot;&gt;&lt;&#x2F;piechart&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">   const state &#x3D; reactive(&#123;</span><br><span class="line">     data: [</span><br><span class="line">      &#123; name: &quot;大专&quot;, count: 200, color: &quot;brown&quot; &#125;,</span><br><span class="line">      &#123; name: &quot;本科&quot;, count: 300, color: &quot;yellow&quot; &#125;,</span><br><span class="line">      &#123; name: &quot;硕士&quot;, count: 100, color: &quot;pink&quot; &#125;,</span><br><span class="line">      &#123; name: &quot;博士&quot;, count: 50, color: &quot;skyblue&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">   function handleClick() &#123;</span><br><span class="line">     state.data.push(&#123; name: &quot;其他&quot;, count: 30, color: &quot;orange&quot; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">   return &#123;</span><br><span class="line">     state,</span><br><span class="line">     handleClick</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>下面我们创建自定义渲染器，main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, createRenderer &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> CanvasApp <span class="keyword">from</span> <span class="string">'./CanvasApp.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nodeOps = &#123;</span><br><span class="line"> insert: <span class="function">(<span class="params">child, parent, anchor</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 我们重写了insert逻辑，因为在我们canvasApp中不存在实际dom插入操作</span></span><br><span class="line">   <span class="comment">// 这里面只需要将元素之间的父子关系保存一下即可</span></span><br><span class="line">   child.parent = parent;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!parent.childs) &#123;</span><br><span class="line">     parent.childs = [child]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     parent.childs.push(child);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 只有canvas有nodeType，这里就是开始绘制内容到canvas</span></span><br><span class="line">   <span class="keyword">if</span> (parent.nodeType == <span class="number">1</span>) &#123;</span><br><span class="line">     draw(child);</span><br><span class="line">     <span class="comment">// 如果子元素上附加了事件，我们给canvas添加监听器</span></span><br><span class="line">     <span class="keyword">if</span> (child.onClick) &#123;</span><br><span class="line">       ctx.canvas.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">         child.onClick();</span><br><span class="line">         setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           draw(child)</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"> remove: <span class="function"><span class="params">child</span> =&gt;</span> &#123;&#125;,</span><br><span class="line"> createElement: <span class="function">(<span class="params">tag, isSVG, is</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 创建元素时由于没有需要创建的dom元素，只需返回当前元素数据对象</span></span><br><span class="line">   <span class="keyword">return</span> &#123;tag&#125;</span><br><span class="line">&#125;,</span><br><span class="line"> createText: <span class="function"><span class="params">text</span> =&gt;</span> &#123;&#125;,</span><br><span class="line"> createComment: <span class="function"><span class="params">text</span> =&gt;</span> &#123;&#125;,</span><br><span class="line"> setText: <span class="function">(<span class="params">node, text</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line"> setElementText: <span class="function">(<span class="params">el, text</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line"> parentNode: <span class="function"><span class="params">node</span> =&gt;</span> &#123;&#125;,</span><br><span class="line"> nextSibling: <span class="function"><span class="params">node</span> =&gt;</span> &#123;&#125;,</span><br><span class="line"> querySelector: <span class="function"><span class="params">selector</span> =&gt;</span> &#123;&#125;,</span><br><span class="line"> setScopeId(el, id) &#123;&#125;,</span><br><span class="line"> cloneNode(el) &#123;&#125;,</span><br><span class="line"> insertStaticContent(content, parent, anchor, isSVG) &#123;&#125;,</span><br><span class="line"> patchProp(el, key, prevValue, nextValue) &#123;</span><br><span class="line">   el[key] = nextValue;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个渲染器</span></span><br><span class="line"><span class="keyword">let</span> renderer = createRenderer(nodeOps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存画布和其上下文</span></span><br><span class="line"><span class="keyword">let</span> ctx;</span><br><span class="line"><span class="keyword">let</span> canvas;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展mount，首先创建一个画布元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCanvasApp</span>(<span class="params">App</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> app = renderer.createApp(App);</span><br><span class="line"> <span class="keyword">const</span> mount = app.mount</span><br><span class="line"> app.mount = mount(selector) &#123;</span><br><span class="line">   canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">   canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">   canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">   <span class="built_in">document</span>.querySelector(selector).appendChild(canvas);</span><br><span class="line">   ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">   mount(canvas);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createCanvasApp(CanvasApp).mount(<span class="string">'#demo'</span>)</span><br></pre></td></tr></table></figure></li><li><p>编写绘制逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> draw = <span class="function">(<span class="params">el,noClear</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (!noClear) &#123;</span><br><span class="line">   ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span> (el.tag == <span class="string">'piechart'</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> &#123; data, r, x, y &#125; = el;</span><br><span class="line">   <span class="keyword">let</span> total = data.reduce(<span class="function">(<span class="params">memo, current</span>) =&gt;</span> memo + current.count, <span class="number">0</span>);</span><br><span class="line">   <span class="keyword">let</span> start = <span class="number">0</span>,</span><br><span class="line">       end = <span class="number">0</span>;</span><br><span class="line">   data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">     end += item.count / total * <span class="number">360</span>;</span><br><span class="line">     drawPieChart(start, end, item.color, x, y, r);</span><br><span class="line">     drawPieChartText(item.name, (start + end) / <span class="number">2</span>, x, y, r);</span><br><span class="line">     start = end;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> el.childs &amp;&amp; el.childs.forEach(<span class="function"><span class="params">child</span> =&gt;</span> draw(child,<span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d2a = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> n * <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> drawPieChart = <span class="function">(<span class="params">start, end, color, cx, cy, r</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> x = cx + <span class="built_in">Math</span>.cos(d2a(start)) * r;</span><br><span class="line"> <span class="keyword">let</span> y = cy + <span class="built_in">Math</span>.sin(d2a(start)) * r;</span><br><span class="line"> ctx.beginPath();</span><br><span class="line"> ctx.moveTo(cx, cy);</span><br><span class="line"> ctx.lineTo(x, y);</span><br><span class="line"> ctx.arc(cx, cy, r, d2a(start), d2a(end), <span class="literal">false</span>);</span><br><span class="line"> ctx.fillStyle = color;</span><br><span class="line"> ctx.fill();</span><br><span class="line"> ctx.stroke();</span><br><span class="line"> ctx.closePath();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> drawPieChartText = <span class="function">(<span class="params">val, position, cx, cy, r</span>) =&gt;</span> &#123;</span><br><span class="line"> ctx.beginPath();</span><br><span class="line"> <span class="keyword">let</span> x = cx + <span class="built_in">Math</span>.cos(d2a(position)) * r/<span class="number">1.25</span> - <span class="number">20</span>;</span><br><span class="line"> <span class="keyword">let</span> y = cy + <span class="built_in">Math</span>.sin(d2a(position)) * r/<span class="number">1.25</span>;</span><br><span class="line"> ctx.fillStyle = <span class="string">'#000'</span>;</span><br><span class="line"> ctx.font = <span class="string">'20px 微软雅黑'</span>;</span><br><span class="line"> ctx.fillText(val,x,y);</span><br><span class="line"> ctx.closePath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> setup() &#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    a: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    state.a++</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reactive 相当于 Vue2.x 的 Vue.observable () API，经过 reactive 处理后的函数能变成响应式的数据，类似之前写模板页面时定义的 data 属性的值。</span></span><br></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, computed, watchEffect &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123; <span class="attr">a</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> double = computed(<span class="function"><span class="params">()</span> =&gt;</span> state.a * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wa = watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 使用到了哪个 ref/reactive 对象.value, 就监听哪个</span></span><br><span class="line">      <span class="built_in">console</span>.log(double.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 可以通过 wa.stop 停止监听</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// watchEffect 被称之为副作用，立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。</span></span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">   <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    a: <span class="number">0</span></span><br><span class="line">   &#125;)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">const</span> double = computed(<span class="function"><span class="params">()</span> =&gt;</span> state.a * <span class="number">3</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    state.a++</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">    double,</span><br><span class="line">    state,</span><br><span class="line">    increment</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ref-和-toRefs"><a href="#ref-和-toRefs" class="headerlink" title="ref 和 toRefs"></a>ref 和 toRefs</h3><p>toRefs 提供了一个方法可以把 reactive 的值处理为 ref，也就是将响应式的对象处理为普通对象。</p><h3 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h3><p>与 2.x 版本相对应的生命周期钩子</p><table><thead><tr><th>Vue2.x 的生命周期</th><th>Vue3.x 的生命周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td></tr><tr><td>created</td><td>setup()</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td></tr><tr><td>destroyed</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr></tbody></table><p>Vue3.0 在 Composition API 中另外加了两个钩子，分别是 <code>onRenderTracked</code> 和 <code>onRenderTriggered</code>，两个钩子函数都接收一个 <code>DebuggerEvent</code> :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  onRenderTriggered(e) &#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">    <span class="comment">// 检查哪个依赖性导致组件重新渲染</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-skill-1</title>
    <link href="http://blog.decade.run/2020/09/22/vue-skill/"/>
    <id>http://blog.decade.run/2020/09/22/vue-skill/</id>
    <published>2020-09-22T01:09:23.000Z</published>
    <updated>2020-09-22T08:28:44.499Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue中的通信"><a href="#vue中的通信" class="headerlink" title="vue中的通信"></a>vue中的通信</h4><ul><li><p><code>props</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- parent --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;msg&quot;&gt;</span><br><span class="line">&lt;Child :msg&#x3D;&quot;msg&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;msg&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>$emit</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- parent --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;msg&quot;&gt;</span><br><span class="line">&lt;Child :msg&#x3D;&quot;msg&quot;&#x2F;&gt;</span><br><span class="line">&lt;span v-html&#x3D;&quot;childMsg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;&#39;,</span><br><span class="line">      childMsg: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    childChange(val) &#123;</span><br><span class="line">      this.childMsg &#x3D; val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;span&gt;我是child&lt;&#x2F;span&gt;&lt;input v-model&#x3D;&quot;value&quot;&#x2F;&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;handleClick&quot;&gt;</span><br><span class="line">    点击子组件</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;msg&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      value: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$emit(&quot;childChange&quot;, this.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>$parent</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- parent --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;msg&quot;&gt;</span><br><span class="line">&lt;Child :msg&#x3D;&quot;msg&quot; @childChange&#x3D;&quot;childChange&quot;&#x2F;&gt;</span><br><span class="line">&lt;span v-html&#x3D;&quot;childMsg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;&#39;,</span><br><span class="line">      childMsg: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    childChange(val) &#123;</span><br><span class="line">      this.childMsg &#x3D; val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;span&gt;我是child&lt;&#x2F;span&gt;&lt;input v-model&#x3D;&quot;value&quot;&#x2F;&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;handleClick&quot;&gt;</span><br><span class="line">    点击子组件</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;msg&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      value: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$parent.childChange(this.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>vueBus</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vueBus = <span class="keyword">new</span> Vue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vueBus;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- parent --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;msg&quot;&gt;</span><br><span class="line">&lt;Child :msg&#x3D;&quot;msg&quot; &#x2F;&gt;</span><br><span class="line">&lt;span v-html&#x3D;&quot;childMsg&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &#39;.&#x2F;vueBus&#39;</span><br><span class="line">import Child from &#39;.&#x2F;Child&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;&#39;,</span><br><span class="line">      childMsg: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  create() &#123;</span><br><span class="line">    Bus.$on(&quot;childToParent&quot;, this.childChange)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    Bus.$off(&quot;childToParent&quot;, this.childChange)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    childChange(val) &#123;</span><br><span class="line">this.childMsg &#x3D; val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;span&gt;我是child&lt;&#x2F;span&gt;&lt;input v-model&#x3D;&quot;value&quot;&#x2F;&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;handleClick&quot;&gt;</span><br><span class="line">    点击子组件</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &#39;.&#x2F;vueBus&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;msg&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      value: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      Bus.$emit(&quot;childToParent&quot;, this.value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>$attr</code>  &amp;&amp;  <code>$listeners</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- grandpa --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Parent class&#x3D;&quot;child&quot; name&#x3D;&quot;child&quot; :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :hobby&#x3D;&quot;hobby&quot;  @click&#x3D;&quot;handleClick&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Parent from &#39;.&#x2F;Parent&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#39;decade&#39;,</span><br><span class="line">      age: 20,</span><br><span class="line">      hobby: &#39;code&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Parent</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">alert(&quot;我是爷爷&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Parent --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    我是parent</span><br><span class="line">  &lt;&#x2F;h1&gt;</span><br><span class="line">&lt;Child v-bind&#x3D;&quot;$attrs&quot; v-on&#x3D;&quot;$listeners&quot;&gt;&lt;&#x2F;Child&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#39;name&#39;], &#x2F;&#x2F; 如果props声明了  this.$attrs里面就不会打印</span><br><span class="line">  created() &#123;</span><br><span class="line">    consolo.log(this.$attrs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">    我是child</span><br><span class="line">  &lt;&#x2F;h2&gt;</span><br><span class="line">&#123;&#123; this.$attrs.name &#125;&#125;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &#39;.&#x2F;vueBus&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    consolo.log(this.$attrs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>provide</code> &amp;&amp; <code>inject</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- parent --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Child &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#39;.&#x2F;Child&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  provide() &#123; &#x2F;&#x2F; provide也可以作为一个对象</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;我是从parent传来的&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Child --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">&#x2F;&#x2F; inject: [&quot;msg&quot;],</span><br><span class="line">  inject: &#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">      default: &#39;我是默认值&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>element 源码中的 <a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element</a>/<a href="https://github.com/ElemeFE/element/tree/dev/src" target="_blank" rel="noopener">src</a>/<a href="https://github.com/ElemeFE/element/tree/dev/src/mixins" target="_blank" rel="noopener">mixins</a>/<strong>emitter.js</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">componentName, eventName, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name = child.$options.componentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name === componentName) &#123;</span><br><span class="line">      child.$emit.apply(child, [eventName].concat(params));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      broadcast.apply(child, [componentName, eventName].concat([params]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      <span class="keyword">var</span> parent = <span class="keyword">this</span>.$parent || <span class="keyword">this</span>.$root;</span><br><span class="line">      <span class="keyword">var</span> name = parent.$options.componentName;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span><br><span class="line">        parent = parent.$parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">          name = parent.$options.componentName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    broadcast(componentName, eventName, params) &#123;</span><br><span class="line">      broadcast.call(<span class="keyword">this</span>, componentName, eventName, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>use-vue3.0</title>
    <link href="http://blog.decade.run/2020/09/14/use-vue3-0/"/>
    <id>http://blog.decade.run/2020/09/14/use-vue3-0/</id>
    <published>2020-09-14T02:50:48.000Z</published>
    <updated>2020-09-23T00:35:06.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作-与-分析差异"><a href="#准备工作-与-分析差异" class="headerlink" title="准备工作 与 分析差异"></a>准备工作 与 分析差异</h3><ul><li><p>安装脚手架</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue/cli -g</span><br><span class="line"></span><br><span class="line">vue - V</span><br></pre></td></tr></table></figure></li><li><p>创建vue3项目</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.<span class="number">5</span>.<span class="number">6</span></span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">  Default ([Vue <span class="number">2</span>] babel, eslint)</span><br><span class="line">  Default (Vue <span class="number">3</span> Preview) ([Vue <span class="number">3</span>] babel, eslint)</span><br><span class="line">&gt; Manually select features</span><br><span class="line"></span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project:</span><br><span class="line"> (*) Choose Vue version</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line">&gt;(*) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing </span><br><span class="line"> </span><br><span class="line"> ? Choose a version of Vue.js that you want to <span class="built_in">start</span> the project with</span><br><span class="line">  <span class="number">2</span>.x</span><br><span class="line">&gt; <span class="number">3</span>.x (Preview)</span><br><span class="line"></span><br><span class="line">? Use history <span class="built_in">mode</span> <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) (Y/n) y</span><br><span class="line"></span><br><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line">&gt; ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">  ESLint + Standard config</span><br><span class="line">  ESLint + Prettier </span><br><span class="line">  </span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Lint on save</span><br><span class="line"> ( ) Lint and fix on commit  </span><br><span class="line"></span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; <span class="keyword">In</span> dedicated config files</span><br><span class="line">  <span class="keyword">In</span> package.json</span><br><span class="line">  </span><br><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? (y/N) n</span><br></pre></td></tr></table></figure></li><li><p>vscode打开该项目,  目录如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   ├── router</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── views</span><br><span class="line">│   │   ├── About.vue</span><br><span class="line">│   │   └── Home.vue</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">├── .browserslistrc</span><br><span class="line">├── .eslintrc.js</span><br><span class="line">├── babel.config.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure></li><li><p>先看一下  <code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的这个代码 和我们之前的代码不一样</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">new Vue(&#123;</span></span><br><span class="line"><span class="comment">router,</span></span><br><span class="line"><span class="comment">store,</span></span><br><span class="line"><span class="comment">  render: h =&gt; h(App)</span></span><br><span class="line"><span class="comment">&#125;).$mount('#app')</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">createApp 这个方法 是从vue中暴露出来的 </span></span><br><span class="line"><span class="comment">这么写很好的避免了实例污染这个问题</span></span><br><span class="line"><span class="comment">use方法 相当于原来的注册插件 而且返回 app实例 实现链式调用</span></span><br><span class="line"><span class="comment">mount方法 将app挂载在哪个上面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">createApp(App).use(store).use(router).mount(<span class="string">"#app"</span>) <span class="comment">// 如果觉得这么不直观  可以用下面的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二选一</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App); <span class="comment">// 创建一个vue app</span></span><br><span class="line">app.use(store); <span class="comment">// 注册使用store</span></span><br><span class="line">app.use(router); <span class="comment">// 注册使用router</span></span><br><span class="line">app.mount(<span class="string">'#app'</span>); <span class="comment">// 挂载在#app上</span></span><br></pre></td></tr></table></figure></li><li><p>然后是  <code>router.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  vue2.x 差不多是下面这么写的</span></span><br><span class="line"><span class="comment">  import VueRouter from 'vue-router';</span></span><br><span class="line"><span class="comment">  const router = new VueRouter(&#123;</span></span><br><span class="line"><span class="comment">  mode: 'history',</span></span><br><span class="line"><span class="comment">  routes</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在的是从vue-router中导出的是两个方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">createRouter 创建路由对象</span></span><br><span class="line"><span class="comment">createWebHistory 创建history对象 也就值之前的 mode: history</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'About'</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'../views/About.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>然后是  <code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">以前的</span></span><br><span class="line"><span class="comment">import Vue from 'vue'</span></span><br><span class="line"><span class="comment">import Vuex from 'vuex'</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Vue.use(Vuex)</span></span><br><span class="line"><span class="comment">export default new Vuex.Store(&#123;</span></span><br><span class="line"><span class="comment">  state: &#123;</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  mutations: &#123;</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  actions: &#123;</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  modules: &#123;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以看出不一样的地方就是 vuex导出的也是一个方法 createStore这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="开始改造-与-踩坑填坑"><a href="#开始改造-与-踩坑填坑" class="headerlink" title="开始改造   与  踩坑填坑"></a>开始改造   与  踩坑填坑</h3><ul><li><p>在  <code>vue3.0</code>  使用  <code>transition</code>  , 在 <code>App.vue</code>  中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;transition :name&#x3D;&quot;transitionName&quot;&gt;</span><br><span class="line">      &lt;router-view class&#x3D;&quot;router-view&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#39;vue&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const transitionName &#x3D; ref(&#39;slide-left&#39;);</span><br><span class="line">    return &#123;</span><br><span class="line">      transitionName</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scope&gt;</span><br><span class="line">.router-view &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: auto;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 100px;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-right-enter-active,</span><br><span class="line">.slide-right-leave-active,</span><br><span class="line">.slide-left-enter-active,</span><br><span class="line">.slide-left-leave-active &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  will-change: transform;</span><br><span class="line">  transition: all 500ms;</span><br><span class="line">  position: absolute;</span><br><span class="line">  backface-visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.slide-right-enter &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.slide-right-leave-active &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.slide-left-enter &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">.slide-left-leave-active &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>然后打开界面 控制台会有这么一行警告:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Vue Router warn]: &lt;router-view&gt; can no longer be used directly inside &lt;transition&gt; or &lt;keep-alive&gt;.</span><br><span class="line">Use slot props instead:</span><br><span class="line"></span><br><span class="line">&lt;router-view v-slot&#x3D;&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">  &lt;transition&gt;</span><br><span class="line">    &lt;component :is&#x3D;&quot;Component&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure><p><code>router-view</code>  这个组件已经不能在 <code>transition</code> 或者  <code>keep-alive</code>  中直接使用了, 请使用插槽形式</p><p>然后 我使用插槽, 代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view class&#x3D;&quot;router-view&quot; v-slot&#x3D;&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">   &lt;transition :name&#x3D;&quot;transitionName&quot;&gt;</span><br><span class="line">      &lt;component :is&#x3D;&quot;Component&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">   &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure><p>警告解决!!!</p></li><li><p><code>vue-router</code> 中路由重定向时遇到的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    redirect: <span class="string">'/home'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Login'</span>),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      index: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home'</span>),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      index: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>有这么一个警告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue Router warn]: No match found <span class="keyword">for</span> location <span class="keyword">with</span> path <span class="string">"/"</span></span><br></pre></td></tr></table></figure><p>我将需要重定向的那个路由的name去掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: <span class="string">'/'</span>,</span><br><span class="line">   redirect: <span class="string">'/home'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>跳转成功</p></li><li><p>在那个  <code>helloWorld.vue</code> 文件中打印我们的props</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  &#x2F;&#x2F;props: &#123;</span><br><span class="line">    &#x2F;&#x2F;msg: String</span><br><span class="line">  &#x2F;&#x2F;&#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    console.log(props)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>如果如上面一样 将  <code>props</code>  注释了 控制无法打印出   <code>props.msg</code> , 而且还有这么一行警告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Property <span class="string">"msg"</span> was accessed during render but is not defined on instance.</span><br></pre></td></tr></table></figure><p>去掉注释就行了!! </p><p>如果我们不是直接的展示父组件传来的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setup(props) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; msg &#125; = props</span><br><span class="line">  <span class="keyword">const</span> msgChild = msg</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    msgChild</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样会有一个报错 <code>Getting a value from the</code>props<code>in root scope of</code>setup()<code>will cause the value to lose reactivity</code> 可能是我用的脚手架创建的会有个报错, 之前在html中 尝试是没有这个报错的.</p><p>报错意思就是你这么结构出来的msg 将会失去响应式</p><p>我们换一种写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Home.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;home&quot;&gt;</span><br><span class="line">    &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld :msg&#x3D;&quot;msg&quot;&#x2F;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;add&quot;&gt;加一&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#39;@&#x2F;components&#x2F;HelloWorld.vue&#39;</span><br><span class="line">import &#123; ref &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Home&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const msg &#x3D; ref(0);</span><br><span class="line">    const add &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      msg.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      add</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F; helloWorld.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg1 &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: Number</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    const msg1 &#x3D; ref(props.msg);</span><br><span class="line">    return &#123;</span><br><span class="line">      msg1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这样导致的是 父组件那边怎么点击 msg1都不会变,  为什么会这样呢, 因为你的props.msg不是一个响应式的, 我们可以这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    <span class="keyword">const</span> msgRef = toRef(props, <span class="string">'msg'</span>)</span><br><span class="line">    <span class="keyword">const</span> msg1 = msgRef;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用  <code>toRef</code>  或者  <code>toRefs</code>  来让其响应式， emmm,尝试一下watch发现也可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> msg1 = ref(props.msg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// watch(props, (newValue) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">// msg1.value = newValue.msg;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听props</span></span><br><span class="line">    watch(props, (newValue) =&gt; &#123;</span><br><span class="line">      msg1.value = newValue.msg;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 监听props.msg 需要使用一个方法的返回值来监听</span></span><br><span class="line">    watch(<span class="function"><span class="params">()</span> =&gt;</span> props.msg, (newValue) =&gt; &#123;</span><br><span class="line">      msg1.value = newValue;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>最开始我监听的是  <code>props.msg</code>  然后会有下面的警告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Invalid watch source:  <span class="number">0</span> A watch source can only be a getter/effect <span class="function"><span class="keyword">function</span>, <span class="title">a</span> <span class="title">ref</span>, <span class="title">a</span> <span class="title">reactive</span> <span class="title">object</span>, <span class="title">or</span> <span class="title">an</span> <span class="title">array</span> <span class="title">of</span> <span class="title">these</span> <span class="title">types</span></span></span><br><span class="line"><span class="function">// 大概意思是 <span class="title">watch</span>的参数 只能是一个有<span class="title">getter</span>/<span class="title">effect</span>的方法, 一个<span class="title">ref</span>, 一个响应式对象, 或者一个数组 </span></span><br><span class="line"><span class="function">// 之前也说过了 <span class="title">props</span>.<span class="title">msg</span>已经失去了响应式 所以会有该警告</span></span><br></pre></td></tr></table></figure></li><li><p>尝试一下模板中的  <code>ref</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg1 &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div ref&#x3D;&quot;tempDiv&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; eslint-disable-next-line no-unused-vars</span><br><span class="line">import &#123; onMounted, ref, watch &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: Number</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    const tempDiv &#x3D; ref(null);</span><br><span class="line">    const msg1 &#x3D; ref(props.msg);</span><br><span class="line">    onMounted(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(tempDiv.value)</span><br><span class="line">      console.log(context)</span><br><span class="line">    &#125;)</span><br><span class="line">    watch(() &#x3D;&gt; props.msg, (newValue) &#x3D;&gt; &#123;</span><br><span class="line">      msg1.value &#x3D; newValue;</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123;</span><br><span class="line">      msg1,</span><br><span class="line">      tempDiv</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>  由于   <code>vue3.0</code>  中没有this 所以我们只能在  <code>setup</code>  里面相应的创建一个和模板中相同名字的  <code>ref</code> 就行了</p></li><li><p>尝试一下   <code>emit</code>  emit  在context(setup的第二个参数) 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg1 &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div ref="tempDiv"&gt;我是ref&lt;/</span>div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleChildClick"</span>&gt;点击向父组件发生信息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="regexp">import &#123; onMounted, ref, watch &#125; from 'vue'</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'HelloWorld',</span></span><br><span class="line"><span class="regexp">  props: &#123;</span></span><br><span class="line"><span class="regexp">    msg: Number</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  setup(props, context) &#123;</span></span><br><span class="line"><span class="regexp">    const tempDiv = ref(null);</span></span><br><span class="line"><span class="regexp">    const msg1 = ref(props.msg);</span></span><br><span class="line"><span class="regexp">    watch(() =&gt; props.msg, (newValue) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      msg1.value = newValue;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    const handleChildClick = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      context.emit('handle-child-click', '子组件被点击') /</span><span class="regexp">/ 我使用的node_modules里面的eslint规则 要求我必须使用短横线这样的格式</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      msg1,</span></span><br><span class="line"><span class="regexp">      tempDiv,</span></span><br><span class="line"><span class="regexp">      handleChildClick</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>emit</code> 的方法 和之前的 <code>this.$emit</code> 方法一样</p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>hook in vue3.0 - 2</title>
    <link href="http://blog.decade.run/2020/09/03/hook-in-vue3-0-2/"/>
    <id>http://blog.decade.run/2020/09/03/hook-in-vue3-0-2/</id>
    <published>2020-09-02T22:16:50.000Z</published>
    <updated>2020-09-19T14:30:47.368Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>路由配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter, &#123; RouteConfig &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> AllBook <span class="keyword">from</span> <span class="string">'@/views/AllBooks.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> FinishedBook <span class="keyword">from</span> <span class="string">'@/views/FinishedBooks.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routeMaps = &#123;</span><br><span class="line">  all: &#123;</span><br><span class="line">    name: <span class="string">'all'</span>,</span><br><span class="line">    path: <span class="string">'/'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  finish: &#123;</span><br><span class="line">    name: <span class="string">'finish'</span>,</span><br><span class="line">    path: <span class="string">'/finish'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: RouteConfig[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    ...routeMaps.all,</span><br><span class="line">    component: AllBook</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    ...routeMaps.finish,</span><br><span class="line">    component: FinishedBook</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li><p><code>App.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;全部图书&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;finish&quot;&gt;已阅图书&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;h2&gt;目前共有&#123;&#123; bookCount &#125;&#125;本图书&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, defineComponent &#125; from &#39;@vue&#x2F;composition-api&#39;;</span><br><span class="line">import &#123; useBookListInject &#125; from &#39;@&#x2F;context&#39;;</span><br><span class="line">import &#123; routeMaps &#125; from &#39;@&#x2F;router&#39;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup(props, &#123; root &#125;) &#123;</span><br><span class="line">    const &#123; booksAvaluable, finishedBooks &#125; &#x3D; useBookListInject();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据路由名确定取值策略</span><br><span class="line">    const routeNameGetCountMap &#x3D; &#123;</span><br><span class="line">      [routeMaps.all.name]: () &#x3D;&gt; booksAvaluable.value.length,</span><br><span class="line">      [routeMaps.finish.name]: () &#x3D;&gt; finishedBooks.value.length</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const bookCount &#x3D; computed(() &#x3D;&gt; &#123;</span><br><span class="line">      return routeNameGetCountMap[root.$route.name!]();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      bookCount</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav &#123;</span><br><span class="line">  padding: 30px;</span><br><span class="line"></span><br><span class="line">  a &#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    color: #2c3e50;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    padding: 12px;</span><br><span class="line"></span><br><span class="line">    &amp;.router-link-exact-active &#123;</span><br><span class="line">      color: #42b983;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>views/AllBooks.vue</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Books :books&#x3D;&quot;booksAvaluable&quot; :loading&#x3D;&quot;loading&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent, reactive, toRefs &#125; from &#39;@vue&#x2F;composition-api&#39;;</span><br><span class="line">import Books from &#39;@&#x2F;components&#x2F;Books.vue&#39;;</span><br><span class="line">import BooksData from &#39;@&#x2F;data&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">import &#123; useAsync &#125; from &#39;@&#x2F;hooks&#39;;</span><br><span class="line">import &#123; getBooks &#125; from &#39;@&#x2F;api&#39;;</span><br><span class="line">import &#123; useBookListInject &#125; from &#39;@&#x2F;context&#39;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#39;books&#39;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const &#123; books, setBooks, booksAvaluable &#125; &#x3D; useBookListInject();</span><br><span class="line">    console.log(booksAvaluable);</span><br><span class="line">    const loading &#x3D; useAsync(async () &#x3D;&gt; &#123;</span><br><span class="line">      const requestBooks &#x3D; await getBooks();</span><br><span class="line">      setBooks(requestBooks);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123; booksAvaluable, loading &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Books</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">  max-width: 700px;</span><br><span class="line">  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>components/Books.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section class&#x3D;&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;span v-if&#x3D;&quot;loading&quot;&gt;正在加载中...&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;section v-else class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">      &lt;Book v-for&#x3D;&quot;book in pagedBooks&quot; :key&#x3D;&quot;book.id&quot; :book&#x3D;&quot;book&quot; &#x2F;&gt;</span><br><span class="line">      &lt;el-pagination</span><br><span class="line">        class&#x3D;&quot;pagination&quot;</span><br><span class="line">        v-if&#x3D;&quot;pagedBooks.length&quot;</span><br><span class="line">        :page-size&#x3D;&quot;pageSize&quot;</span><br><span class="line">        :total&#x3D;&quot;books.length&quot;</span><br><span class="line">        :current&#x3D;&quot;bindings.current&quot;</span><br><span class="line">        @current-change&#x3D;&quot;bindings.currentChange&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;section&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;tips&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;section&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#39;@vue&#x2F;composition-api&#39;;</span><br><span class="line">import &#123; usePages &#125; from &#39;@&#x2F;hooks&#39;;</span><br><span class="line">import &#123; Books &#125; from &#39;@&#x2F;types&#x2F;Book&#39;;</span><br><span class="line">import Book from &#39;.&#x2F;Book.vue&#39;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#39;books&#39;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    const pageSize &#x3D; 10;</span><br><span class="line">    const &#123; bindings, data: pagedBooks &#125; &#x3D; usePages(</span><br><span class="line">      () &#x3D;&gt; props.books as Books,</span><br><span class="line">      &#123; pageSize &#125;</span><br><span class="line">    );</span><br><span class="line">    return &#123;</span><br><span class="line">      bindings,</span><br><span class="line">      pagedBooks,</span><br><span class="line">      pageSize</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    books: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default: () &#x3D;&gt; []</span><br><span class="line">    &#125;,</span><br><span class="line">    loading: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Book</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">  max-width: 700px;</span><br><span class="line">  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pagination &#123;</span><br><span class="line">  margin-top: 12px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>components/Book.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class&#x3D;&quot;book&quot;</span><br><span class="line">    :style&#x3D;&quot;&#123;</span><br><span class="line">      display: &#39;flex&#39;,</span><br><span class="line">      alignItems: &#39;center&#39;,</span><br><span class="line">      justifyContent: &#39;flex-end&#39;,</span><br><span class="line">      position: &#39;relative&#39;</span><br><span class="line">    &#125;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;a</span><br><span class="line">      :style&#x3D;&quot;&#123;</span><br><span class="line">        flexGrow: 2,</span><br><span class="line">        display: &#39;grid&#39;,</span><br><span class="line">        gridTemplateColumns: &#39;140px 1fr&#39;,</span><br><span class="line">        gridGap: 20,</span><br><span class="line">        border: &#96;1px solid $&#123;colors.gray20&#125;&#96;,</span><br><span class="line">        color: colors.text,</span><br><span class="line">        padding: &#39;1.25em&#39;,</span><br><span class="line">        borderRadius: &#39;3px&#39;</span><br><span class="line">      &#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        :style&#x3D;&quot;&#123;</span><br><span class="line">          width: 140</span><br><span class="line">        &#125;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          :src&#x3D;&quot;harryCover&quot;</span><br><span class="line">          :alt&#x3D;&quot;&#96;$&#123;book.title&#125; book cover&#96;&quot;</span><br><span class="line">          :style&#x3D;&quot;&#123; maxHeight: &#39;100%&#39;, maxWidth: &#39;100%&#39; &#125;&quot;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div :style&#x3D;&quot;&#123; flex: 1 &#125;&quot;&gt;</span><br><span class="line">        &lt;div :style&#x3D;&quot;&#123; display: &#39;flex&#39;, justifyContent: &#39;space-between&#39; &#125;&quot;&gt;</span><br><span class="line">          &lt;div :style&#x3D;&quot;&#123; flex: 1 &#125;&quot;&gt;</span><br><span class="line">            &lt;h2</span><br><span class="line">              :style&#x3D;&quot;&#123;</span><br><span class="line">                fontSize: &#39;1.25em&#39;,</span><br><span class="line">                margin: &#39;0&#39;,</span><br><span class="line">                color: colors.indigo</span><br><span class="line">              &#125;&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &#123;&#123; book.title &#125;&#125;</span><br><span class="line">            &lt;&#x2F;h2&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div :style&#x3D;&quot;&#123; marginLeft: 10 &#125;&quot;&gt;</span><br><span class="line">            &lt;div</span><br><span class="line">              :style&#x3D;&quot;&#123;</span><br><span class="line">                marginTop: &#39;0.4em&#39;,</span><br><span class="line">                fontStyle: &#39;italic&#39;,</span><br><span class="line">                fontSize: &#39;0.85em&#39;</span><br><span class="line">              &#125;&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &#123;&#123; book.author &#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;small&gt;&#123;&#123; book.publisher &#125;&#125;&lt;&#x2F;small&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;small&gt;&#123;&#123; book.synopsis.substring(0, 500) &#125;&#125;...&lt;&#x2F;small&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;StatusButtons :book&#x3D;&quot;book&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#39;@vue&#x2F;composition-api&#39;;</span><br><span class="line">&#x2F;&#x2F; @ts-ignore</span><br><span class="line">import harryCover from &#39;@&#x2F;assets&#x2F;harry.png&#39;;</span><br><span class="line">import StatusButtons from &#39;.&#x2F;StatusButtons.vue&#39;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      harryCover</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &#39;book&#39;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    book: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () &#x3D;&gt; (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    StatusButtons</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>components/StatusButtons.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button v-if&#x3D;&quot;hasReaded&quot; @click&#x3D;&quot;removeFinish&quot; class&#x3D;&quot;status-button&quot;&gt;</span><br><span class="line">    删</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button v-else @click&#x3D;&quot;handleFinish&quot; class&#x3D;&quot;status-button&quot;&gt;阅&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#39;@vue&#x2F;composition-api&#39;;</span><br><span class="line">import &#123; useBookListInject &#125; from &#39;@&#x2F;context&#39;;</span><br><span class="line">import &#123; Book &#125; from &#39;@&#x2F;types&#x2F;Book&#39;;</span><br><span class="line"></span><br><span class="line">interface Props &#123;</span><br><span class="line">  book: Book;</span><br><span class="line">&#125;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    book: Object</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props: Props) &#123;</span><br><span class="line">    const &#123; book &#125; &#x3D; props;</span><br><span class="line">    const &#123;</span><br><span class="line">      addFinishedBooks,</span><br><span class="line">      removeFinishedBooks,</span><br><span class="line">      hasReadedBook</span><br><span class="line">    &#125; &#x3D; useBookListInject();</span><br><span class="line"></span><br><span class="line">    const handleFinish &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      addFinishedBooks(book);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const removeFinish &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      removeFinishedBooks(book);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      handleFinish,</span><br><span class="line">      removeFinish,</span><br><span class="line">      hasReaded: hasReadedBook(book)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.status-button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 50%;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  width: 30px;</span><br><span class="line">  height: 30px;</span><br><span class="line">  transform: translate(50%, -50%);</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  border: 1px solid rgb(228, 229, 233);</span><br><span class="line">  background: #fff;</span><br><span class="line">  color: rgb(67, 68, 73);</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      大清早的不要命
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>hook in vue3.0</title>
    <link href="http://blog.decade.run/2020/09/02/hook-in-vue3-0-1/"/>
    <id>http://blog.decade.run/2020/09/02/hook-in-vue3-0-1/</id>
    <published>2020-09-01T21:01:18.000Z</published>
    <updated>2020-09-19T14:18:44.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何在vue3-0版本中优雅的使用react-context"><a href="#如何在vue3-0版本中优雅的使用react-context" class="headerlink" title="如何在vue3.0版本中优雅的使用react  context"></a>如何在vue3.0版本中优雅的使用react  context</h2><ul><li><p>目录结构: </p><p>vue-hook-ts<br>├── public<br>│   ├── favicon.ico<br>│   └── index.html<br>├── src<br>│   ├── api<br>│   │   └── index.ts<br>│   ├── assets<br>│   │   ├── styles<br>│   │   └── harry.png<br>│   ├── components<br>│   │   ├── Book.vue<br>│   │   ├── Books.vue<br>│   │   └── StatusButtons.vue<br>│   ├── context<br>│   │   ├── BookContext.ts<br>│   │   └── index.ts<br>│   ├── data<br>│   │   └── index.ts<br>│   ├── hooks<br>│   │   ├── index.ts<br>│   │   ├── use-async.ts<br>│   │   └── use-pages.ts<br>│   ├── router<br>│   │   └── index.ts<br>│   ├── types<br>│   │   └── Book.ts<br>│   ├── views<br>│   │   ├── AllBooks.vue<br>│   │   └── FinishedBooks.vue<br>│   ├── App.vue<br>│   ├── main.ts<br>│   ├── shims-tsx.d.ts<br>│   └── shims-vue.d.ts<br>├── .browserslistrc<br>├── babel.config.js<br>├── package.json<br>├── tsconfig.json<br>└── tslint.json</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="built_in">tree</span>-node-cli -g</span><br><span class="line"></span><br><span class="line">treee -L <span class="number">4</span> -I "node_modules|.git" -a --dirs-first</span><br></pre></td></tr></table></figure></li><li><p>假数据准备  在<code>data/index.ts</code>里面 是我存放的假数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'javascript从入门到入土'</span>,</span><br><span class="line">    author: <span class="string">'xxx'</span>,</span><br><span class="line">    id: <span class="string">'00000001'</span>,</span><br><span class="line">    pageCount: <span class="number">1178</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ..... 一条复制很多条即可啦 记得改下编号和名称</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>调用的api接口 在<code>api/index.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> books <span class="keyword">from</span> <span class="string">'@/data/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allBooks = books; <span class="comment">// typescript 会自动进行类型推断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wait = <span class="function">(<span class="params">ms: <span class="built_in">number</span></span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getBooks = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> wait(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> allBooks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义需要用到的type <code>types/book.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> books <span class="keyword">from</span> <span class="string">'@/data/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Book = <span class="keyword">typeof</span> books[<span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Books = Book[];</span><br></pre></td></tr></table></figure></li><li><p>vue中的react context  <code>context/BookContext.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject, computed, ref, Ref &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-Api'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Book, Books &#125; <span class="keyword">from</span> <span class="string">'@/types/Book'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> BookContext &#123;</span><br><span class="line">  books: Ref&lt;Books&gt;;</span><br><span class="line">  setBooks: <span class="function">(<span class="params">value: Books</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  finishedBooks: Ref&lt;Books&gt;;</span><br><span class="line">  addFinishedBooks: <span class="function">(<span class="params">book: Book</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  removeFinishedBoos: <span class="function">(<span class="params">book: Book</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  hasReadedBook: <span class="function">(<span class="params">book: Book</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">  booksAvaluable: Ref&lt;Books&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BookSymbol = Symbol();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useBookListProvide = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> books = ref&lt;Books&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> setBooks = <span class="function">(<span class="params">value: Books</span>) =&gt;</span> (books.value = value);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> finishedBooks = ref&lt;Books&gt;([]);</span><br><span class="line">  <span class="comment">// 添加完成阅读的书</span></span><br><span class="line">  <span class="keyword">const</span> addFinishedBooks = <span class="function">(<span class="params">book: Book</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (finishedBooks.value.find(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> id === book.id)) &#123;</span><br><span class="line">      finishedBooks.value.push(book)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将阅读完的数 重置为没有读</span></span><br><span class="line">  <span class="keyword">const</span> removeFinishedBooks = <span class="function">(<span class="params">book: Book</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> removeIndex = finishedBooks.value.findIndex(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> id === book.id</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (removeIndex !== <span class="number">-1</span>) &#123;</span><br><span class="line">      finishedBooks.value.splice(removeIndex, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 计算属性 未读书</span></span><br><span class="line">  <span class="keyword">const</span> bookAvaluable = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> books.value.filter(<span class="function">(<span class="params">book</span>) =&gt;</span> &#123;</span><br><span class="line">      !fininshedBooks.value.find(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        id === book.id</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> hasReadedBook  = <span class="function">(<span class="params">book: Book</span>) =&gt;</span> finishedBooks.value.includes(book);</span><br><span class="line">  </span><br><span class="line">  provide(BookSymbol, &#123;</span><br><span class="line">    books,</span><br><span class="line">    setBooks,</span><br><span class="line">    finishedBooks,</span><br><span class="line">    removeFinishedBooks,</span><br><span class="line">    hasReadedBook,</span><br><span class="line">    booksAvaluable</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useBookListInject = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> booksContext = inject&lt;BookContext&gt;(BookSymbol);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!booksContext) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`useBookListInjext must be used after useBookListProvide`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> booksContext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>context/index.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useBookListProvide, useBookListInject &#125; <span class="keyword">from</span> <span class="string">'./BookContext'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; useBookListInject &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useProvider = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  useBookListProvide();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>配合element 分页和加载 <code>hooks/use-async.ts</code> <code>hooks/sue-pages.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-Api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAsync = <span class="function">(<span class="params">func: (<span class="params"></span>) =&gt; <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> loading = ref(<span class="literal">false</span>);</span><br><span class="line">  </span><br><span class="line">  onMounted(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      loading.value = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">await</span> func();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">throw</span> error</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      loading.value = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> loading;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pages.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; watch, ref, reactive &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-Api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> PageOption &#123;</span><br><span class="line">  pageSize?: <span class="built_in">number</span>;</span><br><span class="line">pageIndex?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> usePages&lt;T&gt; = <span class="function">(<span class="params">watchCallBack: (<span class="params"></span>) =&gt; T[], pageOption?: PageOption</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pageSize = <span class="number">10</span> &#125; = pageOpption || &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> rawData = ref&lt;T[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> data = ref&lt;T[]&gt;([]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> bindings = reactive(&#123;</span><br><span class="line">    current: <span class="number">1</span>,</span><br><span class="line">    currentChange: <span class="function">(<span class="params">currentPage: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">      data.value = sliceData(rawData.value, currentPage);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> sliceData = <span class="function">(<span class="params">rawData: T[], currentPage: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rawData.slice((currentPage - <span class="number">1</span>) * pageSize, currentPage * pageSize);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  watch(watchCallback, <span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    rawData.value = values;</span><br><span class="line">    bindings.currentChange(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data,</span><br><span class="line">    bindings</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>hook/index.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useAsync &#125; <span class="keyword">from</span> <span class="string">'./use-async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; usePages &#125; <span class="keyword">from</span> <span class="string">'./use-pages'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; useAsync, usePages &#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      大清早的不要命
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>lodash6</title>
    <link href="http://blog.decade.run/2020/09/01/lodash6/"/>
    <id>http://blog.decade.run/2020/09/01/lodash6/</id>
    <published>2020-08-31T21:45:46.000Z</published>
    <updated>2020-09-22T01:06:00.530Z</updated>
    
    <content type="html"><![CDATA[<p>今日任务</p><ul><li><input checked disabled type="checkbox"> pull</li><li><input checked disabled type="checkbox"> pullAll</li><li><input checked disabled type="checkbox"> pullAllBy</li><li><input checked disabled type="checkbox"> pullAllWith</li><li><input checked disabled type="checkbox"> pullAt</li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li><p>pull(array, [values])  移除数组<code>array</code>中所有和给定值相等的元素 会改变原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">pull(arr, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 1]</span></span><br></pre></td></tr></table></figure></li><li><p>pullAll(array, values) 这个方法接收一个要移除值的数组, 移除数组<code>array</code>中所有和给定数组values中相等的元素 会改变原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">pullAll(arr, [<span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// [1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 1]</span></span><br></pre></td></tr></table></figure></li><li><p>pullAllBy(array, values, iteratee)  这个方法接受一个 <code>iteratee</code>（迭代函数） 调用 <code>array</code> 和 <code>values</code>的每个值以产生一个值，通过产生的值进行了比较 也会改变原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">1</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> values = [</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">3</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pullAllBy(arr, values, &#123; x &#125; =&gt; x === <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>pullAllWith(array, values, [comparator])  这个方法接受 <code>comparator</code> 调用<code>array</code>中的元素和<code>values</code>比较。comparator 会传入两个参数：<em>(arrVal, othVal)</em>。 也会改变原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">3</span>, <span class="string">'y'</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">5</span>, <span class="string">'y'</span>: <span class="number">6</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> values = [</span><br><span class="line">  &#123; <span class="string">'x'</span>: <span class="number">3</span>, <span class="string">'y'</span>: <span class="number">4</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pullAllWith(arr, values, (arrVal, othVal) =&gt; &#123; <span class="keyword">return</span> arrVal.x &gt;= othVal.x &#125;)</span><br></pre></td></tr></table></figure></li><li><p>pullAt(array, [indexes]) 移除<code>array</code>中对应的元素，并返回被移除元素的数组。 这个方法也会改变原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexes = [<span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">pullAt(arr, indexes); <span class="comment">//[10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[5, 15]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li><p>复制数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyArray</span>(<span class="params">source, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">const</span> lenght = source.length;</span><br><span class="line">  </span><br><span class="line">  array || (array = <span class="keyword">new</span> <span class="built_in">Array</span>(length));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(++index &lt; length) &#123;</span><br><span class="line">    array[index] = source[index]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匹配属性的正则 (咳咳, 我也不怎么会 我开始慢慢分析)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reIsDeepProp = <span class="regexp">/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\表示转译 </span></span><br><span class="line"><span class="comment">| 表示或者 </span></span><br><span class="line"><span class="comment">(pattern) 匹配pattern并获取这一匹配</span></span><br><span class="line"><span class="comment">(?:pattern) 表示非获取匹配  大概就是 后面这个意思 industr(?:y|ies) industry|industries</span></span><br><span class="line"><span class="comment">[] 字符集合</span></span><br><span class="line"><span class="comment">* 表示匹配前面字符任意次数</span></span><br><span class="line"><span class="comment">^ 匹配以什么开头</span></span><br><span class="line"><span class="comment">? 匹配前面的子表达式 一次或多次 zo+ =&gt; zo zoo 但是z不行</span></span><br><span class="line"><span class="comment">? 后面紧跟 * + ? &#123;n&#125; &#123;n, &#125; &#123;n, m&#125; 非贪婪匹配</span></span><br><span class="line"><span class="comment">. 除\n \r 以外的任何单个字符</span></span><br><span class="line"><span class="comment">(?!pattern) 非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">开始分解</span></span><br><span class="line"><span class="comment">1. /\.|\[ \]/  不看中间的 (?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1) 这里匹配的是</span></span><br><span class="line"><span class="comment">. 或者 [] 这样的</span></span><br><span class="line"><span class="comment">2. 再来拆分 [^[\]]* =&gt; [name][value] 匹配这样的多次</span></span><br><span class="line"><span class="comment">3. (["']) =&gt; 匹配单引号 双引号</span></span><br><span class="line"><span class="comment">4. (?!\1) 我不知道嘞... 改天 研究 正则</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">待完成....</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>basePullAll源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">basePullAll</span>(<span class="params">array, values, iteratee, comparator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> indexOf = comparator ? baseIndexOfWith : baseIndexOf</span><br><span class="line">  <span class="keyword">const</span> length = values.length <span class="comment">// 需要比较的数组的长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">let</span> seen = array <span class="comment">// 复制一份引用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (array === values) &#123;</span><br><span class="line">    values = copyArray(values)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (iteratee) &#123; <span class="comment">// 有迭代函数 就调用一下</span></span><br><span class="line">    seen = map(array, (value) =&gt; iteratee(value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    <span class="keyword">let</span> fromIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> value = values[index] <span class="comment">// 开始遍历比较的数组</span></span><br><span class="line">    <span class="keyword">const</span> computed = iteratee ? iteratee(value) : value <span class="comment">// 有迭代函数就调用一下</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里indexOf 返回的在array中找到了比较数组的value的下标 然后把这个下标赋值个fromIndex 没有找到返回-1</span></span><br><span class="line">      <span class="keyword">if</span> (seen !== array) &#123;</span><br><span class="line">        seen.splice(fromIndex, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      array.splice(fromIndex, <span class="number">1</span>)<span class="comment">// 找到了就把截去下标对应的那个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      开始啃loadsh
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="loadsh" scheme="http://blog.decade.run/tags/loadsh/"/>
    
  </entry>
  
  <entry>
    <title>每日一读loadsh 源码</title>
    <link href="http://blog.decade.run/2020/08/31/lodash5/"/>
    <id>http://blog.decade.run/2020/08/31/lodash5/</id>
    <published>2020-08-31T06:06:34.000Z</published>
    <updated>2020-08-31T13:00:08.523Z</updated>
    
    <content type="html"><![CDATA[<p>今日任务</p><ul><li><input checked disabled type="checkbox"> fromEntries</li><li><input checked disabled type="checkbox"> initial</li><li><input checked disabled type="checkbox"> intersection</li><li><input checked disabled type="checkbox"> intersectionBy</li><li><input checked disabled type="checkbox"> intersectionWith</li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li><p>fromEntries(pairs)  返回一个由pairs组成的键值对 <code>对象</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pairs = [</span><br><span class="line">  [<span class="string">"a"</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">"b"</span>, <span class="number">2</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">_.formEntries(pairs); <span class="comment">// &#123;'a': 1, 'b': 2&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>initial(arr) 返回数组中除了最后一个元素的前面所有元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr  = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">_initail(arr); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p>intersection([arrays]) 返回给定数组的交集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrs = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">_.intersection(...arrs); <span class="comment">// [2]</span></span><br></pre></td></tr></table></figure></li><li><p>intersectionBy([arrays], [iteratee=_.identity]) 接受一个 <code>iteratee</code> 调用每一个<code>arrays</code>的每个值以产生一个值，通过产生的值进行了比较。结果值是从第一数组中选择 (value)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_.intersectionBy([<span class="number">2.1</span>, <span class="number">1.2</span>], [<span class="number">4.3</span>, <span class="number">2.4</span>], <span class="built_in">Math</span>.floor); </span><br><span class="line"></span><br><span class="line"><span class="comment">// [2. 1]</span></span><br></pre></td></tr></table></figure></li><li><p>intersectionWith([arrs], [comparator]) 接受一个 <code>comparator</code> 调用比较<code>arrays</code>中的元素。结果值是从第一数组中选择。comparator 会传入两个参数：<em>(arrVal, othVal)</em>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objects = [&#123; <span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span> &#125;, &#123; <span class="string">'x'</span>: <span class="number">2</span>, <span class="string">'y'</span>: <span class="number">1</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> others = [&#123; <span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">1</span> &#125;, &#123; <span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comparator</span>(<span class="params">arrVal, othVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arrVal.x === othVal.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_.intersectionWith(objects, others, comparator); <span class="comment">// [&#123; 'x': 1, 'y': 2&#125;]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li><p>将数组转换成对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">entriesArrToObject</span>(<span class="params">arrs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (arrs == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> arr <span class="keyword">in</span> arrs) &#123;</span><br><span class="line">    result[arr[<span class="number">0</span>]] = arr[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写一个map方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">const</span> length = arr == <span class="literal">null</span> ? <span class="number">0</span> : arr.length;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(length);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    result[index] = iteratee(arr[index], index, arr);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>intersection</code>  <code>intersectionBy</code>  <code>intersectionWith</code>  三个方法只是在调用 <code>baseIntersection</code>  传的参数不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// intersection</span></span><br><span class="line">baseIntersection(mapped)</span><br><span class="line"></span><br><span class="line"><span class="comment">// intersectionBy</span></span><br><span class="line">baseIntersection(mapped, iteratee)</span><br><span class="line"></span><br><span class="line"><span class="comment">// intersectionWith</span></span><br><span class="line">baseIntersection(mapped, <span class="literal">undefined</span>, comparator)</span><br></pre></td></tr></table></figure></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>baseIntersection源码解读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseIntersection</span>(<span class="params">arrays, iteratee, comparator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> includes = comparator ? arrayIncludesWith : arrayIncludes <span class="comment">// 判断是否包含元素时 用到的方法</span></span><br><span class="line">  <span class="keyword">const</span> length = arrays[<span class="number">0</span>].length <span class="comment">// 这个length是 用来遍历我们传入的第一个数组的 每一项</span></span><br><span class="line">  <span class="keyword">const</span> othLength = arrays.length <span class="comment">// 这个是用来循环 你传入的每一个数组的 </span></span><br><span class="line">  <span class="keyword">const</span> caches = <span class="keyword">new</span> <span class="built_in">Array</span>(othLength) <span class="comment">// 要生成相应长度的缓存</span></span><br><span class="line">  <span class="keyword">const</span> result = [] <span class="comment">// 结果是一个数组</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> array </span><br><span class="line">  <span class="keyword">let</span> maxLength = <span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">let</span> othIndex = othLength </span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (othIndex--) &#123; <span class="comment">// while循环</span></span><br><span class="line">    array = arrays[othIndex] <span class="comment">// 拿到下标为othIndex那一个数组</span></span><br><span class="line">    <span class="keyword">if</span> (othIndex &amp;&amp; iteratee) &#123; <span class="comment">// 这里的othIndex 为0 时 我们就不用执行</span></span><br><span class="line">      array = map(array, (value) =&gt; iteratee(value))</span><br><span class="line">    &#125;</span><br><span class="line">    maxLength = <span class="built_in">Math</span>.min(array.length, maxLength) <span class="comment">//去最小的长度</span></span><br><span class="line">    caches[othIndex] = !comparator &amp;&amp; (iteratee || (length &gt;= <span class="number">120</span> &amp;&amp; array.length &gt;= <span class="number">120</span>))</span><br><span class="line">      ? <span class="keyword">new</span> SetCache(othIndex &amp;&amp; array) <span class="comment">// othIndex &amp;&amp; array这里控制 添加缓存的值</span></span><br><span class="line">      : <span class="literal">undefined</span> </span><br><span class="line">  &#125;</span><br><span class="line">  array = arrays[<span class="number">0</span>] <span class="comment">// 拿到第一项</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">const</span> seen = caches[<span class="number">0</span>] <span class="comment">// 拿到键值为0的缓存 键值为0 的cache 的 结构如下</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  SetCache &#123;__data__: MapCache&#125;</span></span><br><span class="line"><span class="comment">  __data__: MapCachesize: 0</span></span><br><span class="line"><span class="comment">  __data__: hash: Hashsize: 0</span></span><br><span class="line"><span class="comment">  __data__: &#123;&#125;</span></span><br><span class="line"><span class="comment">  __proto__: Objectmap: Map(0) &#123;&#125;</span></span><br><span class="line"><span class="comment">  string: Hash &#123;__data__: &#123;…&#125;, size: 0&#125;</span></span><br><span class="line"><span class="comment">  __proto__: Object__proto__: </span></span><br><span class="line"><span class="comment">  Object__proto__: Object</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  outer:</span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length &amp;&amp; result.length &lt; maxLength) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = array[index] <span class="comment">// 这里开始循环 我们传入的第一个数组的 下标为index的那个元素</span></span><br><span class="line">    <span class="keyword">const</span> computed = iteratee ? iteratee(value) : value <span class="comment">// 调用iteratee方法</span></span><br><span class="line"></span><br><span class="line">    value = (comparator || value !== <span class="number">0</span>) ? value : <span class="number">0</span> <span class="comment">// comparator存在或者 value 不等于 0</span></span><br><span class="line">    <span class="keyword">if</span> (!(seen</span><br><span class="line">      ? cacheHas(seen, computed)</span><br><span class="line">      : includes(result, computed, comparator)</span><br><span class="line">    )) &#123; <span class="comment">// 如果seen 存在 则调用cacheHas方法 cacheHas 方法 传入一个cache 和一个键值  由上面的结构可以知道 cacheHas方法 返回值为false</span></span><br><span class="line">      othIndex = othLength <span class="comment">// 其实这里的长度也就是cache的长度</span></span><br><span class="line">      <span class="keyword">while</span> (--othIndex) &#123; <span class="comment">// 倒着拿</span></span><br><span class="line">        <span class="keyword">const</span> cache = caches[othIndex] </span><br><span class="line">        <span class="keyword">if</span> (!(cache</span><br><span class="line">          ? cacheHas(cache, computed) <span class="comment">// cache 不为undefined 说明是caches[1]到caches[caches.length - 1] </span></span><br><span class="line">          : includes(arrays[othIndex], computed, comparator)) <span class="comment">// 当为caches[0]时 调用 includes方法</span></span><br><span class="line">        ) <span class="comment">//  这里开始拿第一个数组里面的 与后面的数组开始比较  </span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">continue</span> outer <span class="comment">// 如果if里面为true 将不会执行 下面的if(seen) push操作</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (seen) &#123;</span><br><span class="line">        seen.push(computed) <span class="comment">//为caches[0] 添加一个键值为2的map</span></span><br><span class="line">      &#125;</span><br><span class="line">      result.push(value) <span class="comment">// 将value放进结果数组</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      开始啃loadsh
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="loadsh" scheme="http://blog.decade.run/tags/loadsh/"/>
    
  </entry>
  
  <entry>
    <title>vue3.0 compositionApi</title>
    <link href="http://blog.decade.run/2020/08/29/vue3-0-compositionApi/"/>
    <id>http://blog.decade.run/2020/08/29/vue3-0-compositionApi/</id>
    <published>2020-08-29T01:23:39.000Z</published>
    <updated>2020-08-29T08:08:40.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-compositionApi"><a href="#vue-compositionApi" class="headerlink" title="vue-compositionApi"></a>vue-compositionApi</h2><h3 id="响应式系统API-待补充相应例子"><a href="#响应式系统API-待补充相应例子" class="headerlink" title="响应式系统API 待补充相应例子"></a>响应式系统API 待补充相应例子</h3><ol><li><p>setup</p><p><strong>模板中使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; count &#125;&#125;</span><br><span class="line">        &#123;&#123; state.name &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;@vue&#x2F;composition-Api&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const count &#x3D; ref(0);</span><br><span class="line">        const state &#x3D; reactive(&#123;</span><br><span class="line">            name: &quot;Decade&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">    count,</span><br><span class="line">    state</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模板中使用 是不用加.value的</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>渲染函数/JSX中使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, ref, reactive &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   setup() &#123;</span><br><span class="line">       <span class="keyword">const</span> count = ref(<span class="number">2009</span>);</span><br><span class="line">         <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">               name: <span class="string">"W"</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> h(<span class="string">"div"</span>, [count.value, state.name]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watchEffect &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">       props: &#123;</span><br><span class="line">           name: <span class="built_in">String</span>,</span><br><span class="line">       &#125;</span><br><span class="line">       setup(props, context) &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(props.value);</span><br><span class="line">           <span class="built_in">console</span>.log(context); <span class="comment">// 这个是上下问对象</span></span><br><span class="line">           <span class="comment">// context =&gt; &#123; attrs, slots, .... &#125;</span></span><br><span class="line">           watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">`name is `</span> + props.name)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>类型定义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Data &#123;</span><br><span class="line">       [key: <span class="built_in">string</span>]: unkonwn</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">interface</span> SetupContext &#123;</span><br><span class="line">       attrs: Data</span><br><span class="line">       slots: Slots</span><br><span class="line">       emit: <span class="function">(<span class="params">event: <span class="built_in">string</span>, ...args: unknown[]</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">props: Data, context: SetupContext</span>): <span class="title">Data</span></span></span><br></pre></td></tr></table></figure></li><li><p>reactive</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-Api'</span>;</span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    name: <span class="string">"Decade"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 接收一个普通的对象 返回该对象的响应式代理</span></span><br></pre></td></tr></table></figure></li><li><p>ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 接收一个参数, 返回一个响应式可改变的ref对象, ref对象拥有一个指向内部值单一属性 .value  一般传入的都是简单类型的</span></span><br><span class="line"><span class="built_in">console</span>.log(count.value);</span><br><span class="line">count.value++;</span><br><span class="line"><span class="built_in">console</span>.log(count.value);</span><br></pre></td></tr></table></figure><p><strong>类型定义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Ref&lt;T&gt; &#123;</span><br><span class="line">    value: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">Ref</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">foo</span> = <span class="title">ref</span>&lt;<span class="title">string</span> | <span class="title">number</span>&gt;(<span class="params">"foo"</span>)</span>;</span><br><span class="line"></span><br><span class="line">foo.value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li><li><p>computed</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> double = computed(<span class="function"><span class="params">()</span> =&gt;</span> count.value += <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(double.value) <span class="comment">// 3</span></span><br><span class="line">double.value++; <span class="comment">// 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="keyword">get</span>: () =&gt; count.value + 1,</span><br><span class="line">    <span class="keyword">set</span>: (value) =&gt; &#123;</span><br><span class="line">        count.value = value - <span class="number">1</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> plusOne = computed(options);</span><br><span class="line">plusOne.value = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>类型定义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>&lt;<span class="title">T</span>&gt;(<span class="params">getter: () =&gt; T</span>): <span class="title">Readonly</span>&lt;<span class="title">Ref</span>&lt;<span class="title">Readonly</span>&gt;&gt;&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 可更改</span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>&lt;<span class="title">T</span>&gt;(<span class="params">option: &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">    <span class="keyword">get</span>: () =&gt; T</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">    <span class="keyword">set</span>: (value: T) =&gt; <span class="built_in">void</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">&#125;</span>): <span class="title">Ref</span>&lt;<span class="title">T</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>readonly</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly, watchEffect &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> origin = reactive(&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readOnlyOrigin = readonly(origin);</span><br><span class="line">watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(readOnlyOrigin.count);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">origin.count++ <span class="comment">// 会触发watchEffect</span></span><br><span class="line"></span><br><span class="line">readOnlyOrigin.count++ <span class="comment">// readOnlyOrigin只读 报警告</span></span><br></pre></td></tr></table></figure></li><li><p>watchEffect</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watchEffect, ref &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(count.value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count.value++</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 watchEffect 在组件的 setup() 函数或生命周期钩子被调用时， 侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止</span></span><br><span class="line"><span class="comment">// 一些情况下 可以显示调用返回值 以停止监听</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stop = watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有些时候 需要清除副作用 有点像react 的useEffect hook</span></span><br><span class="line"><span class="comment">// 我们只需要接收一个onInvalidate 用来注册清理副作用的失效回调</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">下面是失效回调的触发情况:</span></span><br><span class="line"><span class="comment">1. 副作用即将重新执行时</span></span><br><span class="line"><span class="comment">2. 侦听器被停止 (如果在 setup() 或 生命周期钩子函数中使用了 watchEffect, 则在卸载组件时)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 官网例子</span></span><br><span class="line">watchEffect(<span class="function">(<span class="params">onInvalidate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = performAsyncOperation(id.value)</span><br><span class="line">  onInvalidate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// id 改变时 或 停止侦听时</span></span><br><span class="line">    <span class="comment">// 取消之前的异步操作</span></span><br><span class="line">    token.cancel()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之所以传入一个函数去注册失效回调, 而不是从回调返回它, 是因为返回值对于异步错误处理很重要</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = ref(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">watchEffect(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    data.value = <span class="keyword">await</span> fetchData(props.id);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><strong>副作用刷新时机</strong></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123; count &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, watchEffect &#125; from &quot;@vue&#x2F;composition-Api&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const count &#x3D; ref(0);</span><br><span class="line">       watchEffect(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(count.value);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        return &#123;</span><br><span class="line">            count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>count 会在初始运行时同步打印更改count时,</p><p>将在组件更新后执行副作用</p><p>如果你想在副作用函数内访问DOM/模板ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, watchEffect &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line">   setup() &#123;</span><br><span class="line">       onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="comment">// 访问DOM / ref</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如果副作用需要同步或在组件更新之前重新运行，我们可以传递一个拥有 <code>flush</code> 属性的对象作为选项（默认为 <code>&#39;post&#39;</code>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步</span></span><br><span class="line">   watchEffect(</span><br><span class="line">   () =&gt; &#123;</span><br><span class="line">           <span class="comment">// do</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           flush: <span class="string">'sync'</span></span><br><span class="line">       &#125;</span><br><span class="line">   )</span><br><span class="line">   <span class="comment">// 组件更新前执行</span></span><br><span class="line">   watchEffect(</span><br><span class="line">   () =&gt; &#123;</span><br><span class="line">           <span class="comment">// do</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">           flush: <span class="string">'pre'</span></span><br><span class="line">       &#125;</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><p>侦听器调试</p><p><code>onTrack</code> 和 <code>onTrigger</code> 选项可用于调试一个侦听器的行为。</p><ul><li>当一个 reactive 对象属性或一个 ref 作为依赖被追踪时，将调用 <code>onTrack</code></li></ul></li></ol><ul><li><p>依赖项变更导致副作用被触发时，将调用 <code>onTrigger</code></p><p> 这两个回调都将接收到一个包含有关所依赖项信息的调试器事件。建议在以下回调中编写 <code>debugger</code> 语句来检查依赖关系：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watchEffect(</span><br><span class="line">     () =&gt; &#123;</span><br><span class="line">       <span class="comment">/* 副作用的内容 */</span></span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       onTrigger(e) &#123;</span><br><span class="line">         <span class="keyword">debugger</span></span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;</span><br><span class="line">   )</span><br><span class="line">   <span class="comment">//onTrack 和 onTrigger 仅在开发模式下生效。</span></span><br></pre></td></tr></table></figure><p> <strong>类型定义</strong></p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> WatchEffectOptions &#123;</span><br><span class="line">       flush?: <span class="string">'pre'</span> | <span class="string">'post'</span> | <span class="string">'sync'</span></span><br><span class="line">       onTrack?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">       onTrigger?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">interface</span> DebuggerEvent &#123;</span><br><span class="line">       effect: ReactiveEffect</span><br><span class="line">       target: <span class="built_in">any</span></span><br><span class="line">       <span class="keyword">type</span>: OperationTypes</span><br><span class="line">       key: <span class="built_in">string</span> | symbol | <span class="literal">undefined</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">watchEffect</span>(<span class="params">effect: (onInvalidate: InvalidateCbRegistrator) =&gt; <span class="built_in">void</span>, options?: WatchEffectOptions</span>): <span class="title">StopHandle</span></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   <span class="title">type</span> <span class="title">InvalidateCbRegistrator</span> = (<span class="params">invalidate: () =&gt; <span class="built_in">void</span></span>) =&gt; <span class="title">void</span></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">   <span class="title">type</span> <span class="title">StopHandle</span> = (<span class="params"></span>) =&gt; <span class="title">void</span></span></span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li><p>watch</p><p>需要侦听特定的数据源, 并在回调中执行副作用. 默认懒执行</p><ul><li><p>对于watchEffect watch允许我们:</p><ul><li>懒执行副作用</li><li>更明确哪些状态的改变会触发侦听器重新运行副作用</li><li>访问侦听状态变化前后的值 </li></ul></li><li><p>侦听单个数据源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">() =&gt; state.count.</span><br><span class="line">  (count, preCount) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">watch(count, (count, preCount) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>侦听多个数据源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = ref(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">const</span> bar = ref(<span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line">watch([foo, bar], ([foo, bar], [preFoo, preBar]) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>与 <code>watchEffect</code> 共享的行为</p><p>watch 和 watchEffect 在停止监听, 清除副作用(相应地 <code>onInvalidate</code> 会作为      回调的第三个参数传入), 副作用刷新时间和侦听器调试方面一致 </p></li></ul><p><strong>类型定义</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 侦听单数据源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>&lt;<span class="title">T</span>&gt; (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">source: WatcherSource&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (</span></span></span><br><span class="line"><span class="function"><span class="params">  value: T,</span></span></span><br><span class="line"><span class="function"><span class="params">   oldValue: T,</span></span></span><br><span class="line"><span class="function"><span class="params">    onInvalidate: InvalidateCbRegistrator</span></span></span><br><span class="line"><span class="function"><span class="params">  ) =&gt; <span class="built_in">void</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: WatchOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">StopHandle</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 侦听多数据源</span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">WatcherSource</span>&lt;<span class="title">unknown</span>&gt;[]&gt;(<span class="params"></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">source: T,</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">  callback: (</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">    valuse: MapSources&lt;T&gt;,</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">  oldValues: MapSources&lt;T&gt;,</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">    onInvalidate: InvalidateCbRegistrator</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">    ) =&gt; <span class="built_in">void</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params">    options?: WatcherOptions</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="params"></span>): <span class="title">StopHandle</span></span></span></span><br><span class="line"><span class="function"><span class="function"></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">type</span> <span class="title">WatcherSource</span>&lt;<span class="title">T</span>&gt; = <span class="title">Ref</span>&lt;<span class="title">T</span>&gt; | (<span class="params">() =&gt; T</span>)</span></span></span><br><span class="line"><span class="function"><span class="function"></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">type</span> <span class="title">MapSources</span>&lt;<span class="title">T</span>&gt; = </span>&#123;</span></span><br><span class="line"><span class="function">  [<span class="title">K</span> <span class="title">in</span> <span class="title">keyof</span> <span class="title">T</span>]: <span class="title">T</span>[<span class="title">K</span>] <span class="title">extends</span> <span class="title">WatcherSource</span>&lt;<span class="title">infer</span> <span class="title">V</span>&gt; ? <span class="title">V</span> : <span class="title">never</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">interface</span> <span class="title">WatchOptions</span> <span class="title">extends</span> <span class="title">WatchEffectOptions</span> </span>&#123;</span><br><span class="line">  immediate?: <span class="built_in">boolean</span></span><br><span class="line">  deep?: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><ul><li><p>直接导入onXXX 来注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUpdated, onUnmounted &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup &#123;</span><br><span class="line">  onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"mounted"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"updated"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"unmounted"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这些声明周期方法只能在 setup() 期间同步使用， 因为它们依赖于内部的全局状态来定位当前组件实例（正在调用 setup() 的组件实例）, 不在当前组件下调用这些函数会抛出一个错误。</span></span><br><span class="line"><span class="comment">组件实例上下文也是在生命周期钩子同步执行期间设置的，因此，在卸载组件时，在生命周期钩子内部同步创建的侦听器和计算状态也将自动删除。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>与2.x 版本生命周期相应的组合式API</p><ul><li><del>beforeCreate</del>  &rarr;  setup</li><li><del>created</del>   &rarr; setup</li><li>beforeMount  &rarr;  onBeforeMount</li><li>mouted  &rarr;  onMounted</li><li>beforeUpdate  &rarr;  onBeforeUpdate</li><li>updated  &rarr;  onUpdated</li><li>beforeDestroy  &rarr;  onBeforeUnmouted</li><li>destroy  &rarr;  onUnmouted</li><li>errorCaptured  &rarr;  onErrorCaptured</li></ul></li><li><p>新增的钩子函数 </p><p>增加了调试的钩子</p><ul><li>onRenderTracked</li><li>onRenderTriggered</li></ul><p>两个钩子都接收一个 <code>DebuggerEvent</code> , 与 <code>watchEffect</code> 参数选项中的 <code>onTrack</code></p><p><code>onTrigger</code> 类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  onRenderTriggerd(e) &#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">    <span class="comment">// do</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><code>provide</code> 和 <code>inject</code> 提供依赖注入, 两者都只能在当前活动组件实例的 <code>setup()</code> 使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ThemeSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ancestor = &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    provide(ThemeSymbol, <span class="string">"dark"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Descendent = &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> theme = inject(ThemeSymbol, <span class="string">'light'</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      theme</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> inject 接受一个可选的默认值 作为第二个参数 如果未提供默认值, 并且在provide上下文中未找到该属性, 则inject返回 undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>注入的响应式</p><p>可以使用 <code>ref</code>  来保证 <code>provided</code> 和 <code>injected</code> 之间值的相应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供者</span></span><br><span class="line"><span class="keyword">const</span> theme = ref(<span class="string">'dark'</span>);</span><br><span class="line">provide(ThemeSymbol, theme);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用者</span></span><br><span class="line"><span class="keyword">const</span> theme = inject(ThemeSymbol, ref(<span class="string">'light'</span>))</span><br><span class="line">watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`theme set to: <span class="subst">$&#123; theme.value &#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果注入一个响应式对象, 则它的状态变化也可以被侦听</span></span><br></pre></td></tr></table></figure></li><li><p>类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> InjectionKey&lt;T&gt; <span class="keyword">extends</span> Symbol &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">provide</span>&lt;<span class="title">T</span>&gt;(<span class="params">key: InjectionKey&lt;T&gt; | <span class="built_in">string</span>, value: T</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 未传使用缺省值</span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">inject</span>&lt;<span class="title">T</span>&gt;(<span class="params">key: InjectionKey&lt;T&gt; | <span class="built_in">string</span></span>): <span class="title">T</span> | <span class="title">undefined</span></span></span></span><br><span class="line"><span class="function"><span class="function"></span></span></span><br><span class="line"><span class="function"><span class="function">// 传入默认值</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">inject</span>&lt;<span class="title">T</span>&gt;(<span class="params">key: InjectionKey&lt;T&gt; | <span class="built_in">string</span>, defaultValue: T</span>): <span class="title">T</span></span></span></span></span><br></pre></td></tr></table></figure><p>vue 提供一个继承 <code>Symbol</code> 的 <code>InjectionKey</code> 接口 </p><p>它可用于在提供者和消费者之间同步注入值的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; InjectionKey, provide, inject &#125; <span class="keyword">from</span> <span class="string">"@vue/composition-Api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key: InjectionKey&lt;string&gt; = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line">provide(key, <span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = inject(key) <span class="comment">// string | undefined</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="模板Refs"><a href="#模板Refs" class="headerlink" title="模板Refs"></a>模板Refs</h3><p>当使用组合式API时,  <em>reactive refs</em> 和 <em>template refs</em> 的概念已经统一. 为了获取对模板内元素或者组件实例的引用, 我们可以像往常一样在 <code>setup()</code> 中声明一个ref 并返回它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div ref&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;@vue&#x2F;composition-Api&quot;;</span><br><span class="line">  </span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const root &#x3D; ref(null);</span><br><span class="line">    </span><br><span class="line">    onMounted(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(root.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">      root</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这里我们将 <code>root</code> 暴露在渲染上下文中，并通过 <code>ref=&quot;root&quot;</code> 绑定到 <code>div</code> 作为其 <code>ref</code>。 在 Virtual DOM patch 算法中，如果一个 VNode 的 <code>ref</code> 对应一个渲染上下文中的 ref，则该 VNode 对应的元素或组件实例将被分配给该 ref。 这是在 Virtual DOM 的 mount / patch 过程中执行的，因此模板 ref 仅在渲染初始化后才能访问。</p><p>ref 被用在模板中时和其他 ref 一样：都是响应式的，并可以传递进组合函数（或从其中返回）。</p><ul><li><p>配合render 函数 / JSX</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> root = ref(<span class="literal">null</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// render 二选一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      h(<span class="string">"div"</span>, &#123;</span><br><span class="line">        ref: root</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// jsx</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;root&#125;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>v-for</code> 中使用</p><p>模板 ref 在 <code>v-for</code> 中使用 vue 没有做特殊处理，需要使用 *<em>函数型的 ref *</em> 来自定义处理方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for&#x3D;&quot;(item, i) in list&quot; :ref&#x3D;&quot;el &#x3D;&gt; &#123; divs[i] &#x3D; el &#125;&quot;&gt;</span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, reactive, onBeforeUpdate &#125; from &quot;@vue&#x2F;composition-Api&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const list &#x3D; reactive([1, 2, 3])</span><br><span class="line">    const divs &#x3D; ref([])</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 确保在每次变更之前重置引用</span><br><span class="line">    onBeforeUpdate(() &#x3D;&gt; &#123;</span><br><span class="line">      divs.value &#x3D; []</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      list,</span><br><span class="line">      divs,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="响应式系统工具集"><a href="#响应式系统工具集" class="headerlink" title="响应式系统工具集"></a>响应式系统工具集</h3><ul><li><p><strong><code>unref</code></strong></p><p>如果参数是一个ref则返回它的 <code>value</code> , 否则返回参数本身  <code>val = isRef(val) ? val.value : val</code> 的语法糖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFoo</span>(<span class="params">x: number | Ref&lt;number&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> unwrapped = unref(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>toRef</code></strong></p><p><code>toRef</code>  可以用来为一个  <code>reactive</code> 对象属性创建一个 <code>ref</code>  这个  <code>ref</code>  可以被传递并且能够保持响应式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fooRef = toRef(state, <span class="string">"foo"</span>)</span><br><span class="line"></span><br><span class="line">fooRef.value++</span><br><span class="line"><span class="built_in">console</span>.log(state.foo)</span><br><span class="line"></span><br><span class="line">state.foo++</span><br><span class="line"><span class="built_in">console</span>.log(fooRef.value)</span><br></pre></td></tr></table></figure><p>当您要将一个 prop 中的属性作为 ref 传给组合逻辑函数时，<code>toRef</code> 就派上了用场：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    useSomeFeature(toRef(props, <span class="string">'foo'</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>toRefs</code></strong></p><p>把一个响应式对象转换成普通对象，该普通对象的每个 <code>property</code> 都是一个 <code>ref</code>，和响应式对象 <code>property</code> 一一对应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stateAsRefs = toRefs(state)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stateAsRefs 的类型如下:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  foo: Ref&lt;number&gt;,</span></span><br><span class="line"><span class="comment">  bar: Ref&lt;number&gt;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">state.foo++</span><br><span class="line"><span class="built_in">console</span>.log(stateAsRefs.foo.value) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">stateAsRefs.bar.value++ </span><br><span class="line"><span class="built_in">console</span>.log(state.bar); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>当想要从一个组合逻辑函数中返回响应式对象时，用 <code>toRefs</code> 是很有效的，该 API 让消费组件可以 解构 / 扩展（使用 <code>...</code> 操作符）返回的对象，并不会丢失响应性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; foo, bar &#125; = useFeatureX()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      bar,</span><br><span class="line">      foo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>isRef</code></strong></p><p>检查一个值是否为一个 ref 对象。</p></li><li><p><strong><code>isProxy</code></strong></p><p>检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理。</p></li><li><p><strong><code>isReactive</code></strong></p><p>检查一个对象是否是由 <code>reactive</code> 创建的响应式代理。</p><p>如果这个代理是由 <code>readonly</code> 创建的，但是又被 <code>reactive</code> 创建的另一个代理包裹了一层，那么同样也会返回 <code>true</code>。</p></li><li><p><strong><code>isReadonly</code></strong></p><p>检查一个对象是否是由 <code>readonly</code> 创建的只读代理</p></li></ul>]]></content>
    
    <summary type="html">
    
      摸鱼
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>每日一读loadsh 源码</title>
    <link href="http://blog.decade.run/2020/08/28/loadsh4/"/>
    <id>http://blog.decade.run/2020/08/28/loadsh4/</id>
    <published>2020-08-27T21:13:49.000Z</published>
    <updated>2020-08-31T13:01:04.573Z</updated>
    
    <content type="html"><![CDATA[<ul><li>今日任务<ul><li><input checked disabled type="checkbox"> flatten</li><li><input checked disabled type="checkbox"> flattenDeep</li><li><input checked disabled type="checkbox"> flattrnDepth<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3></li></ul></li></ul><ol><li><p>flatten(array) 减少一级array深度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.flatten([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]); =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure></li><li><p>flattenDeep(array) 将array递归为一维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.flattenDeep([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]) =&gt; [<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span> ,<span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>flattenDepth(array, depth=1) 减少depth级深度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.flattenDepth([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>]]]], <span class="number">2</span>); =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>]];</span><br></pre></td></tr></table></figure></li></ol><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol><li><p>上面的三个方法最主要的区别就是调用baseFlatten传的参数不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flatten</span></span><br><span class="line">baseFlatten(array, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// flattenDeep</span></span><br><span class="line">baseFlatten(array, INFINITY);</span><br><span class="line"><span class="comment">// flattenDepth</span></span><br><span class="line">baseFlatten(array, depth)</span><br></pre></td></tr></table></figure></li><li><p>这里的三个方法调用的baseFlatten 都用的是默认的那个判断是否能拍的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spreadableSymbol = <span class="built_in">Symbol</span>.isConcatSpreadable</span><br><span class="line"><span class="comment">// 当调用concat方法时</span></span><br><span class="line"><span class="comment">// 这个值为true 全部展开放进去</span></span><br><span class="line"><span class="comment">// false 就不展开放进去</span></span><br><span class="line"><span class="comment">// 数组默认为true</span></span><br><span class="line"><span class="comment">// 类数组默认为false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFlattenable</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(value) || isArguments(value) ||</span><br><span class="line">    !!(value &amp;&amp; value[spreadableSymbol])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>baseFlatten源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseFlatten</span>(<span class="params">array, depth, predicate, isStrict, result</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 传入的数组, 拍平的深度, 判断能否拍的方法, 是否严格, 返回的结果</span></span><br><span class="line">  predicate || (predicate = isFlattenable)</span><br><span class="line">  result || (result = [])</span><br><span class="line">  <span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth &gt; <span class="number">0</span> &amp;&amp; predicate(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (depth &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        baseFlatten(value, depth - <span class="number">1</span>, predicate, isStrict, result)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(...value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isStrict) &#123;</span><br><span class="line">      result[result.length] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      开始啃loadsh
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="loadsh" scheme="http://blog.decade.run/tags/loadsh/"/>
    
  </entry>
  
</feed>
