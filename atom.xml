<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小明</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.decade.run/"/>
  <updated>2020-08-27T22:10:13.614Z</updated>
  <id>http://blog.decade.run/</id>
  
  <author>
    <name>Decade W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日一读loadsh 源码</title>
    <link href="http://blog.decade.run/2020/08/28/loadsh4/"/>
    <id>http://blog.decade.run/2020/08/28/loadsh4/</id>
    <published>2020-08-27T21:13:49.000Z</published>
    <updated>2020-08-27T22:10:13.614Z</updated>
    
    <content type="html"><![CDATA[<ul><li>今日任务<ul><li><input checked disabled type="checkbox"> flatten</li><li><input checked disabled type="checkbox"> flattenDeep</li><li><input checked disabled type="checkbox"> flattrnDepth</li></ul></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li><p>flatten(array) 减少一级array深度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.flatten([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]); =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]</span><br></pre></td></tr></table></figure></li><li><p>flattenDeep(array) 将array递归为一维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.flattenDeep([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]) =&gt; [<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span> ,<span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>flattenDepth(array, depth=1) 减少depth级深度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.flattenDepth([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>]]]], <span class="number">2</span>); =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>]];</span><br></pre></td></tr></table></figure></li></ol><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol><li><p>上面的三个方法最主要的区别就是调用baseFlatten传的参数不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flatten</span></span><br><span class="line">baseFlatten(array, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// flattenDeep</span></span><br><span class="line">baseFlatten(array, INFINITY);</span><br><span class="line"><span class="comment">// flattenDepth</span></span><br><span class="line">baseFlatten(array, depth)</span><br></pre></td></tr></table></figure></li><li><p>这里的三个方法调用的baseFlatten 都用的是默认的那个判断是否能拍的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spreadableSymbol = <span class="built_in">Symbol</span>.isConcatSpreadable</span><br><span class="line"><span class="comment">// 当调用concat方法时</span></span><br><span class="line"><span class="comment">// 这个值为true 全部展开放进去</span></span><br><span class="line"><span class="comment">// false 就不展开放进去</span></span><br><span class="line"><span class="comment">// 数组默认为true</span></span><br><span class="line"><span class="comment">// 类数组默认为false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFlattenable</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(value) || isArguments(value) ||</span><br><span class="line">    !!(value &amp;&amp; value[spreadableSymbol])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>baseFlatten源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseFlatten</span>(<span class="params">array, depth, predicate, isStrict, result</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 传入的数组, 拍平的深度, 判断能否拍的方法, 是否严格, 返回的结果</span></span><br><span class="line">  predicate || (predicate = isFlattenable)</span><br><span class="line">  result || (result = [])</span><br><span class="line">  <span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth &gt; <span class="number">0</span> &amp;&amp; predicate(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (depth &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        baseFlatten(value, depth - <span class="number">1</span>, predicate, isStrict, result)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(...value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isStrict) &#123;</span><br><span class="line">      result[result.length] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      开始啃loadsh
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="loadsh" scheme="http://blog.decade.run/tags/loadsh/"/>
    
  </entry>
  
  <entry>
    <title>每日一读loadsh 源码</title>
    <link href="http://blog.decade.run/2020/08/27/loadsh3/"/>
    <id>http://blog.decade.run/2020/08/27/loadsh3/</id>
    <published>2020-08-26T20:55:49.000Z</published>
    <updated>2020-08-26T23:04:22.767Z</updated>
    
    <content type="html"><![CDATA[<ul><li>今日任务<ul><li><input checked disabled type="checkbox"> findIndex</li><li><input checked disabled type="checkbox"> findLastIndex</li><li><input checked disabled type="checkbox"> head</li><li><input checked disabled type="checkbox"> indexOf</li></ul></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>findIndex(array, [predicate=_.identity], [fromIndex=0])  从左往右 返回第一个通过 predicate 判断为真值的元素的索引值（index）  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'barney'</span>,  <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'fred'</span>,    <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'pebbles'</span>, <span class="string">'active'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line">_.findIndex(users, (o) =&gt; &#123; <span class="keyword">return</span> o.user == <span class="string">'barney'</span>; &#125;); =&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1]) 从右向左开始的  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'barney'</span>,  <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'fred'</span>,    <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'pebbles'</span>, <span class="string">'active'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">];</span><br><span class="line">_.findLastIndex(users, (o) =&gt; &#123; <span class="keyword">return</span> o.user == <span class="string">'pebbles'</span>; &#125;);</span><br></pre></td></tr></table></figure></li><li>head(array)  获取数组 array 的第一个元素。  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.head([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>indexOf(array, value, [fromIndex=0]) 返回首次 value 在数组array中被找到的 索引值  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.indexOf([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>); =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol><li>findIndex源码我没有找到, 我结合findLastIndex做了些修改实现了findIndex, 最大的区别如下 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">findIndex</span><br><span class="line">(fromIndex == <span class="literal">undefined</span>) &amp;&amp; (index = <span class="number">0</span>); <span class="comment">// 这行代码的主要是为了当起始位置没传时,  默认起始位置为0</span></span><br><span class="line">baseFindIndex(array, predicate, index)</span><br><span class="line"><span class="comment">// findLastIndex</span></span><br><span class="line">baseFindIndex(array, predicate, index, <span class="literal">true</span>) <span class="comment">// 第四个参数是控制 是否从右往左的</span></span><br></pre></td></tr></table></figure></li><li>这个indexOf用的是严格的相等 即=== <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> value === value</span><br><span class="line">  ? strictIndexOf(array, value, fromIndex) <span class="comment">// 严格的indexOf</span></span><br><span class="line">  : baseFindIndex(array, baseIsNaN, fromIndex) <span class="comment">//两个值不相等的时候 调用baseFindIndex 第二个参数传入 一个判断方法</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3></li><li>baseFindIndex <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseFindIndex</span>(<span class="params">array, predicate, fromIndex, fromRight</span>) </span>&#123; <span class="comment">//目标数组, 判断方法, 起始位置, 是否从右开始</span></span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array </span><br><span class="line">  <span class="keyword">let</span> index = fromIndex + (fromRight ? <span class="number">1</span> : <span class="number">-1</span>) <span class="comment">//这里的index是为了控制左闭右开 </span></span><br><span class="line">  <span class="comment">// 如果fromRight为true 结合下面的while 执行 index-- 假如length为3 此时的fromindex 为2 index就变成了3  [0,3) =&gt; [0, 2]</span></span><br><span class="line">  <span class="comment">// 如果fromRight为false 结合下面的while 执行++index 假如length为3 此时的fromindex 为1 index就变成了0  [1,3)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ((fromRight ? index-- : ++index &lt; length)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (predicate(array[index], index, array)) &#123; <span class="comment">//返回结果为true</span></span><br><span class="line">      <span class="keyword">return</span> index <span class="comment">// 返回下标</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      开始啃loadsh
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="loadsh" scheme="http://blog.decade.run/tags/loadsh/"/>
    
  </entry>
  
  <entry>
    <title>每日一读loadsh 源码</title>
    <link href="http://blog.decade.run/2020/08/24/loadsh2/"/>
    <id>http://blog.decade.run/2020/08/24/loadsh2/</id>
    <published>2020-08-23T20:55:49.000Z</published>
    <updated>2020-08-26T08:40:01.245Z</updated>
    
    <content type="html"><![CDATA[<ul><li>今日任务<ul><li><input checked disabled type="checkbox"> drop</li><li><input checked disabled type="checkbox"> dropRight</li><li><input checked disabled type="checkbox"> dropRightWhile</li><li><input checked disabled type="checkbox"> dropWhile<br>hexo<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3></li></ul></li></ul><ol><li>drop(array, [n=1]) 创建一个切片数组，去除array前面的n个元素。（n默认值为1。）返回的是剩下元素组成的数组  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">_.drop(arr, <span class="number">1</span>); =&gt; [<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li>dropRight(array, [n=1]) 切去尾部的的n个元素 返回剩下元素组成的数组  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">_.dropRight(arr, <span class="number">1</span>); =&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li>dropRightWhile(array, [predicate=_.identity]) 第二个参数是一个迭代方法参数为(value, index, arr) 返回从假值开始到结尾  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'barney'</span>,  <span class="string">'active'</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'fred'</span>,    <span class="string">'active'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'pebbles'</span>, <span class="string">'active'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.dropRightWhile(user, (&#123;active&#125;) =&gt; active) =&gt; [&#123; <span class="string">'user'</span>: <span class="string">'barney'</span>,  <span class="string">'active'</span>: <span class="literal">false</span> &#125;]</span><br></pre></td></tr></table></figure></li><li>dropWhile(array, [predicate=_.identity]) 第二个参数是一个迭代方法参数为(value, index, arr) 返回从开始到结尾  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'barney'</span>,  <span class="string">'active'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'fred'</span>,    <span class="string">'active'</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'user'</span>: <span class="string">'pebbles'</span>, <span class="string">'active'</span>: <span class="literal">false</span> &#125;</span><br><span class="line">]</span><br><span class="line">_.dropWhile(user, (&#123;active&#125;) =&gt; active) =&gt; [&#123; <span class="string">'user'</span>: <span class="string">'pebbles'</span>, <span class="string">'active'</span>: <span class="literal">false</span> &#125;]</span><br></pre></td></tr></table></figure><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3></li><li>slice中怎么控制传入负数时 从数组结尾开始获取的 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  start = -start &gt; length ? <span class="number">0</span> : (length + start) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>javascript中的位运算符 js中的所有按位运算都会把操作数 转成32的二级制数 多于32的将会被丢弃(丢弃左边的)<ul><li><strong>&amp;</strong> 按位与 两个操作数转成32位二进制后 对应位同时为1 才为1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     9 (base 10) &#x3D; 00000000000000000000000000001001 (base 2)</span><br><span class="line">    14 (base 10) &#x3D; 00000000000000000000000000001110 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">14 &amp; 9 (base 10) &#x3D; 00000000000000000000000000001000 (base 2) &#x3D; 8 (base 10)</span><br></pre></td></tr></table></figure></li><li><strong>|</strong> 按位或 两个操作数转成32位二进制后 对应位有1 就 为1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     9 (base 10) &#x3D; 00000000000000000000000000001001 (base 2)</span><br><span class="line">    14 (base 10) &#x3D; 00000000000000000000000000001110 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">14 | 9 (base 10) &#x3D; 00000000000000000000000000001111(base 2) &#x3D; 15 (base 10)</span><br><span class="line">&#x2F;&#x2F; 补充 任何数与 0 按位或操作 都是任何数本身, 任何数与 -1 按位或操作 都是-1</span><br></pre></td></tr></table></figure></li><li><strong>^</strong> 按位异或 两个操作数转成32位二进制后 对应位 相同为0 不相同为1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     9 (base 10) &#x3D; 00000000000000000000000000001001 (base 2)</span><br><span class="line">    14 (base 10) &#x3D; 00000000000000000000000000001110 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">14 ^ 9 (base 10) &#x3D; 00000000000000000000000000000111 (base 2) &#x3D; 7 (base 10)</span><br><span class="line">&#x2F;&#x2F; 补充 任何数与0 按位异或 为任何数本身, 任何数与 -1 按位异或后 得 任何数按位非</span><br></pre></td></tr></table></figure></li><li><strong>~</strong> 按位非 操作数变成32位二进制数后 0变1 1变0<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 9 (base 10) &#x3D; 00000000000000000000000000001001 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">~9 (base 10) &#x3D; 11111111111111111111111111110110 (base 2) </span><br><span class="line">&#x2F;&#x2F; 二进制转10进制 先-1 再取反(注意符号位别变)</span><br><span class="line">               10000000000000000000000000001010 (base 2) &#x3D; -10</span><br><span class="line">&#x2F;&#x2F; 补充 x 按位非操作 都是 -(x + 1)</span><br></pre></td></tr></table></figure></li><li><strong>&lt;&lt;</strong> 左移 会将第一个操作数向左移动指定的位数。向左被移出的位被丢弃，右侧用 0 补充<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     9 (base 10): 00000000000000000000000000001001 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">9 &lt;&lt; 2 (base 10): 00000000000000000000000000100100 (base 2) &#x3D; 36 (base 10)</span><br></pre></td></tr></table></figure></li><li><strong>&gt;&gt;</strong> 有符号右移 第一个操作数向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     9 (base 10): 00000000000000000000000000001001 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">9 &gt;&gt; 2 (base 10): 00000000000000000000000000000010 (base 2) &#x3D; 2 (base 10)</span><br><span class="line">---                                                             ---  </span><br><span class="line">     -9 (base 10): 11111111111111111111111111110111 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">-9 &gt;&gt; 2 (base 10): 11111111111111111111111111111101 (base 2) &#x3D; -3 (base 10)</span><br></pre></td></tr></table></figure></li><li><strong>&gt;&gt;&gt;</strong> 无符号右移 第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      9 (base 10): 00000000000000000000000000001001 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line">9 &gt;&gt;&gt; 2 (base 10): 00000000000000000000000000000010 (base 2) &#x3D; 2 (base 10)</span><br><span class="line">---                                                              ---</span><br><span class="line">       -9 (base 10): 11111111111111111111111111110111 (base 2)</span><br><span class="line">    ----------------------------------------------------------------</span><br><span class="line"> -9 &gt;&gt;&gt; 2 (base 10): 00111111111111111111111111111101 (base 2) &#x3D; 1073741821 (base 10)</span><br></pre></td></tr></table></figure></li></ul></li><li>drop 和 dropRight最大的区别就是在给 slice 这个方法传参 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// drop</span></span><br><span class="line">slice(array, n &lt; <span class="number">0</span> ? <span class="number">0</span> : toInteger(n), length)</span><br><span class="line"><span class="comment">// dropRight</span></span><br><span class="line">slice(array, <span class="number">0</span>, n &lt; <span class="number">0</span> ? <span class="number">0</span> : n)</span><br></pre></td></tr></table></figure></li><li>dropRightWhile 和 dropWhile 区别在于给 baseWhile 传参 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dropRightWhile</span></span><br><span class="line">baseWhile(array, predicate, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// dropWhile</span></span><br><span class="line">baseWhile(array, predicate, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="分析-这里只是针对最基本的那个方法解析"><a href="#分析-这里只是针对最基本的那个方法解析" class="headerlink" title="分析 (这里只是针对最基本的那个方法解析)"></a>分析 (这里只是针对最基本的那个方法解析)</h3><ol><li>slice源码分析 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slice</span>(<span class="params">array, start, end</span>) </span>&#123; <span class="comment">// 传入的数组, 起始位置, 结束位置 [start, end)</span></span><br><span class="line">  <span class="keyword">let</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length <span class="comment">// 获取length</span></span><br><span class="line">  <span class="keyword">if</span> (!length) &#123; <span class="comment">// 0的时候直接返回空数组</span></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">  start = start == <span class="literal">null</span> ? <span class="number">0</span> : start <span class="comment">// 不传 默认为0</span></span><br><span class="line">  end = end === <span class="literal">undefined</span> ? length : end <span class="comment">//不传 默认数组长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123; <span class="comment">// 传的start为负数的情况</span></span><br><span class="line">    start = -start &gt; length ? <span class="number">0</span> : (length + start) <span class="comment">// -start值大于length start 赋值为0 否则为length+start</span></span><br><span class="line">  &#125;</span><br><span class="line">  end = end &gt; length ? length : end <span class="comment">// 大于length 则为length 否则不变</span></span><br><span class="line">  <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123; <span class="comment">// 如果end为负数</span></span><br><span class="line">    end += length <span class="comment">// 这里存在end 比length的两倍还大情况 也就是 end+=length后 -end &gt; length</span></span><br><span class="line">  &#125;</span><br><span class="line">  length = start &gt; end ? <span class="number">0</span> : ((end - start) &gt;&gt;&gt; <span class="number">0</span>) <span class="comment">// 这里判断 start 不能比end大 可以杜绝上面那种情况 </span></span><br><span class="line">  start &gt;&gt;&gt;= <span class="number">0</span> <span class="comment">// &gt;&gt;&gt; 这个操作会使非负数 有相同的返回结果 如果start不是整数 也能变成整数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(length) <span class="comment">// 生成一个截取后长度为length的数组</span></span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    result[index] = array[index + start] </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result <span class="comment">// 返回结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>baseWhile源码解析 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseWhile</span>(<span class="params">array, predicate, isDrop, fromRight</span>) </span>&#123; <span class="comment">// 传入的数组, 迭代函数, 是否截取, 是否是从右边开始截取</span></span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array</span><br><span class="line">  <span class="keyword">let</span> index = fromRight ? length : <span class="number">-1</span> <span class="comment">// 这里的index 控制 是否是从右开始截取</span></span><br><span class="line">  <span class="keyword">while</span> ((fromRight ? index-- : ++index &lt; length) &amp;&amp;</span><br><span class="line">    predicate(array[index], index, array)) &#123;&#125; <span class="comment">//predicate(array[index], index, array) 这个方法的返回值为false时 while结束 如果fromRight为true 则截取的[0, index+1) false为[index, length)</span></span><br><span class="line">  <span class="keyword">return</span> isDrop</span><br><span class="line">    ? slice(array, (fromRight ? <span class="number">0</span> : index), (fromRight ? index + <span class="number">1</span> : length)) <span class="comment">// 这里index+1是为了造成左闭右开</span></span><br><span class="line">    : slice(array, (fromRight ? index + <span class="number">1</span> : <span class="number">0</span>), (fromRight ? length : index)) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      开始啃loadsh
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="loadsh" scheme="http://blog.decade.run/tags/loadsh/"/>
    
  </entry>
  
  <entry>
    <title>每日一读loadsh 源码</title>
    <link href="http://blog.decade.run/2020/08/20/loadsh1/"/>
    <id>http://blog.decade.run/2020/08/20/loadsh1/</id>
    <published>2020-08-19T20:55:49.000Z</published>
    <updated>2020-08-26T08:33:00.045Z</updated>
    
    <content type="html"><![CDATA[<ul><li>今日任务<ul><li><input checked disabled type="checkbox"> chunk</li><li><input checked disabled type="checkbox"> compact</li><li><input checked disabled type="checkbox"> difference</li><li><input checked disabled type="checkbox"> differenceBy</li><li><input checked disabled type="checkbox"> differenceWith</li></ul></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>chunk(arr, size = 1) 传入一个数组, 传入一个size 可以将数组分割成多个size或者不足size大小的数组, 最后将这些分割的数组 再包成数组返回 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.chunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span>], <span class="number">2</span>) =&gt; [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>]]</span><br><span class="line">_.chunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>], <span class="number">2</span>) =&gt; [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure></li><li>compact(array) 去除掉数组中的假值 “”, null, undefined, false,NaN 返回的是去掉假值后的数组 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]); =&gt; [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li>difference(array, [values]) 返回array与后面values除掉交集的部分 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.difference([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">2</span>]); =&gt; [<span class="number">3</span>, <span class="number">1</span>];</span><br></pre></td></tr></table></figure></li><li>differenceBy(array, [values], [iteratee=_.identity]) 比difference 多传入一个iteratee  这个参数也就是baseDifference的第三个参数 返回的也是一个过滤后的数组 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">differenceBy([<span class="number">3.1</span>, <span class="number">2.2</span>, <span class="number">1.3</span>], [<span class="number">4.4</span>, <span class="number">2.5</span>], <span class="built_in">Math</span>.floor) =&gt; [<span class="number">3.1</span>, <span class="number">1.3</span>]</span><br></pre></td></tr></table></figure></li><li>differenceWith(array, [values], [comparator]) 比difference 多传一个comparator 返回的也是一个过滤后的数组 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span> &#125;, &#123; <span class="string">'x'</span>: <span class="number">2</span>, <span class="string">'y'</span>: <span class="number">1</span> &#125;];</span><br><span class="line">_.differenceWith(objects, [&#123; <span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span> &#125;], _.isEqual); =&gt; [&#123; <span class="string">'x'</span>: <span class="number">2</span>, <span class="string">'y'</span>: <span class="number">1</span> &#125;]</span><br></pre></td></tr></table></figure></li></ol><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取length属性</span></span><br><span class="line"><span class="keyword">const</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length</span><br><span class="line"><span class="comment">// 判断是否是对象</span></span><br><span class="line"><span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value !== <span class="literal">null</span></span><br><span class="line"><span class="comment">// 判断是否是数组或类数组</span></span><br><span class="line">value != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">'function'</span> &amp;&amp; isLength(value.length) &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">'object'</span></span><br><span class="line"><span class="comment">//  arr.concat(arr1) 控制arr1是否展开</span></span><br><span class="line"><span class="built_in">Symbol</span>.isConcatSpreadable <span class="comment">// 如果arr1是数组 则为true 如果arr1是类数组 则为false 见下面例子</span></span><br><span class="line"><span class="comment">// 可以通过传引用参数, 最后返回它就行了 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseFlatten</span>(<span class="params">array, depth, predicate, isStrict, result</span>)</span>&#123;&#125; <span class="comment">// result便是引用的</span></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol><li>Symbol.isConcatSpreadable  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> likeArr = &#123;<span class="number">0</span>: <span class="number">7</span>, <span class="number">1</span>: <span class="number">8</span>, <span class="number">2</span>: <span class="number">9</span>, <span class="attr">length</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">arr.concat(arr1); <span class="comment">// [1, 2, 3, 4 ,5 ,6]</span></span><br><span class="line">arr2[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line">arr.concat(arr1); <span class="comment">// [1, 2, 3, [4, 5, 6]]</span></span><br><span class="line"></span><br><span class="line">arr.concat(likeArr); <span class="comment">// [1, 2, 3 , &#123; 0: 7, 1: 8, 2: 9, length: 3 &#125;]</span></span><br><span class="line">likeArr[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line">arr.concat(likeArr); <span class="comment">// [1, 2, 3 , 7, 8, 9]</span></span><br></pre></td></tr></table></figure></li><li>分析baseFlatten  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要拍平的数组, 深度, 递归时判断是否执行的条件方法, 是否使用严格, 返回的结果数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseFlatten</span>(<span class="params">array, depth, predicate, isStrict, result</span>) </span>&#123;</span><br><span class="line">  predicate || (predicate = isFlattenable) <span class="comment">// 没有传该方法 就使用判断该值是否能拍平的方法</span></span><br><span class="line">  result || (result = []) <span class="comment">// 没有就赋值为数组</span></span><br><span class="line">  <span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123; <span class="comment">// 遍历每一项</span></span><br><span class="line">    <span class="keyword">if</span> (depth &gt; <span class="number">0</span> &amp;&amp; predicate(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (depth &gt; <span class="number">1</span>) &#123; <span class="comment">// depth &gt; 1 继续拍</span></span><br><span class="line">        baseFlatten(value, depth - <span class="number">1</span>, predicate, isStrict, result)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(...value) <span class="comment">// push进数组</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isStrict) &#123;</span><br><span class="line">      result[result.length] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否是可以拍平对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFlattenable</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(value) || isArguments(value) ||</span><br><span class="line">    !!(value &amp;&amp; value[spreadableSymbol])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>分析 baseDifference   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseDifference</span>(<span class="params">array, values, iteratee, comparator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> includes = arrayIncludes <span class="comment">// arrayIncludes 判断数组中是否存在某一值</span></span><br><span class="line">  <span class="keyword">let</span> isCommon = <span class="literal">true</span> <span class="comment">// 是否是通常对比 如果传入了iteratee 或者 comparator 为特殊对比</span></span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">const</span> valuesLength = values.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!array.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (iteratee) &#123; <span class="comment">// 存在 迭代器</span></span><br><span class="line">    values = map(values, (value) =&gt; iteratee(value)) <span class="comment">// 则每个值调用该方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (comparator) &#123; <span class="comment">// 存在比较器</span></span><br><span class="line">    includes = arrayIncludesWith <span class="comment">// arrayIncludesWith(array, target, comparator) 指定comparator来确定targe是否在array中存在</span></span><br><span class="line">    isCommon = <span class="literal">false</span> <span class="comment">// 说明是特殊比较</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (values.length &gt;= LARGE_ARRAY_SIZE) &#123; <span class="comment">// 不存在比较器 且后面传入的长度大于200</span></span><br><span class="line">    includes = cacheHas <span class="comment">// cacheHas(cache, key) cache里面是否有key</span></span><br><span class="line">    isCommon = <span class="literal">false</span></span><br><span class="line">    values = <span class="keyword">new</span> SetCache(values) <span class="comment">// 数组转换成 hashmap对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 下面是主要的逻辑</span></span><br><span class="line">  outer: </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123; <span class="comment">// 遍历数组每一项</span></span><br><span class="line">    <span class="keyword">const</span> computed = iteratee == <span class="literal">null</span> ? value : iteratee(value) <span class="comment">// 存在迭代器 则调用迭代器一次</span></span><br><span class="line">    value = (comparator || value !== <span class="number">0</span>) ? value : <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (isCommon &amp;&amp; computed === computed) &#123;</span><br><span class="line">      <span class="keyword">let</span> valuesIndex = valuesLength <span class="comment">// 拿到values数组长度</span></span><br><span class="line">      <span class="keyword">while</span> (valuesIndex--) &#123; <span class="comment">// 开始对比</span></span><br><span class="line">        <span class="keyword">if</span> (values[valuesIndex] === computed) &#123;</span><br><span class="line">          <span class="keyword">continue</span> outer <span class="comment">// 满足条件 跳出当前的value值 进入下一个</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      result.push(value) <span class="comment">// push进结果数组</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!includes(values, computed, comparator)) &#123; <span class="comment">//调用include方法</span></span><br><span class="line">      result.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      开始啃loadsh
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="loadsh" scheme="http://blog.decade.run/tags/loadsh/"/>
    
  </entry>
  
  <entry>
    <title>vue源码 之 虚拟DOM</title>
    <link href="http://blog.decade.run/2020/07/28/vue-note3/"/>
    <id>http://blog.decade.run/2020/07/28/vue-note3/</id>
    <published>2020-07-27T21:34:48.000Z</published>
    <updated>2020-08-20T06:44:46.910Z</updated>
    
    <content type="html"><![CDATA[<p>首先文件目录是在src/core/vnode   没有备注的说明我自己还没有踩到</p><h3 id="vnode-js"><a href="#vnode-js" class="headerlink" title="vnode.js"></a>vnode.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  tag: string | <span class="keyword">void</span>; <span class="comment">// 标签名</span></span><br><span class="line">  data: VNodeData | <span class="keyword">void</span>;  <span class="comment">// VNodeData 在flow/vnode里面 </span></span><br><span class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;; <span class="comment">// 子节点</span></span><br><span class="line">  text: string | <span class="keyword">void</span>; <span class="comment">// 文本</span></span><br><span class="line">  elm: Node | <span class="keyword">void</span>; <span class="comment">// 真实dom</span></span><br><span class="line">  ns: string | <span class="keyword">void</span>; <span class="comment">// 命名空间</span></span><br><span class="line">  context: Component | <span class="keyword">void</span>;</span><br><span class="line">  key: string | number | <span class="keyword">void</span>; <span class="comment">// 优化diff</span></span><br><span class="line">  componentOptions: VNodeComponentOptions | <span class="keyword">void</span>; <span class="comment">// 这个是在后面生成子组件的时候用到的</span></span><br><span class="line">  componentInstance: Component | <span class="keyword">void</span>; <span class="comment">// 组件实例</span></span><br><span class="line">  parent: VNode | <span class="keyword">void</span>; <span class="comment">// 组件站位节点</span></span><br><span class="line">  raw: boolean;</span><br><span class="line">  isStatic: boolean; <span class="comment">// 是否是静态节点</span></span><br><span class="line">  isRootInsert: boolean; </span><br><span class="line">  isComment: boolean; <span class="comment">// 是否是注释节点</span></span><br><span class="line">  isCloned: boolean; <span class="comment">// 是否是克隆节点</span></span><br><span class="line">  isOnce: boolean; <span class="comment">// v-once 只渲染一次</span></span><br><span class="line">  asyncFactory: <span class="built_in">Function</span> | <span class="keyword">void</span>; <span class="comment">// 函数组件</span></span><br><span class="line">  asyncMeta: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  isAsyncPlaceholder: boolean;</span><br><span class="line">  ssrContext: <span class="built_in">Object</span> | <span class="keyword">void</span>;</span><br><span class="line">  fnContext: Component | <span class="keyword">void</span>; </span><br><span class="line">  fnOptions: ?ComponentOptions; </span><br><span class="line">  devtoolsMeta: ?<span class="built_in">Object</span>;</span><br><span class="line">  fnScopeId: ?string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    tag?: string,</span><br><span class="line">    data?: VNodeData,</span><br><span class="line">    children?: ?Array&lt;VNode&gt;,</span><br><span class="line">    text?: string,</span><br><span class="line">    elm?: Node,</span><br><span class="line">    context?: Component,</span><br><span class="line">    componentOptions?: VNodeComponentOptions,</span><br><span class="line">    asyncFactory?: Function</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tag = tag</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.children = children</span><br><span class="line">    <span class="keyword">this</span>.text = text</span><br><span class="line">    <span class="keyword">this</span>.elm = elm</span><br><span class="line">    <span class="keyword">this</span>.ns = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.fnContext = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnOptions = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.fnScopeId = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.key = data &amp;&amp; data.key</span><br><span class="line">    <span class="keyword">this</span>.componentOptions = componentOptions</span><br><span class="line">    <span class="keyword">this</span>.componentInstance = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.raw = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isStatic = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isRootInsert = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.isComment = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isCloned = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.isOnce = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.asyncFactory = asyncFactory</span><br><span class="line">    <span class="keyword">this</span>.asyncMeta = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">this</span>.isAsyncPlaceholder = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回该组件实例</span></span><br><span class="line">  <span class="keyword">get</span> child (): Component | void &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.componentInstance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个注释节点 并返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createEmptyVNode = <span class="function">(<span class="params">text: string = <span class="string">''</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> VNode()</span><br><span class="line">  node.text = text</span><br><span class="line">  node.isComment = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个文本节点并返回</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createTextVNode</span> (<span class="params">val: string | number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> VNode(<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="built_in">String</span>(val))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要用于静态节点和插槽节点, 操作它们真实DOM(elm)时 可能会出现错误</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cloneVNode</span> (<span class="params">vnode: VNode</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cloned = <span class="keyword">new</span> VNode(</span><br><span class="line">    vnode.tag,</span><br><span class="line">    vnode.data,</span><br><span class="line">    vnode.children &amp;&amp; vnode.children.slice(), <span class="comment">// 存在则浅克隆一份children</span></span><br><span class="line">    vnode.text,</span><br><span class="line">    vnode.elm,</span><br><span class="line">    vnode.context,</span><br><span class="line">    vnode.componentOptions,</span><br><span class="line">    vnode.asyncFactory</span><br><span class="line">  )</span><br><span class="line">  cloned.ns = vnode.ns</span><br><span class="line">  cloned.isStatic = vnode.isStatic</span><br><span class="line">  cloned.key = vnode.key</span><br><span class="line">  cloned.isComment = vnode.isComment</span><br><span class="line">  cloned.fnContext = vnode.fnContext</span><br><span class="line">  cloned.fnOptions = vnode.fnOptions</span><br><span class="line">  cloned.fnScopeId = vnode.fnScopeId</span><br><span class="line">  cloned.asyncMeta = vnode.asyncMeta</span><br><span class="line">  cloned.isCloned = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> cloned</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="patch-js"><a href="#patch-js" class="headerlink" title="patch.js"></a>patch.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VNode, &#123; cloneVNode &#125; <span class="keyword">from</span> <span class="string">'./vnode'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'../config'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SSR_ATTR &#125; <span class="keyword">from</span> <span class="string">'shared/constants'</span></span><br><span class="line"><span class="keyword">import</span> &#123; registerRef &#125; <span class="keyword">from</span> <span class="string">'./modules/ref'</span></span><br><span class="line"><span class="keyword">import</span> &#123; traverse &#125; <span class="keyword">from</span> <span class="string">'../observer/traverse'</span></span><br><span class="line"><span class="keyword">import</span> &#123; activeInstance &#125; <span class="keyword">from</span> <span class="string">'../instance/lifecycle'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isTextInputType &#125; <span class="keyword">from</span> <span class="string">'web/util/element'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  warn, <span class="comment">// 警告方法</span></span><br><span class="line">  isDef, <span class="comment">// 不是undefined 或者 null</span></span><br><span class="line">  isUndef, <span class="comment">// 是undefined 或者 null</span></span><br><span class="line">  isTrue, <span class="comment">// 为true</span></span><br><span class="line">  makeMap, <span class="comment">// 返回一个方法 传入一个字符串 存在返回tru</span></span><br><span class="line">  isRegExp, <span class="comment">// 是否是正则对象</span></span><br><span class="line">  isPrimitive <span class="comment">// 是否是number/ symbol / string / boolean</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> emptyNode = <span class="keyword">new</span> VNode(<span class="string">''</span>, &#123;&#125;, []) <span class="comment">// 空节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hooks = [<span class="string">'create'</span>, <span class="string">'activate'</span>, <span class="string">'update'</span>, <span class="string">'remove'</span>, <span class="string">'destroy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是不是相同的虚拟node</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// key是否相同</span></span><br><span class="line">    a.key === b.key &amp;&amp; (</span><br><span class="line">      <span class="comment">// 相同标签, 是否是注释, 是否定义data, 是否都是相同的input type</span></span><br><span class="line">      (</span><br><span class="line">        a.tag === b.tag &amp;&amp;</span><br><span class="line">        a.isComment === b.isComment &amp;&amp;</span><br><span class="line">        isDef(a.data) === isDef(b.data) &amp;&amp;</span><br><span class="line">        sameInputType(a, b)</span><br><span class="line">      ) || (</span><br><span class="line">        isTrue(a.isAsyncPlaceholder) &amp;&amp;</span><br><span class="line">        a.asyncFactory === b.asyncFactory &amp;&amp;</span><br><span class="line">        isUndef(b.asyncFactory.error)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是相同的input 的type</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameInputType</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.tag !== <span class="string">'input'</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> typeA = isDef(i = a.data) &amp;&amp; isDef(i = i.attrs) &amp;&amp; i.type</span><br><span class="line">  <span class="keyword">const</span> typeB = isDef(i = b.data) &amp;&amp; isDef(i = i.attrs) &amp;&amp; i.type</span><br><span class="line">  <span class="keyword">return</span> typeA === typeB || isTextInputType(typeA) &amp;&amp; isTextInputType(typeB)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个key的map对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createKeyToOldIdx</span> (<span class="params">children, beginIdx, endIdx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, key</span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (i = beginIdx; i &lt;= endIdx; ++i) &#123;</span><br><span class="line">    key = children[i].key</span><br><span class="line">    <span class="keyword">if</span> (isDef(key)) map[key] = i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的也是一个patch函数 patch函数返回的是一个vnode</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createPatchFunction</span> (<span class="params">backend</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, j</span><br><span class="line">  <span class="keyword">const</span> cbs = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; modules, nodeOps &#125; = backend</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hooks.length; ++i) &#123; <span class="comment">// hooks 就是 每个模块中的钩子 当然有的模块有 有的模块没有</span></span><br><span class="line">    cbs[hooks[i]] = [] <span class="comment">// =&gt; cbs: &#123; create: [], activate: [],  update: [], remove: [], destroy: []&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; modules.length; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(modules[j][hooks[i]])) &#123; <span class="comment">// 如果这个模块中有这个钩子 就push进去 </span></span><br><span class="line">        cbs[hooks[i]].push(modules[j][hooks[i]]) <span class="comment">// =&gt; cbs: &#123; create: [fn1, fn2], activate: [fn3, fn6],  update: [fn5], remove: [fn4], destroy: [fn7]&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个指向真实DOM的vnode</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">emptyNodeAt</span> (<span class="params">elm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VNode(nodeOps.tagName(elm).toLowerCase(), &#123;&#125;, [], <span class="literal">undefined</span>, elm)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建删除节点作为回调的方法 这里的优化同snabbdom里面 都是只有在listener置为0之后 执行一次removeNode</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createRmCb</span> (<span class="params">childElm, listeners</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">remove</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (--remove.listeners === <span class="number">0</span>) &#123;</span><br><span class="line">        removeNode(childElm)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    remove.listeners = listeners</span><br><span class="line">    <span class="keyword">return</span> remove</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建删除节点的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeNode</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> parent = nodeOps.parentNode(el)</span><br><span class="line">    <span class="keyword">if</span> (isDef(parent)) &#123;</span><br><span class="line">      nodeOps.removeChild(parent, el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isUnknownElement</span> (<span class="params">vnode, inVPre</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      !inVPre &amp;&amp;</span><br><span class="line">      !vnode.ns &amp;&amp;</span><br><span class="line">      !(</span><br><span class="line">        config.ignoredElements.length &amp;&amp;</span><br><span class="line">        config.ignoredElements.some(<span class="function"><span class="params">ignore</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> isRegExp(ignore)</span><br><span class="line">            ? ignore.test(vnode.tag)</span><br><span class="line">            : ignore === vnode.tag</span><br><span class="line">        &#125;)</span><br><span class="line">      ) &amp;&amp;</span><br><span class="line">      config.isUnknownElement(vnode.tag)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> creatingElmInVPre = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createElm</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    vnode,</span></span></span><br><span class="line"><span class="function"><span class="params">    insertedVnodeQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">    parentElm,</span></span></span><br><span class="line"><span class="function"><span class="params">    refElm,</span></span></span><br><span class="line"><span class="function"><span class="params">    nested,</span></span></span><br><span class="line"><span class="function"><span class="params">    ownerArray,</span></span></span><br><span class="line"><span class="function"><span class="params">    index</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(vnode.elm) &amp;&amp; isDef(ownerArray)) &#123; <span class="comment">// 如果传入的vnode 有真实dom信息</span></span><br><span class="line">      vnode = ownerArray[index] = cloneVNode(vnode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vnode.isRootInsert = !nested <span class="comment">// for transition enter check</span></span><br><span class="line">    <span class="keyword">if</span> (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = vnode.data <span class="comment">// 拿到vnode的data</span></span><br><span class="line">    <span class="keyword">const</span> children = vnode.children <span class="comment">// 拿到vnode所有子节点</span></span><br><span class="line">    <span class="keyword">const</span> tag = vnode.tag <span class="comment">// 拿到vnode的tag</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(tag)) &#123; <span class="comment">// tag是否定义</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; data.pre) &#123;</span><br><span class="line">          creatingElmInVPre++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isUnknownElement(vnode, creatingElmInVPre)) &#123;</span><br><span class="line">          warn(</span><br><span class="line">            <span class="string">'Unknown custom element: &lt;'</span> + tag + <span class="string">'&gt; - did you '</span> +</span><br><span class="line">            <span class="string">'register the component correctly? For recursive components, '</span> +</span><br><span class="line">            <span class="string">'make sure to provide the "name" option.'</span>,</span><br><span class="line">            vnode.context</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果vnode 中包含命名空间 则调用 创建有命名空间元素的那个方法 否则就是创建一般元素的方法 这里的创建就是创建真实的dom 让vnode.elm指向真实的dom</span></span><br><span class="line">      vnode.elm = vnode.ns</span><br><span class="line">        ? nodeOps.createElementNS(vnode.ns, tag)</span><br><span class="line">        : nodeOps.createElement(tag, vnode)</span><br><span class="line">      setScope(vnode)</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="keyword">if</span> (__WEEX__) &#123;</span><br><span class="line">        <span class="comment">// in Weex, the default insertion order is parent-first.</span></span><br><span class="line">        <span class="comment">// List items can be optimized to use children-first insertion</span></span><br><span class="line">        <span class="comment">// with append="tree".</span></span><br><span class="line">        <span class="keyword">const</span> appendAsTree = isDef(data) &amp;&amp; isTrue(data.appendAsTree)</span><br><span class="line">        <span class="keyword">if</span> (!appendAsTree) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">            invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">          &#125;</span><br><span class="line">          insert(parentElm, vnode.elm, refElm)</span><br><span class="line">        &#125;</span><br><span class="line">        createChildren(vnode, children, insertedVnodeQueue)</span><br><span class="line">        <span class="keyword">if</span> (appendAsTree) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">            invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">          &#125;</span><br><span class="line">          insert(parentElm, vnode.elm, refElm)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createChildren(vnode, children, insertedVnodeQueue) <span class="comment">// 创建子节点</span></span><br><span class="line">        <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">          invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">        &#125;</span><br><span class="line">        insert(parentElm, vnode.elm, refElm) <span class="comment">// 插入将新vnode 插入到旧vnode 对应的真实dom里面</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; data &amp;&amp; data.pre) &#123;</span><br><span class="line">        creatingElmInVPre--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isTrue(vnode.isComment)) &#123; <span class="comment">// 没有定义tag 判断是不是注释节点</span></span><br><span class="line">      vnode.elm = nodeOps.createComment(vnode.text) <span class="comment">// 创建注释节点</span></span><br><span class="line">      insert(parentElm, vnode.elm, refElm)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则就是文本节点</span></span><br><span class="line">      vnode.elm = nodeOps.createTextNode(vnode.text)<span class="comment">// 创建文本节点</span></span><br><span class="line">      insert(parentElm, vnode.elm, refElm)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createComponent</span> (<span class="params">vnode, insertedVnodeQueue, parentElm, refElm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = vnode.data </span><br><span class="line">    <span class="keyword">if</span> (isDef(i)) &#123; <span class="comment">//判断有无data</span></span><br><span class="line">      <span class="keyword">const</span> isReactivated = isDef(vnode.componentInstance) &amp;&amp; i.keepAlive <span class="comment">// keepAlive逻辑</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(i = i.hook) &amp;&amp; isDef(i = i.init)) &#123; <span class="comment">// 判断有无hook 如果有 =&gt;判断有无init 有则执行init方法 init方法 在createComponent 中的installComponentHooks已经放进去了</span></span><br><span class="line">        i(vnode, <span class="literal">false</span> <span class="comment">/* hydrating */</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 有组件的实例</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(vnode.componentInstance)) &#123;</span><br><span class="line">        initComponent(vnode, insertedVnodeQueue)</span><br><span class="line">        insert(parentElm, vnode.elm, refElm)</span><br><span class="line">        <span class="keyword">if</span> (isTrue(isReactivated)) &#123;</span><br><span class="line">          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initComponent</span> (<span class="params">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(vnode.data.pendingInsert)) &#123;</span><br><span class="line">      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert)</span><br><span class="line">      vnode.data.pendingInsert = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    vnode.elm = vnode.componentInstance.$el</span><br><span class="line">    <span class="keyword">if</span> (isPatchable(vnode)) &#123;</span><br><span class="line">      invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">      setScope(vnode)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// empty component root.</span></span><br><span class="line">      <span class="comment">// skip all element-related modules except for ref (#3455)</span></span><br><span class="line">      registerRef(vnode)</span><br><span class="line">      <span class="comment">// make sure to invoke the insert hook</span></span><br><span class="line">      insertedVnodeQueue.push(vnode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reactivateComponent</span> (<span class="params">vnode, insertedVnodeQueue, parentElm, refElm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="comment">// hack for #4339: a reactivated component with inner transition</span></span><br><span class="line">    <span class="comment">// does not trigger because the inner node's created hooks are not called</span></span><br><span class="line">    <span class="comment">// again. It's not ideal to involve module-specific logic in here but</span></span><br><span class="line">    <span class="comment">// there doesn't seem to be a better way to do it.</span></span><br><span class="line">    <span class="keyword">let</span> innerNode = vnode</span><br><span class="line">    <span class="keyword">while</span> (innerNode.componentInstance) &#123;</span><br><span class="line">      innerNode = innerNode.componentInstance._vnode</span><br><span class="line">      <span class="keyword">if</span> (isDef(i = innerNode.data) &amp;&amp; isDef(i = i.transition)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.activate.length; ++i) &#123;</span><br><span class="line">          cbs.activate[i](emptyNode, innerNode)</span><br><span class="line">        &#125;</span><br><span class="line">        insertedVnodeQueue.push(innerNode)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// unlike a newly created component,</span></span><br><span class="line">    <span class="comment">// a reactivated keep-alive component doesn't insert itself</span></span><br><span class="line">    insert(parentElm, vnode.elm, refElm)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">insert</span> (<span class="params">parent, elm, ref</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(parent)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(ref)) &#123; <span class="comment">// 如果ref存在</span></span><br><span class="line">        <span class="keyword">if</span> (nodeOps.parentNode(ref) === parent) &#123; <span class="comment">// 且ref的父节点 等于传入的父节点 </span></span><br><span class="line">          nodeOps.insertBefore(parent, elm, ref) <span class="comment">// 就把新的vnode对应的真实dom插入到这个节点前面</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nodeOps.appendChild(parent, elm) <span class="comment">//直接插入在真实dom后面</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createChildren</span> (<span class="params">vnode, children, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children)) &#123; <span class="comment">// 如果是数组 说明有子节点 不是 说明是文本节点</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        checkDuplicateKeys(children) <span class="comment">// 对key的校验</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; ++i) &#123; <span class="comment">// 插入到vnode的真实dom里面</span></span><br><span class="line">        createElm(children[i], insertedVnodeQueue, vnode.elm, <span class="literal">null</span>, <span class="literal">true</span>, children, i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPrimitive(vnode.text)) &#123; <span class="comment">// vnode de text 和 children只能由一个 !!!</span></span><br><span class="line">      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(<span class="built_in">String</span>(vnode.text))) <span class="comment">// 直接将文本节点插入</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPatchable</span> (<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (vnode.componentInstance) &#123;</span><br><span class="line">      vnode = vnode.componentInstance._vnode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isDef(vnode.tag)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">invokeCreateHooks</span> (<span class="params">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">      cbs.create[i](emptyNode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">    i = vnode.data.hook <span class="comment">// Reuse variable</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(i.create)) i.create(emptyNode, vnode)</span><br><span class="line">      <span class="keyword">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set scope id attribute for scoped CSS.</span></span><br><span class="line">  <span class="comment">// this is implemented as a special case to avoid the overhead</span></span><br><span class="line">  <span class="comment">// of going through the normal attribute patching process.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setScope</span> (<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="keyword">if</span> (isDef(i = vnode.fnScopeId)) &#123;</span><br><span class="line">      nodeOps.setStyleScope(vnode.elm, i)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ancestor = vnode</span><br><span class="line">      <span class="keyword">while</span> (ancestor) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDef(i = ancestor.context) &amp;&amp; isDef(i = i.$options._scopeId)) &#123;</span><br><span class="line">          nodeOps.setStyleScope(vnode.elm, i)</span><br><span class="line">        &#125;</span><br><span class="line">        ancestor = ancestor.parent</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for slot content they should also get the scopeId from the host instance.</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i = activeInstance) &amp;&amp;</span><br><span class="line">      i !== vnode.context &amp;&amp;</span><br><span class="line">      i !== vnode.fnContext &amp;&amp;</span><br><span class="line">      isDef(i = i.$options._scopeId)</span><br><span class="line">    ) &#123;</span><br><span class="line">      nodeOps.setStyleScope(vnode.elm, i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addVnodes</span> (<span class="params">parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, <span class="literal">false</span>, vnodes, startIdx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">invokeDestroyHook</span> (<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i, j</span><br><span class="line">    <span class="keyword">const</span> data = vnode.data <span class="comment">// 拿到data</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) &#123; <span class="comment">//data存在</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.destroy)) i(vnode) <span class="comment">// 如果data中有用户自定义的hook 如果hook中有用户自定义的destroy钩子 执行用户的钩子</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) cbs.destroy[i](vnode) <span class="comment">// 执行模块中的钩子</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i = vnode.children)) &#123; <span class="comment">// 如果存在子节点</span></span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vnode.children.length; ++j) &#123;</span><br><span class="line">        invokeDestroyHook(vnode.children[j]) <span class="comment">// 递归</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeVnodes</span> (<span class="params">vnodes, startIdx, endIdx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">      <span class="keyword">const</span> ch = vnodes[startIdx]</span><br><span class="line">      <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDef(ch.tag)) &#123;</span><br><span class="line">          removeAndInvokeRemoveHook(ch)</span><br><span class="line">          invokeDestroyHook(ch)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Text node</span></span><br><span class="line">          removeNode(ch.elm)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeAndInvokeRemoveHook</span> (<span class="params">vnode, rm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(rm) || isDef(vnode.data)) &#123;</span><br><span class="line">      <span class="keyword">let</span> i</span><br><span class="line">      <span class="keyword">const</span> listeners = cbs.remove.length + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(rm)) &#123;</span><br><span class="line">        <span class="comment">// we have a recursively passed down rm callback</span></span><br><span class="line">        <span class="comment">// increase the listeners count</span></span><br><span class="line">        rm.listeners += listeners</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// directly removing</span></span><br><span class="line">        rm = createRmCb(vnode.elm, listeners)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// recursively invoke hooks on child component root node</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(i = vnode.componentInstance) &amp;&amp; isDef(i = i._vnode) &amp;&amp; isDef(i.data)) &#123;</span><br><span class="line">        removeAndInvokeRemoveHook(i, rm)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.remove.length; ++i) &#123;</span><br><span class="line">        cbs.remove[i](vnode, rm)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isDef(i = vnode.data.hook) &amp;&amp; isDef(i = i.remove)) &#123;</span><br><span class="line">        i(vnode, rm)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rm()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      removeNode(vnode.elm)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oldStartIdx = <span class="number">0</span> <span class="comment">//oldChildren开始索引</span></span><br><span class="line">    <span class="keyword">let</span> newStartIdx = <span class="number">0</span> <span class="comment">// newChildren 开始索引</span></span><br><span class="line">    <span class="keyword">let</span> oldEndIdx = oldCh.length - <span class="number">1</span> <span class="comment">// oldChildren 结束索引</span></span><br><span class="line">    <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>] <span class="comment">// oldChildren中所有未处理节点中的第一个</span></span><br><span class="line">    <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx] <span class="comment">// oldChildren中所有未处理节点中的最后一个</span></span><br><span class="line">    <span class="keyword">let</span> newEndIdx = newCh.length - <span class="number">1</span> <span class="comment">// newChildren结束索引</span></span><br><span class="line">    <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>] <span class="comment">// newChildren中所有未处理节点中的第一个</span></span><br><span class="line">    <span class="keyword">let</span> newEndVnode = newCh[newEndIdx] <span class="comment">// newChildren中所有未处理节点中的最后一个</span></span><br><span class="line">    <span class="keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class="line"></span><br><span class="line">    <span class="comment">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span><br><span class="line">    <span class="comment">// to ensure removed elements stay in correct relative positions</span></span><br><span class="line">    <span class="comment">// during leaving transitions</span></span><br><span class="line">    <span class="keyword">const</span> canMove = !removeOnly</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      checkDuplicateKeys(newCh) <span class="comment">// 检验key是否重复</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isUndef(oldStartVnode)) &#123; <span class="comment">// 如果不存在开始的 则右移 </span></span><br><span class="line">        oldStartVnode = oldCh[++oldStartIdx] <span class="comment">// Vnode has been moved left</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUndef(oldEndVnode)) &#123; <span class="comment">// 如果不存在结束的 则左移</span></span><br><span class="line">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123; <span class="comment">// 判断旧开始与新开始是否是相同的vnode</span></span><br><span class="line">        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class="line">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">        newStartVnode = newCh[++newStartIdx]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class="line">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">        newEndVnode = newCh[--newEndIdx]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class="line">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class="line">        oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">        newEndVnode = newCh[--newEndIdx]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class="line">        canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class="line">        oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">        newStartVnode = newCh[++newStartIdx]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">        idxInOld = isDef(newStartVnode.key)</span><br><span class="line">          ? oldKeyToIdx[newStartVnode.key]</span><br><span class="line">          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">        <span class="keyword">if</span> (isUndef(idxInOld)) &#123; <span class="comment">// New element</span></span><br><span class="line">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          vnodeToMove = oldCh[idxInOld]</span><br><span class="line">          <span class="keyword">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class="line">            oldCh[idxInOld] = <span class="literal">undefined</span></span><br><span class="line">            canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// same key but different element. treat as new element</span></span><br><span class="line">            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        newStartVnode = newCh[++newStartIdx]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">      refElm = isUndef(newCh[newEndIdx + <span class="number">1</span>]) ? <span class="literal">null</span> : newCh[newEndIdx + <span class="number">1</span>].elm</span><br><span class="line">      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class="line">      removeVnodes(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkDuplicateKeys</span> (<span class="params">children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> seenKeys = &#123;&#125; <span class="comment">// 存在的key所对应的值是true 如果后面的key重复 就会报错!!!</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> vnode = children[i]</span><br><span class="line">      <span class="keyword">const</span> key = vnode.key</span><br><span class="line">      <span class="keyword">if</span> (isDef(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (seenKeys[key]) &#123;</span><br><span class="line">          warn(</span><br><span class="line">            <span class="string">`Duplicate keys detected: '<span class="subst">$&#123;key&#125;</span>'. This may cause an update error.`</span>,</span><br><span class="line">            vnode.context</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          seenKeys[key] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findIdxInOld</span> (<span class="params">node, oldCh, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> c = oldCh[i]</span><br><span class="line">      <span class="keyword">if</span> (isDef(c) &amp;&amp; sameVnode(node, c)) <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    oldVnode,</span></span></span><br><span class="line"><span class="function"><span class="params">    vnode,</span></span></span><br><span class="line"><span class="function"><span class="params">    insertedVnodeQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">    ownerArray,</span></span></span><br><span class="line"><span class="function"><span class="params">    index,</span></span></span><br><span class="line"><span class="function"><span class="params">    removeOnly</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oldVnode === vnode) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDef(vnode.elm) &amp;&amp; isDef(ownerArray)) &#123;</span><br><span class="line">      <span class="comment">// clone reused vnode</span></span><br><span class="line">      vnode = ownerArray[index] = cloneVNode(vnode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> elm = vnode.elm = oldVnode.elm</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isTrue(oldVnode.isAsyncPlaceholder)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(vnode.asyncFactory.resolved)) &#123;</span><br><span class="line">        hydrate(oldVnode.elm, vnode, insertedVnodeQueue)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vnode.isAsyncPlaceholder = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isTrue(vnode.isStatic) &amp;&amp;</span><br><span class="line">      isTrue(oldVnode.isStatic) &amp;&amp;</span><br><span class="line">      vnode.key === oldVnode.key &amp;&amp;</span><br><span class="line">      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))</span><br><span class="line">    ) &#123;</span><br><span class="line">      vnode.componentInstance = oldVnode.componentInstance</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="keyword">const</span> data = vnode.data</span><br><span class="line">    <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(i = data.hook) &amp;&amp; isDef(i = i.prepatch)) &#123;</span><br><span class="line">      i(oldVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> oldCh = oldVnode.children</span><br><span class="line">    <span class="keyword">const</span> ch = vnode.children</span><br><span class="line">    <span class="keyword">if</span> (isDef(data) &amp;&amp; isPatchable(vnode)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)</span><br><span class="line">      <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.update)) i(oldVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          checkDuplicateKeys(ch)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">        addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">        removeVnodes(oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">        nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">      nodeOps.setTextContent(elm, vnode.text)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.postpatch)) i(oldVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">invokeInsertHook</span> (<span class="params">vnode, queue, initial</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class="line">    <span class="comment">// element is really inserted</span></span><br><span class="line">    <span class="keyword">if</span> (isTrue(initial) &amp;&amp; isDef(vnode.parent)) &#123;</span><br><span class="line">      vnode.parent.data.pendingInsert = queue</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.length; ++i) &#123;</span><br><span class="line">        queue[i].data.hook.insert(queue[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hydrationBailed = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// list of modules that can skip create hook during hydration because they</span></span><br><span class="line">  <span class="comment">// are already rendered on the client or has no need for initialization</span></span><br><span class="line">  <span class="comment">// Note: style is excluded because it relies on initial clone for future</span></span><br><span class="line">  <span class="comment">// deep updates (#7063).</span></span><br><span class="line">  <span class="keyword">const</span> isRenderedModule = makeMap(<span class="string">'attrs,class,staticClass,staticStyle,key'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Note: this is a browser-only function so we can assume elms are DOM nodes.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hydrate</span> (<span class="params">elm, vnode, insertedVnodeQueue, inVPre</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="keyword">const</span> &#123; tag, data, children &#125; = vnode</span><br><span class="line">    inVPre = inVPre || (data &amp;&amp; data.pre)</span><br><span class="line">    vnode.elm = elm</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isTrue(vnode.isComment) &amp;&amp; isDef(vnode.asyncFactory)) &#123;</span><br><span class="line">      vnode.isAsyncPlaceholder = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// assert node match</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!assertNodeMatch(elm, vnode, inVPre)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.init)) i(vnode, <span class="literal">true</span> <span class="comment">/* hydrating */</span>)</span><br><span class="line">      <span class="keyword">if</span> (isDef(i = vnode.componentInstance)) &#123;</span><br><span class="line">        <span class="comment">// child component. it should have hydrated its own tree.</span></span><br><span class="line">        initComponent(vnode, insertedVnodeQueue)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isDef(tag)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(children)) &#123;</span><br><span class="line">        <span class="comment">// empty element, allow client to pick up and populate children</span></span><br><span class="line">        <span class="keyword">if</span> (!elm.hasChildNodes()) &#123;</span><br><span class="line">          createChildren(vnode, children, insertedVnodeQueue)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// v-html and domProps: innerHTML</span></span><br><span class="line">          <span class="keyword">if</span> (isDef(i = data) &amp;&amp; isDef(i = i.domProps) &amp;&amp; isDef(i = i.innerHTML)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i !== elm.innerHTML) &#123;</span><br><span class="line">              <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">              <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> <span class="built_in">console</span> !== <span class="string">'undefined'</span> &amp;&amp;</span><br><span class="line">                !hydrationBailed</span><br><span class="line">              ) &#123;</span><br><span class="line">                hydrationBailed = <span class="literal">true</span></span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">'Parent: '</span>, elm)</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">'server innerHTML: '</span>, i)</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">'client innerHTML: '</span>, elm.innerHTML)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// iterate and compare children lists</span></span><br><span class="line">            <span class="keyword">let</span> childrenMatch = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">let</span> childNode = elm.firstChild</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (!childNode || !hydrate(childNode, children[i], insertedVnodeQueue, inVPre)) &#123;</span><br><span class="line">                childrenMatch = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">              &#125;</span><br><span class="line">              childNode = childNode.nextSibling</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// if childNode is not null, it means the actual childNodes list is</span></span><br><span class="line">            <span class="comment">// longer than the virtual children list.</span></span><br><span class="line">            <span class="keyword">if</span> (!childrenMatch || childNode) &#123;</span><br><span class="line">              <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">              <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> <span class="built_in">console</span> !== <span class="string">'undefined'</span> &amp;&amp;</span><br><span class="line">                !hydrationBailed</span><br><span class="line">              ) &#123;</span><br><span class="line">                hydrationBailed = <span class="literal">true</span></span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">'Parent: '</span>, elm)</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">'Mismatching childNodes vs. VNodes: '</span>, elm.childNodes, children)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">        <span class="keyword">let</span> fullInvoke = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isRenderedModule(key)) &#123;</span><br><span class="line">            fullInvoke = <span class="literal">true</span></span><br><span class="line">            invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fullInvoke &amp;&amp; data[<span class="string">'class'</span>]) &#123;</span><br><span class="line">          <span class="comment">// ensure collecting deps for deep class bindings for future updates</span></span><br><span class="line">          traverse(data[<span class="string">'class'</span>])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elm.data !== vnode.text) &#123;</span><br><span class="line">      elm.data = vnode.text</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assertNodeMatch</span> (<span class="params">node, vnode, inVPre</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(vnode.tag)) &#123;</span><br><span class="line">      <span class="keyword">return</span> vnode.tag.indexOf(<span class="string">'vue-component'</span>) === <span class="number">0</span> || (</span><br><span class="line">        !isUnknownElement(vnode, inVPre) &amp;&amp;</span><br><span class="line">        vnode.tag.toLowerCase() === (node.tagName &amp;&amp; node.tagName.toLowerCase())</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> node.nodeType === (vnode.isComment ? <span class="number">8</span> : <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123; <span class="comment">// 旧vnode/真实dom  新vnode </span></span><br><span class="line">    <span class="keyword">if</span> (isUndef(vnode)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isInitialPatch = <span class="literal">false</span> <span class="comment">// </span></span><br><span class="line">    <span class="keyword">const</span> insertedVnodeQueue = [] <span class="comment">// 如果有insert钩子 会进这个队列 方便后面 直接调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isUndef(oldVnode)) &#123;</span><br><span class="line">      <span class="comment">// empty mount (likely as component), create new root element</span></span><br><span class="line">      isInitialPatch = <span class="literal">true</span></span><br><span class="line">      createElm(vnode, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isRealElement = isDef(oldVnode.nodeType) <span class="comment">// 判断是不是真实dom</span></span><br><span class="line">      <span class="keyword">if</span> (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">        <span class="comment">// patch existing root node</span></span><br><span class="line">        patchVnode(oldVnode, vnode, insertedVnodeQueue, <span class="literal">null</span>, <span class="literal">null</span>, removeOnly)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRealElement) &#123;</span><br><span class="line">          <span class="comment">// mounting to a real element</span></span><br><span class="line">          <span class="comment">// check if this is server-rendered content and if we can perform</span></span><br><span class="line">          <span class="comment">// a successful hydration.</span></span><br><span class="line">          <span class="keyword">if</span> (oldVnode.nodeType === <span class="number">1</span> &amp;&amp; oldVnode.hasAttribute(SSR_ATTR)) &#123;</span><br><span class="line">            oldVnode.removeAttribute(SSR_ATTR)</span><br><span class="line">            hydrating = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (isTrue(hydrating)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hydrate(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class="line">              invokeInsertHook(vnode, insertedVnodeQueue, <span class="literal">true</span>)</span><br><span class="line">              <span class="keyword">return</span> oldVnode</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">              warn(</span><br><span class="line">                <span class="string">'The client-side rendered virtual DOM tree is not matching '</span> +</span><br><span class="line">                <span class="string">'server-rendered content. This is likely caused by incorrect '</span> +</span><br><span class="line">                <span class="string">'HTML markup, for example nesting block-level elements inside '</span> +</span><br><span class="line">                <span class="string">'&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing '</span> +</span><br><span class="line">                <span class="string">'full client-side render.'</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// either not server-rendered, or hydration failed.</span></span><br><span class="line">          <span class="comment">// create an empty node and replace it</span></span><br><span class="line">          oldVnode = emptyNodeAt(oldVnode) <span class="comment">// 将真实dom转换成一个虚拟dom</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// replacing existing element</span></span><br><span class="line">        <span class="keyword">const</span> oldElm = oldVnode.elm <span class="comment">// 获取真实dom</span></span><br><span class="line">        <span class="keyword">const</span> parentElm = nodeOps.parentNode(oldElm) <span class="comment">// 在父元素上挂载</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// create new node</span></span><br><span class="line">        createElm(</span><br><span class="line">          vnode, <span class="comment">// 需要patch的vnode </span></span><br><span class="line">          insertedVnodeQueue, <span class="comment">// insert钩子的node 队列</span></span><br><span class="line">          <span class="comment">// extremely rare edge case: do not insert if old element is in a</span></span><br><span class="line">          <span class="comment">// leaving transition. Only happens when combining transition +</span></span><br><span class="line">          <span class="comment">// keep-alive + HOCs. (#4590)</span></span><br><span class="line">          oldElm._leaveCb ? <span class="literal">null</span> : parentElm, <span class="comment">// 如果没有_leaveCb 就是真实dom的父节点</span></span><br><span class="line">          nodeOps.nextSibling(oldElm) <span class="comment">// 真实dom的 下一个兄弟节点 插入vnode的位置</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// update parent placeholder node element, recursively</span></span><br><span class="line">        <span class="keyword">if</span> (isDef(vnode.parent)) &#123;</span><br><span class="line">          <span class="keyword">let</span> ancestor = vnode.parent</span><br><span class="line">          <span class="keyword">const</span> patchable = isPatchable(vnode)</span><br><span class="line">          <span class="keyword">while</span> (ancestor) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) &#123;</span><br><span class="line">              cbs.destroy[i](ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor.elm = vnode.elm</span><br><span class="line">            <span class="keyword">if</span> (patchable) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">                cbs.create[i](emptyNode, ancestor)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// #6513</span></span><br><span class="line">              <span class="comment">// invoke insert hooks that may have been merged by create hooks.</span></span><br><span class="line">              <span class="comment">// e.g. for directives that uses the "inserted" hook.</span></span><br><span class="line">              <span class="keyword">const</span> insert = ancestor.data.hook.insert</span><br><span class="line">              <span class="keyword">if</span> (insert.merged) &#123;</span><br><span class="line">                <span class="comment">// start at index 1 to avoid re-invoking component mounted hook</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; insert.fns.length; i++) &#123;</span><br><span class="line">                  insert.fns[i]()</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              registerRef(ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            ancestor = ancestor.parent</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// destroy old node</span></span><br><span class="line">        <span class="keyword">if</span> (isDef(parentElm)) &#123; <span class="comment">// 如果存在</span></span><br><span class="line">          removeVnodes([oldVnode], <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 移出掉旧的vnode对应的真实dom</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.tag)) &#123; <span class="comment">// 如果存在tag 说明不是文本和注释节点</span></span><br><span class="line">          invokeDestroyHook(oldVnode) <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">    <span class="keyword">return</span> vnode.elm</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      继读完snabbdom源码之后首次开始vue源码的vnode
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>snabbdom源码解读</title>
    <link href="http://blog.decade.run/2020/07/07/snabbdom04/"/>
    <id>http://blog.decade.run/2020/07/07/snabbdom04/</id>
    <published>2020-07-06T16:30:10.000Z</published>
    <updated>2020-08-19T05:56:14.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="htmldomapi-ts"><a href="#htmldomapi-ts" class="headerlink" title="htmldomapi.ts"></a>htmldomapi.ts</h3><p>这个文件里面的是dom操作的api</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> DOMAPI &#123;</span><br><span class="line">  createElement: <span class="function">(<span class="params">tagName: <span class="built_in">any</span></span>) =&gt;</span> HTMLElement</span><br><span class="line">  createElementNS: <span class="function">(<span class="params">namespaceURI: <span class="built_in">string</span>, qualifiedName: <span class="built_in">string</span></span>) =&gt;</span> Element</span><br><span class="line">  createTextNode: <span class="function">(<span class="params">text: <span class="built_in">string</span></span>) =&gt;</span> Text</span><br><span class="line">  createComment: <span class="function">(<span class="params">text: <span class="built_in">string</span></span>) =&gt;</span> Comment</span><br><span class="line">  insertBefore: <span class="function">(<span class="params">parentNode: Node, newNode: Node, referenceNode: Node | <span class="literal">null</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  removeChild: <span class="function">(<span class="params">node: Node, child: Node</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  appendChild: <span class="function">(<span class="params">node: Node, child: Node</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  parentNode: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> Node | <span class="literal">null</span></span><br><span class="line">  nextSibling: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> Node | <span class="literal">null</span></span><br><span class="line">  tagName: <span class="function">(<span class="params">elm: Element</span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  setTextContent: <span class="function">(<span class="params">node: Node, text: <span class="built_in">string</span> | <span class="literal">null</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  getTextContent: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> <span class="built_in">string</span> | <span class="literal">null</span></span><br><span class="line">  isElement: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> node is Element</span><br><span class="line">  isText: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> node is Text</span><br><span class="line">  isComment: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> node is Comment</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span> (<span class="params">tagName: <span class="built_in">any</span></span>): <span class="title">HTMLElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createElement(tagName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个含有命名空间的元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElementNS</span> (<span class="params">namespaceURI: <span class="built_in">string</span>, qualifiedName: <span class="built_in">string</span></span>): <span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createElementNS(namespaceURI, qualifiedName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个text节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextNode</span> (<span class="params">text: <span class="built_in">string</span></span>): <span class="title">Text</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createTextNode(text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个注释节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComment</span> (<span class="params">text: <span class="built_in">string</span></span>): <span class="title">Comment</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createComment(text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入在指定节点前面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertBefore</span> (<span class="params">parentNode: Node, newNode: Node, referenceNode: Node | <span class="literal">null</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  parentNode.insertBefore(newNode, referenceNode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移出节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeChild</span> (<span class="params">node: Node, child: Node</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  node.removeChild(child)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendChild</span> (<span class="params">node: Node, child: Node</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  node.appendChild(child)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父亲节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentNode</span> (<span class="params">node: Node</span>): <span class="title">Node</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.parentNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取下一个兄弟节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextSibling</span> (<span class="params">node: Node</span>): <span class="title">Node</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.nextSibling</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取标签名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tagName</span> (<span class="params">elm: Element</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elm.tagName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置textContent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTextContent</span> (<span class="params">node: Node, text: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  node.textContent = text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取textContext</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTextContent</span> (<span class="params">node: Node</span>): <span class="title">string</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.textContent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是不是元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isElement</span> (<span class="params">node: Node</span>): <span class="title">node</span> <span class="title">is</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是不是文本节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isText</span> (<span class="params">node: Node</span>): <span class="title">node</span> <span class="title">is</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.nodeType === <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是不是注释节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isComment</span> (<span class="params">node: Node</span>): <span class="title">node</span> <span class="title">is</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.nodeType === <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> htmlDomApi: DOMAPI = &#123;</span><br><span class="line">  createElement,</span><br><span class="line">  createElementNS,</span><br><span class="line">  createTextNode,</span><br><span class="line">  createComment,</span><br><span class="line">  insertBefore,</span><br><span class="line">  removeChild,</span><br><span class="line">  appendChild,</span><br><span class="line">  parentNode,</span><br><span class="line">  nextSibling,</span><br><span class="line">  tagName,</span><br><span class="line">  setTextContent,</span><br><span class="line">  getTextContent,</span><br><span class="line">  isElement,</span><br><span class="line">  isText,</span><br><span class="line">  isComment,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="is-ts"><a href="#is-ts" class="headerlink" title="is.ts"></a>is.ts</h3><p>两个工具方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> array = <span class="built_in">Array</span>.isArray</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">primitive</span> (<span class="params">s: <span class="built_in">any</span></span>): <span class="title">s</span> <span class="title">is</span> (<span class="params"><span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> s === <span class="string">'string'</span> || <span class="keyword">typeof</span> s === <span class="string">'number'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tovnode-ts"><a href="#tovnode-ts" class="headerlink" title="tovnode.ts"></a>tovnode.ts</h3><p>原生的dom 转vnode</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; vnode, VNode &#125; <span class="keyword">from</span> <span class="string">'./vnode'</span></span><br><span class="line"><span class="keyword">import</span> &#123; htmlDomApi, DOMAPI &#125; <span class="keyword">from</span> <span class="string">'./htmldomapi'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toVNode</span> (<span class="params">node: Node, domApi?: DOMAPI</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> api: DOMAPI = domApi !== <span class="literal">undefined</span> ? domApi : htmlDomApi</span><br><span class="line">  <span class="keyword">let</span> text: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">if</span> (api.isElement(node)) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = node.id ? <span class="string">'#'</span> + node.id : <span class="string">''</span></span><br><span class="line">    <span class="keyword">const</span> cn = node.getAttribute(<span class="string">'class'</span>)</span><br><span class="line">    <span class="keyword">const</span> c = cn ? <span class="string">'.'</span> + cn.split(<span class="string">' '</span>).join(<span class="string">'.'</span>) : <span class="string">''</span></span><br><span class="line">    <span class="keyword">const</span> sel = api.tagName(node).toLowerCase() + id + c</span><br><span class="line">    <span class="keyword">const</span> attrs: <span class="built_in">any</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> children: VNode[] = []</span><br><span class="line">    <span class="keyword">let</span> name: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">let</span> i: <span class="built_in">number</span>, n: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">const</span> elmAttrs = node.attributes</span><br><span class="line">    <span class="keyword">const</span> elmChildren = node.childNodes</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, n = elmAttrs.length; i &lt; n; i++) &#123;</span><br><span class="line">      name = elmAttrs[i].nodeName</span><br><span class="line">      <span class="keyword">if</span> (name !== <span class="string">'id'</span> &amp;&amp; name !== <span class="string">'class'</span>) &#123;</span><br><span class="line">        attrs[name] = elmAttrs[i].nodeValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, n = elmChildren.length; i &lt; n; i++) &#123;</span><br><span class="line">      children.push(toVNode(elmChildren[i], domApi))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode(sel, &#123; attrs &#125;, children, <span class="literal">undefined</span>, node)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (api.isText(node)) &#123;</span><br><span class="line">    text = api.getTextContent(node) <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">return</span> vnode(<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, text, node)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (api.isComment(node)) &#123;</span><br><span class="line">    text = api.getTextContent(node) <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">return</span> vnode(<span class="string">'!'</span>, &#123;&#125;, [], text, node <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> vnode(<span class="string">''</span>, &#123;&#125;, [], <span class="literal">undefined</span>, node <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      大半夜的补博客
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="snabbdom" scheme="http://blog.decade.run/tags/snabbdom/"/>
    
  </entry>
  
  <entry>
    <title>snabbdom源码解读 modules/*</title>
    <link href="http://blog.decade.run/2020/07/06/snabbdom03/"/>
    <id>http://blog.decade.run/2020/07/06/snabbdom03/</id>
    <published>2020-07-05T16:34:30.000Z</published>
    <updated>2020-07-28T02:22:47.025Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;% note default %&gt;<br>这里补充几个自己的知识盲区</p><ol><li><p>Record  将一个类型的所有属性值都映射到另一个类型上并创造一个新的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">type</span> Record&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Partial 将一个类型中所有的属性 都变成可选</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. Required </span></span><br><span class="line"><span class="string">  `</span><span class="string">``</span>typescript 将一个类型中所有的属性 都变成必选</span><br><span class="line">  <span class="keyword">type</span> Required&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li><li><p>Readonly 将一个类型中所有的属性 都变成只读</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class="line">  readonly [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Pick </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&lt;% end note %&gt;</p></li></ol><h3 id="attrbutes-ts"><a href="#attrbutes-ts" class="headerlink" title="attrbutes.ts"></a>attrbutes.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; VNode, VNodeData &#125; <span class="keyword">from</span> <span class="string">'../vnode'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'./module'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Attrs = Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xlinkNS = <span class="string">'http://www.w3.org/1999/xlink'</span></span><br><span class="line"><span class="keyword">const</span> xmlNS = <span class="string">'http://www.w3.org/XML/1998/namespace'</span></span><br><span class="line"><span class="keyword">const</span> colonChar = <span class="number">58</span></span><br><span class="line"><span class="keyword">const</span> xChar = <span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateAttrs</span> (<span class="params">oldVnode: VNode, vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">var</span> elm: Element = vnode.elm <span class="keyword">as</span> Element</span><br><span class="line">  <span class="keyword">var</span> oldAttrs = (oldVnode.data <span class="keyword">as</span> VNodeData).attrs <span class="comment">// 旧attr</span></span><br><span class="line">  <span class="keyword">var</span> attrs = (vnode.data <span class="keyword">as</span> VNodeData).attrs <span class="comment">// 新attr</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldAttrs &amp;&amp; !attrs) <span class="keyword">return</span> <span class="comment">// 如果都不存在 则返回</span></span><br><span class="line">  <span class="keyword">if</span> (oldAttrs === attrs) <span class="keyword">return</span> <span class="comment">// 是一样的 则返回</span></span><br><span class="line">  oldAttrs = oldAttrs || &#123;&#125;</span><br><span class="line">  attrs = attrs || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update modified attributes, add new attributes</span></span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> attrs) &#123; <span class="comment">// 遍历新attrs中的key</span></span><br><span class="line">    <span class="keyword">const</span> cur = attrs[key]</span><br><span class="line">    <span class="keyword">const</span> old = oldAttrs[key]</span><br><span class="line">    <span class="keyword">if</span> (old !== cur) &#123; <span class="comment">// 两个相同键名对应的值不一样 </span></span><br><span class="line">      <span class="keyword">if</span> (cur === <span class="literal">true</span>) &#123; <span class="comment">// 属性值可以是 string | number | boolean</span></span><br><span class="line">        elm.setAttribute(key, <span class="string">''</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur === <span class="literal">false</span>) &#123;</span><br><span class="line">        elm.removeAttribute(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.charCodeAt(<span class="number">0</span>) !== xChar) &#123; <span class="comment">// svg 命名空间 xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg"</span></span><br><span class="line">          elm.setAttribute(key, cur <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.charCodeAt(<span class="number">3</span>) === colonChar) &#123; <span class="comment">//xml</span></span><br><span class="line">          elm.setAttributeNS(xmlNS, key, cur <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.charCodeAt(<span class="number">5</span>) === colonChar) &#123; <span class="comment">//xlink</span></span><br><span class="line">          elm.setAttributeNS(xlinkNS, key, cur <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          elm.setAttribute(key, cur <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// remove removed attributes</span></span><br><span class="line">  <span class="comment">// use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)</span></span><br><span class="line">  <span class="comment">// the other option is to remove all attributes with value == undefined</span></span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> oldAttrs) &#123; <span class="comment">// 将移出新attrs 中没有的</span></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> attrs)) &#123;</span><br><span class="line">      elm.removeAttribute(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> attributesModule: Module = &#123; create: updateAttrs, update: updateAttrs &#125;</span><br></pre></td></tr></table></figure><h3 id="class-ts"><a href="#class-ts" class="headerlink" title="class.ts"></a>class.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; VNode, VNodeData &#125; <span class="keyword">from</span> <span class="string">'../vnode'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'./module'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Classes = Record&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateClass</span> (<span class="params">oldVnode: VNode, vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cur: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">var</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">var</span> elm: Element = vnode.elm <span class="keyword">as</span> Element</span><br><span class="line">  <span class="keyword">var</span> oldClass = (oldVnode.data <span class="keyword">as</span> VNodeData).class</span><br><span class="line">  <span class="keyword">var</span> klass = (vnode.data <span class="keyword">as</span> VNodeData).class</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldClass &amp;&amp; !klass) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> (oldClass === klass) <span class="keyword">return</span></span><br><span class="line">  oldClass = oldClass || &#123;&#125;</span><br><span class="line">  klass = klass || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> oldClass) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      oldClass[name] &amp;&amp;</span><br><span class="line">      !<span class="built_in">Object</span>.prototype.hasOwnProperty.call(klass, name) <span class="comment">// 如果在旧中存在 在新中存在 则移出该class</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// was `true` and now not provided</span></span><br><span class="line">      elm.classList.remove(name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> klass) &#123;</span><br><span class="line">    cur = klass[name]</span><br><span class="line">    <span class="keyword">if</span> (cur !== oldClass[name]) &#123;</span><br><span class="line">      (elm.classList <span class="keyword">as</span> <span class="built_in">any</span>)[cur ? <span class="string">'add'</span> : <span class="string">'remove'</span>](name) <span class="comment">// add class</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> classModule: Module = &#123; create: updateClass, update: updateClass &#125;</span><br></pre></td></tr></table></figure><h3 id="dataset-ts"><a href="#dataset-ts" class="headerlink" title="dataset.ts"></a>dataset.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; VNode, VNodeData &#125; <span class="keyword">from</span> <span class="string">'../vnode'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'./module'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Dataset = Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CAPS_REGEX = <span class="regexp">/[A-Z]/g</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateDataset</span> (<span class="params">oldVnode: VNode, vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elm: HTMLElement = vnode.elm <span class="keyword">as</span> HTMLElement</span><br><span class="line">  <span class="keyword">let</span> oldDataset = (oldVnode.data <span class="keyword">as</span> VNodeData).dataset</span><br><span class="line">  <span class="keyword">let</span> dataset = (vnode.data <span class="keyword">as</span> VNodeData).dataset</span><br><span class="line">  <span class="keyword">let</span> key: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldDataset &amp;&amp; !dataset) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> (oldDataset === dataset) <span class="keyword">return</span></span><br><span class="line">  oldDataset = oldDataset || &#123;&#125;</span><br><span class="line">  dataset = dataset || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> d = elm.dataset</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> oldDataset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dataset[key]) &#123;<span class="comment">// 新里面没有</span></span><br><span class="line">      <span class="keyword">if</span> (d) &#123; <span class="comment">// 真实DOM中有dataset属性</span></span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> d) &#123; <span class="comment">// 如果真实DOM中dataset中存在</span></span><br><span class="line">          <span class="keyword">delete</span> d[key] <span class="comment">// 删除</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 真实DOM中没有有dataset属性</span></span><br><span class="line">        elm.removeAttribute(<span class="string">'data-'</span> + key.replace(CAPS_REGEX, <span class="string">'-$&amp;'</span>).toLowerCase()) <span class="comment">// 真实DOM移出data-xxx属性</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> dataset) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldDataset[key] !== dataset[key]) &#123; <span class="comment">// 旧不等于新</span></span><br><span class="line">      <span class="keyword">if</span> (d) &#123; <span class="comment">// 真实DOM中存在dataset</span></span><br><span class="line">        d[key] = dataset[key] <span class="comment">// 重置为新</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elm.setAttribute(<span class="string">'data-'</span> + key.replace(CAPS_REGEX, <span class="string">'-$&amp;'</span>).toLowerCase(), dataset[key]) <span class="comment">// 设置新的 data-xxx</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> datasetModule: Module = &#123; create: updateDataset, update: updateDataset &#125;</span><br></pre></td></tr></table></figure><h3 id="props-ts"><a href="#props-ts" class="headerlink" title="props.ts"></a>props.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; VNode, VNodeData &#125; <span class="keyword">from</span> <span class="string">'../vnode'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'./module'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Props = Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProps</span> (<span class="params">oldVnode: VNode, vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">var</span> cur: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">var</span> old: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">var</span> elm = vnode.elm</span><br><span class="line">  <span class="keyword">var</span> oldProps = (oldVnode.data <span class="keyword">as</span> VNodeData).props</span><br><span class="line">  <span class="keyword">var</span> props = (vnode.data <span class="keyword">as</span> VNodeData).props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldProps &amp;&amp; !props) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> (oldProps === props) <span class="keyword">return</span></span><br><span class="line">  oldProps = oldProps || &#123;&#125;</span><br><span class="line">  props = props || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> props) &#123;</span><br><span class="line">    cur = props[key]</span><br><span class="line">    old = oldProps[key]</span><br><span class="line">    <span class="keyword">if</span> (old !== cur &amp;&amp; (key !== <span class="string">'value'</span> || (elm <span class="keyword">as</span> <span class="built_in">any</span>)[key] !== cur)) &#123; <span class="comment">// 旧不等于新 &amp;&amp; (键值不为value || 真实DOM中的对应的值 不等于新值)</span></span><br><span class="line">      (elm <span class="keyword">as</span> <span class="built_in">any</span>)[key] = cur</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> propsModule: Module = &#123; create: updateProps, update: updateProps &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      大半夜的补博客
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="snabbdom" scheme="http://blog.decade.run/tags/snabbdom/"/>
    
  </entry>
  
  <entry>
    <title>snabbdom源码解读 (vnode.ts h.ts hooks.ts)</title>
    <link href="http://blog.decade.run/2020/07/05/snabbdom02/"/>
    <id>http://blog.decade.run/2020/07/05/snabbdom02/</id>
    <published>2020-07-04T16:36:59.000Z</published>
    <updated>2020-07-27T05:40:56.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vnode-ts"><a href="#vnode-ts" class="headerlink" title="vnode.ts"></a>vnode.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Key = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> VNode &#123;</span><br><span class="line">  <span class="comment">// 选择器</span></span><br><span class="line">  sel: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 节点的样式/ 事件/ 属性等</span></span><br><span class="line">  data: VNodeData | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 子节点 可以是一个vnode数组 或者字符串数组</span></span><br><span class="line">  children: <span class="built_in">Array</span>&lt;VNode | <span class="built_in">string</span>&gt; | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 记录的真实dom</span></span><br><span class="line">  elm: Node | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 文本节点 有children就不能有text</span></span><br><span class="line">  text: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 优化用</span></span><br><span class="line">  key: Key | <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> VNodeData &#123;</span><br><span class="line">  props?: Props </span><br><span class="line">  attrs?: Attrs <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">class</span>?: Classes <span class="comment">// 选择器</span></span><br><span class="line">  style?: VNodeStyle <span class="comment">// 样式</span></span><br><span class="line">  dataset?: Dataset <span class="comment">// 自定义数据dataset</span></span><br><span class="line">  on?: On <span class="comment">// 监听方法</span></span><br><span class="line">  hero?: Hero</span><br><span class="line">  attachData?: AttachData</span><br><span class="line">  hook?: Hooks <span class="comment">// 钩子函数</span></span><br><span class="line">  key?: Key <span class="comment">// 用于后面 patch</span></span><br><span class="line">  ns?: <span class="built_in">string</span> <span class="comment">// for SVGs</span></span><br><span class="line">  fn?: <span class="function"><span class="params">()</span> =&gt;</span> VNode <span class="comment">// for thunks</span></span><br><span class="line">  args?: <span class="built_in">any</span>[] <span class="comment">// for thunks</span></span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">// for any other 3rd party module</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">vnode</span> (<span class="params">sel: <span class="built_in">string</span> | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: <span class="built_in">any</span> | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: <span class="built_in">Array</span>&lt;VNode | <span class="built_in">string</span>&gt; | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  text: <span class="built_in">string</span> | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elm: Element | Text | <span class="literal">undefined</span></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = data === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : data.key</span><br><span class="line">  <span class="keyword">return</span> &#123; sel, data, children, text, elm, key &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="h-ts"><a href="#h-ts" class="headerlink" title="h.ts"></a>h.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> VNodes = VNode[] <span class="comment">// 一个虚拟DOM数组</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> VNodeChildElement = VNode | <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span> <span class="comment">// 虚拟DOM的children里面的元素 可以是什么类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> ArrayOrElement&lt;T&gt; = T | T[]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> VNodeChildren = ArrayOrElement&lt;VNodeChildElement&gt; <span class="comment">// 虚拟DOM的children</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加命名空间 svg</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNS</span> (<span class="params">data: <span class="built_in">any</span>, children: VNodes | <span class="literal">undefined</span>, sel: <span class="built_in">string</span> | <span class="literal">undefined</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  data.ns = <span class="string">'http://www.w3.org/2000/svg'</span></span><br><span class="line">  <span class="keyword">if</span> (sel !== <span class="string">'foreignObject'</span> &amp;&amp; children !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">const</span> childData = children[i].data</span><br><span class="line">      <span class="keyword">if</span> (childData !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        addNS(childData, (children[i] <span class="keyword">as</span> VNode).children <span class="keyword">as</span> VNodes, children[i].sel)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// h方法的重载</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: <span class="built_in">string</span></span>): <span class="title">VNode</span> // 只传入一个<span class="title">tag</span>#<span class="title">ID1</span>.<span class="title">class1</span> 之类的字符串</span></span><br><span class="line"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: <span class="built_in">string</span>, data: VNodeData | <span class="literal">null</span></span>): <span class="title">VNode</span> // 第二参数是传入的类似这样的一个对象 用来设置<span class="title">tag</span>元素的样式 事件  属性等</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: <span class="built_in">string</span>, children: VNodeChildren</span>): <span class="title">VNode</span> // 第二个参数也可以是一个数组 这个数组里面放的就是 子元素</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: <span class="built_in">string</span>, data: VNodeData | <span class="literal">null</span>, children: VNodeChildren</span>): <span class="title">VNode</span> // 三个一起传入</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="function"><span class="title">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">sel: <span class="built_in">any</span>, b?: <span class="built_in">any</span>, c?: <span class="built_in">any</span></span>): <span class="title">VNode</span> </span>&#123;</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="function">  <span class="title">var</span> <span class="title">data</span>: <span class="title">VNodeData</span> = </span>&#123;&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  <span class="title">var</span> <span class="title">children</span>: <span class="title">any</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  <span class="title">var</span> <span class="title">text</span>: <span class="title">any</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  <span class="title">var</span> <span class="title">i</span>: <span class="title">number</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  // 三个参数情况</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params">c !== <span class="literal">undefined</span></span>) </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">    // 如果第二个参数不<span class="title">null</span></span></span></span><br><span class="line"><span class="function"><span class="function">    <span class="title">if</span> (<span class="params">b !== <span class="literal">null</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">      <span class="title">data</span> = <span class="title">b</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    // 如果<span class="title">c</span>是数组 </span></span><br><span class="line"><span class="function">    <span class="title">if</span> (<span class="params">is.array(c)</span>) </span>&#123; </span><br><span class="line">      children = c <span class="comment">// 说明是子元素 放入到children属性中</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.primitive(c)) &#123; <span class="comment">// 说明是字符串文本</span></span><br><span class="line">      text = c <span class="comment">// 放到text属性</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &amp;&amp; c.sel) &#123; <span class="comment">// 如果c是vnode </span></span><br><span class="line">      children = [c] <span class="comment">// 把c弄成数组 赋值给属性children</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b !== <span class="literal">undefined</span> &amp;&amp; b !== <span class="literal">null</span>) &#123; <span class="comment">// 只有两个参数</span></span><br><span class="line">    <span class="keyword">if</span> (is.array(b)) &#123; <span class="comment">// 判断是否是数组</span></span><br><span class="line">      children = b <span class="comment">// 传入children</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.primitive(b)) &#123; <span class="comment">// 字符串或者number 传入文本</span></span><br><span class="line">      text = b </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &amp;&amp; b.sel) &#123; <span class="comment">// 是否是vnode</span></span><br><span class="line">      children = [b]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; data = b &#125;<span class="comment">// 说明是class , 什么的  </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (children !== <span class="literal">undefined</span>) &#123; <span class="comment">// 如果children属性存在 说明有子节点 再创建子节点</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is.primitive(children[i])) children[i] = vnode(<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, children[i], <span class="literal">undefined</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果传入的svg</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    sel[<span class="number">0</span>] === <span class="string">'s'</span> &amp;&amp; sel[<span class="number">1</span>] === <span class="string">'v'</span> &amp;&amp; sel[<span class="number">2</span>] === <span class="string">'g'</span> &amp;&amp;</span><br><span class="line">    (sel.length === <span class="number">3</span> || sel[<span class="number">3</span>] === <span class="string">'.'</span> || sel[<span class="number">3</span>] === <span class="string">'#'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 添加命名空间</span></span><br><span class="line">    addNS(data, children, sel)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回vnode</span></span><br><span class="line">  <span class="keyword">return</span> vnode(sel, data, children, text, <span class="literal">undefined</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="hooks-ts"><a href="#hooks-ts" class="headerlink" title="hooks.ts"></a>hooks.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; VNode &#125; <span class="keyword">from</span> <span class="string">'./vnode'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> PreHook = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> InitHook = <span class="function">(<span class="params">vNode: VNode</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> CreateHook = <span class="function">(<span class="params">emptyVNode: VNode, vNode: VNode</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> InsertHook = <span class="function">(<span class="params">vNode: VNode</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> PrePatchHook = <span class="function">(<span class="params">oldVNode: VNode, vNode: VNode</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> UpdateHook = <span class="function">(<span class="params">oldVNode: VNode, vNode: VNode</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> PostPatchHook = <span class="function">(<span class="params">oldVNode: VNode, vNode: VNode</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> DestroyHook = <span class="function">(<span class="params">vNode: VNode</span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> RemoveHook = <span class="function">(<span class="params">vNode: VNode, removeCallback: (<span class="params"></span>) =&gt; <span class="built_in">void</span></span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> PostHook = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Hooks &#123;</span><br><span class="line">  pre?: PreHook</span><br><span class="line">  init?: InitHook</span><br><span class="line">  create?: CreateHook</span><br><span class="line">  insert?: InsertHook</span><br><span class="line">  prepatch?: PrePatchHook</span><br><span class="line">  update?: UpdateHook</span><br><span class="line">  postpatch?: PostPatchHook</span><br><span class="line">  destroy?: DestroyHook</span><br><span class="line">  remove?: RemoveHook</span><br><span class="line">  post?: PostHook</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该文件是用来定义modules 里面模块的钩子方法, 举个例子 props.ts 主要的代码后面再讲 大体如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'./module'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProps</span> (<span class="params">oldVnode: VNode, vnode: VNode</span>): <span class="title">void</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> propsModule: Module = &#123; create: updateProps, update: updateProps &#125;</span><br></pre></td></tr></table></figure><p>我们可以看出props.ts导出的是一个propsModule 它里面有着Hooks 里面的两个属性 一个是create, 一个是update, 相应的实现则是在props.ts里面实现的</p>]]></content>
    
    <summary type="html">
    
      大半夜的补博客
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="snabbdom" scheme="http://blog.decade.run/tags/snabbdom/"/>
    
  </entry>
  
  <entry>
    <title>snabbdom源码解读</title>
    <link href="http://blog.decade.run/2020/07/04/snabbdom01/"/>
    <id>http://blog.decade.run/2020/07/04/snabbdom01/</id>
    <published>2020-07-03T16:34:48.000Z</published>
    <updated>2020-07-24T06:51:03.312Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更东西了, vue 的虚拟 DOM 借鉴了开源库 snabbdom 的虚拟 DOM, 闲暇之余也开始啃了 snabbom<br><a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a>这是 github 仓库的地址</p><h3 id="下载完了之后用-vscode-打开-进入到-src-package"><a href="#下载完了之后用-vscode-打开-进入到-src-package" class="headerlink" title="下载完了之后用 vscode 打开, 进入到 src/package"></a>下载完了之后用 vscode 打开, 进入到 src/package</h3><p>├── h.ts 创建 vnode<br>├── hook.ts 需要用到的钩子函数<br>├── htmldomapi.ts 操作 DOM 的 api<br>├── init.ts 初始化 vnode, 添加钩子 patch 都在这里面<br>├── is.ts 两个工具方法 一个判断是否是数组, 一个判断是否是数字或者字符串<br>├── jsx.ts jsx<br>├── jsx-global.ts<br>├── thunk.ts<br>├── tovnode.ts 真实 DOM 转 vnode<br>├── vnode.ts vnode 类<br>├── tsconfig.json<br>├── helper<br>│ └── utattachto.tsils<br>└── modules 将 vnode 编译成真实 DOM 有些属性需要从里面的模块导入 每个模块都实现了 module.ts 中的几种方法<br>├── attributes.ts 属性模块<br>├── class.ts 类模块<br>├── dataset.ts<br>├── eventlisteners.ts 事件监听<br>├── hero.ts<br>├── module.ts<br>├── props.ts 属性<br>└── style.ts 样式</p><h3 id="init-ts"><a href="#init-ts" class="headerlink" title="init.ts"></a>init.ts</h3><p>init 方法主要返回的是一个 patch 函数(我省略掉了代码 应该不会说我吧)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params">modules: <span class="built_in">Array</span>&lt;Partial&lt;Module&gt;&gt;, domApi?: DOMAPI</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><ol><li>参数是一个依赖 Module 这个类型的数 这个 Module 就是 modules/module 导出来的 它定义了模块可能会有的某些方法, 第二参数就是 domApi 这个参数是可选的, 你可以传一些你自己定义的操作 dom 的方法进去</li><li>tips Partial 这个是 typescript 中的类型依赖 我们只是需要 Module 中的某些属性即可</li></ol><p>接着往下看</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> j: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">const</span> cbs: ModuleHooks = &#123;</span><br><span class="line">  create: [],</span><br><span class="line">  update: [],</span><br><span class="line">  remove: [],</span><br><span class="line">  destroy: [],</span><br><span class="line">  pre: [],</span><br><span class="line">  post: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> api: DOMAPI = domApi !== <span class="literal">undefined</span> ? domApi : htmlDomApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hooks.length; ++i) &#123;</span><br><span class="line">  cbs[hooks[i]] = [];</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; modules.length; ++j) &#123;</span><br><span class="line">    <span class="keyword">const</span> hook = modules[j][hooks[i]];</span><br><span class="line">    <span class="comment">// hook = modules[i].create  ...</span></span><br><span class="line">    <span class="keyword">if</span> (hook !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果导入的模块有这个方法</span></span><br><span class="line">      (cbs[hooks[i]] <span class="keyword">as</span> <span class="built_in">any</span>[]).push(hook); <span class="comment">// 将传入的module中的方法添加进 ModuleHooks中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><ol><li>首先定义的 i, j 是为了下面的两重 for 循环</li><li>cbs 首先看 ModuleHooks 这个类型是 Module 里面存在的键值 cbs 里面也都必须存在</li><li>判断是否传入 api 没传就用本身的 传了就用传过来的</li><li>下面的第一重 for 给 cbs 赋值 大概变成这样 {create: [], update: []…}</li><li>第二重 for 循环 是给 cbs[create]这样赋值, 先判断 module 里面有没有 create, update 以及其他四个 有 就 push 进去 最后大概是这样 cbs: {create: [fn1, fn2], update: [fn5]…}</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将真实dom转成一个空的虚拟DOM</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emptyNodeAt</span>(<span class="params">elm: Element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = elm.id ? <span class="string">'#'</span> + elm.id : <span class="string">''</span>; <span class="comment">// 如果存在id选择器 则拼接成 '#' + id</span></span><br><span class="line">  <span class="keyword">const</span> c = elm.className ? <span class="string">'.'</span> + elm.className.split(<span class="string">' '</span>).join(<span class="string">'.'</span>) : <span class="string">''</span>; <span class="comment">// 如果存在类选择器 则将所有的类拆开 以.拼接</span></span><br><span class="line">  <span class="keyword">return</span> vnode(api.tagName(elm).toLowerCase() + id + c, &#123;&#125;, [], <span class="literal">undefined</span>, elm); <span class="comment">// 调用vnode方法 传入五个参数 返回的是一个VNode对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRmCb</span>(<span class="params">childElm: Node, listeners: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回删除节点的方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rmCb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (--listeners === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 高阶函数生成闭包 只有在listeners 为0了 才一起调用</span></span><br><span class="line">      <span class="keyword">const</span> parent = api.parentNode(childElm) <span class="keyword">as</span> Node;</span><br><span class="line">      api.removeChild(parent, childElm);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据虚拟DOM创建真实的DOM 并返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElm</span>(<span class="params">vnode: VNode, insertedVnodeQueue: VNodeQueue</span>): <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">let</span> data = vnode.data; <span class="comment">// data里面放的就是 属性/事件/样式</span></span><br><span class="line">  <span class="comment">// 执行init钩子函数</span></span><br><span class="line">  <span class="keyword">if</span> (data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> init = data.hook?.init; <span class="comment">// 这个init是用户自定义的init</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(init)) &#123;</span><br><span class="line">      <span class="comment">// 判断init是否定义</span></span><br><span class="line">      init(vnode); <span class="comment">// 重新执行一遍 是为了和用户所想要的方向达成一致</span></span><br><span class="line">      data = vnode.data; <span class="comment">// 重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将vnode转换成真实的Dom</span></span><br><span class="line">  <span class="keyword">const</span> children = vnode.children; <span class="comment">// 取出子节点</span></span><br><span class="line">  <span class="keyword">const</span> sel = vnode.sel; <span class="comment">// 取出选择器</span></span><br><span class="line">  <span class="keyword">if</span> (sel === <span class="string">'!'</span>) &#123;</span><br><span class="line">    <span class="comment">// 说明是注释节点</span></span><br><span class="line">    <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">      <span class="comment">// 没有定义text属性的时 说明就只是一个空注释 &lt;!----&gt;</span></span><br><span class="line">      vnode.text = <span class="string">''</span>; <span class="comment">// 赋值为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    vnode.elm = api.createComment(vnode.text!); <span class="comment">// 创建一个注释节点 &lt;!--vnode.text--&gt;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sel !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 不为空</span></span><br><span class="line">    <span class="comment">// Parse selector</span></span><br><span class="line">    <span class="keyword">const</span> hashIdx = sel.indexOf(<span class="string">'#'</span>); <span class="comment">// 找到id选择器开始位置</span></span><br><span class="line">    <span class="keyword">const</span> dotIdx = sel.indexOf(<span class="string">'.'</span>, hashIdx); <span class="comment">// 从#位置往后 开始寻找 .</span></span><br><span class="line">    <span class="keyword">const</span> hash = hashIdx &gt; <span class="number">0</span> ? hashIdx : sel.length; <span class="comment">// 如果存在id 选择器</span></span><br><span class="line">    <span class="keyword">const</span> dot = dotIdx &gt; <span class="number">0</span> ? dotIdx : sel.length; <span class="comment">// 存在类选择器</span></span><br><span class="line">    <span class="keyword">const</span> tag =</span><br><span class="line">      hashIdx !== <span class="number">-1</span> || dotIdx !== <span class="number">-1</span> ? sel.slice(<span class="number">0</span>, <span class="built_in">Math</span>.min(hash, dot)) : sel; <span class="comment">// 从0开始 找到类选择器.开始位置 和 id选择器位置最小的 开始截取 出标签名 : 否则就是sel就是标签名</span></span><br><span class="line">    <span class="keyword">const</span> elm = (vnode.elm =</span><br><span class="line">      isDef(data) &amp;&amp; isDef((i = data.ns)) <span class="comment">// 判断data是否存在 或者是否存在命名空间的标签</span></span><br><span class="line">        ? api.createElementNS(i, tag) <span class="comment">// 调用生成命名空间的</span></span><br><span class="line">        : api.createElement(tag)); <span class="comment">// 调用生成一般标签的</span></span><br><span class="line">    <span class="keyword">if</span> (hash &lt; dot) elm.setAttribute(<span class="string">'id'</span>, sel.slice(hash + <span class="number">1</span>, dot)); <span class="comment">// 设置id名</span></span><br><span class="line">    <span class="keyword">if</span> (dotIdx &gt; <span class="number">0</span>)</span><br><span class="line">      elm.setAttribute(<span class="string">'class'</span>, sel.slice(dot + <span class="number">1</span>).replace(<span class="regexp">/\./g</span>, <span class="string">' '</span>)); <span class="comment">// 设置类名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行模块中的create 钩子</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 vnode有子节点 则创建子vnode对应的dom 添加到dom上</span></span><br><span class="line">    <span class="keyword">if</span> (is.array(children)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> ch = children[i];</span><br><span class="line">        <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">          api.appendChild(elm, createElm(ch <span class="keyword">as</span> VNode, insertedVnodeQueue));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.primitive(vnode.text)) &#123;</span><br><span class="line">      <span class="comment">//如果text 是number/string</span></span><br><span class="line">      api.appendChild(elm, api.createTextNode(vnode.text)); <span class="comment">// 创建成文本节点 并插入dom中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> hook = vnode.data!.hook;</span><br><span class="line">    <span class="keyword">if</span> (isDef(hook)) &#123;</span><br><span class="line">      <span class="comment">// 执行用户传入的create</span></span><br><span class="line">      hook.create?.(emptyNode, vnode); <span class="comment">// 这里的?表示 如果传入了create方法 就将后面的参数传入执行 否则 就不执行</span></span><br><span class="line">      <span class="keyword">if</span> (hook.insert) &#123;</span><br><span class="line">        <span class="comment">// 存在insert 便追加进队列 为了让后面执行insert钩子</span></span><br><span class="line">        insertedVnodeQueue.push(vnode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则 创建文本节点</span></span><br><span class="line">    vnode.elm = api.createTextNode(vnode.text!);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回创建的dom</span></span><br><span class="line">  <span class="keyword">return</span> vnode.elm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入vnode</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addVnodes</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">  before: Node | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  vnodes: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  startIdx: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  endIdx: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue: VNodeQueue</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 父节点, 需要插入到之前位置的节点, 插入的vnode数组, 开始位置, 结束位置 插入节点队列</span></span><br><span class="line">  <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">    <span class="keyword">const</span> ch = vnodes[startIdx];</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">      api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 触发销毁钩子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeDestroyHook</span>(<span class="params">vnode: VNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = vnode.data;</span><br><span class="line">  <span class="keyword">if</span> (data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    data?.hook?.destroy?.(vnode); <span class="comment">// 调用用户的destroy</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) cbs.destroy[i](vnode); <span class="comment">// 调用模块中的destroy</span></span><br><span class="line">    <span class="keyword">if</span> (vnode.children !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果存在子节点</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; vnode.children.length; ++j) &#123;</span><br><span class="line">        <span class="keyword">const</span> child = vnode.children[j];</span><br><span class="line">        <span class="keyword">if</span> (child != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> child !== <span class="string">'string'</span>) &#123;</span><br><span class="line">          <span class="comment">// 子节点存在 且 子节点不是字符串</span></span><br><span class="line">          invokeDestroyHook(child); <span class="comment">// 递归</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移出vnode</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeVnodes</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">  vnodes: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  startIdx: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  endIdx: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 父节点 2. 需要删除的节点数组 3 开始删除索引 4. 结束删除位置索引</span></span><br><span class="line">  <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">    <span class="keyword">let</span> listeners: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">let</span> rm: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">const</span> ch = vnodes[startIdx]; <span class="comment">// 拿到传过vnode数组中的 vnode</span></span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//如果不为空</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(ch.sel)) &#123;</span><br><span class="line">        <span class="comment">// 判断是否是vnode</span></span><br><span class="line">        invokeDestroyHook(ch); <span class="comment">// 触发destroy钩子函数</span></span><br><span class="line">        listeners = cbs.remove.length + <span class="number">1</span>;</span><br><span class="line">        rm = createRmCb(ch.elm!, listeners); <span class="comment">// 创建删除的回调函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.remove.length; ++i) cbs.remove[i](ch, rm); <span class="comment">// 调用模块中的remove钩子</span></span><br><span class="line">        <span class="keyword">const</span> removeHook = ch?.data?.hook?.remove;</span><br><span class="line">        <span class="keyword">if</span> (isDef(removeHook)) &#123;</span><br><span class="line">          <span class="comment">// 如果用户设置了remove的钩子</span></span><br><span class="line">          removeHook(ch, rm); <span class="comment">// 调用用户设置的remove</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 没有设置 就直接调用删除元素的方法</span></span><br><span class="line">          rm();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Text node</span></span><br><span class="line">        <span class="comment">// 如果是文本节点 直接调用删除文本节点的方法</span></span><br><span class="line">        api.removeChild(parentElm, ch.elm!);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// snabbdom的diff算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldCh: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  newCh: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue: VNodeQueue</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span>; <span class="comment">// 旧Vnode[]的第一个位置的节点下标</span></span><br><span class="line">  <span class="keyword">let</span> newStartIdx = <span class="number">0</span>; <span class="comment">// 新vnode[]的第一个位置的节点下标</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.length - <span class="number">1</span>; <span class="comment">// 旧vnode[]最后一个节点下标</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>]; <span class="comment">// 旧vnode[]的第一个节点</span></span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx]; <span class="comment">// 旧vnode[]的最后一个节点</span></span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.length - <span class="number">1</span>; <span class="comment">// 新vnode[]的最后一个节点下标</span></span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>]; <span class="comment">// 新vnode[]的第一个节点</span></span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx]; <span class="comment">// 新vnode[]的最后一个节点</span></span><br><span class="line">  <span class="keyword">let</span> oldKeyToIdx: KeyToIndexMap | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> idxInOld: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">let</span> elmToMove: VNode;</span><br><span class="line">  <span class="keyword">let</span> before: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldStartVnode == <span class="literal">null</span>) &#123; <span class="comment">// 旧vnode[]第一个vnode如果为null  则右移</span></span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVnode == <span class="literal">null</span>) &#123; <span class="comment">// 旧vnode[]倒数第一个vnode 如果为null 则左移</span></span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartVnode == <span class="literal">null</span>) &#123; <span class="comment">// 新一不存在 则 右移</span></span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newEndVnode == <span class="literal">null</span>) &#123; <span class="comment">// 新倒数第一不存在 则左移</span></span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123; <span class="comment">// 如果旧一 与 新一 是相同的 同时右移</span></span><br><span class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;  <span class="comment">// 旧倒数一 与 新倒数一 相同 同时左移</span></span><br><span class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// Vnode moved right</span></span><br><span class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      api.insertBefore(</span><br><span class="line">        parentElm,</span><br><span class="line">        oldStartVnode.elm!,</span><br><span class="line">        api.nextSibling(oldEndVnode.elm!)</span><br><span class="line">      );</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// Vnode moved left</span></span><br><span class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      api.insertBefore(parentElm, oldEndVnode.elm!, oldStartVnode.elm!);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (oldKeyToIdx === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">      &#125;</span><br><span class="line">      idxInOld = oldKeyToIdx[newStartVnode.key <span class="keyword">as</span> <span class="built_in">string</span>];</span><br><span class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123;</span><br><span class="line">        <span class="comment">// New element</span></span><br><span class="line">        api.insertBefore(</span><br><span class="line">          parentElm,</span><br><span class="line">          createElm(newStartVnode, insertedVnodeQueue),</span><br><span class="line">          oldStartVnode.elm!</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elmToMove = oldCh[idxInOld];</span><br><span class="line">        <span class="keyword">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;</span><br><span class="line">          api.insertBefore(</span><br><span class="line">            parentElm,</span><br><span class="line">            createElm(newStartVnode, insertedVnodeQueue),</span><br><span class="line">            oldStartVnode.elm!</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);</span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span> <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">          api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (oldStartIdx &lt;= oldEndIdx || newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">      before = newCh[newEndIdx + <span class="number">1</span>] == <span class="literal">null</span> ? <span class="literal">null</span> : newCh[newEndIdx + <span class="number">1</span>].elm;</span><br><span class="line">      addVnodes(</span><br><span class="line">        parentElm,</span><br><span class="line">        before,</span><br><span class="line">        newCh,</span><br><span class="line">        newStartIdx,</span><br><span class="line">        newEndIdx,</span><br><span class="line">        insertedVnodeQueue</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  oldVnode: VNode,</span></span></span><br><span class="line"><span class="function"><span class="params">  vnode: VNode,</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue: VNodeQueue</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = vnode.data?.hook; <span class="comment">// 获取用户设置钩子对象</span></span><br><span class="line">  hook?.prepatch?.(oldVnode, vnode); <span class="comment">// 如果设置了prepatch钩子 便执行</span></span><br><span class="line">  <span class="keyword">const</span> elm = (vnode.elm = oldVnode.elm!); <span class="comment">// 保存对应的真实DOM 并赋值给新vnode的elm</span></span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.children <span class="keyword">as</span> VNode[]; <span class="comment">// 保存旧vnode的所有子节点</span></span><br><span class="line">  <span class="keyword">const</span> ch = vnode.children <span class="keyword">as</span> VNode[]; <span class="comment">// 保存新vnode的所有子节点</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) <span class="keyword">return</span>; <span class="comment">// 如果新旧都相同 没有打补丁不要</span></span><br><span class="line">  <span class="keyword">if</span> (vnode.data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 新vnode的data存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode); <span class="comment">// 调用模块中的 update方法</span></span><br><span class="line">    vnode.data.hook?.update?.(oldVnode, vnode); <span class="comment">// 用户自定义了 就调用用户自定的update</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果新vnode的text属性未定义</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="comment">// 先判断旧节点的自节点 和新节点的子节点 是否被定义</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 如果旧节点的子节点不等于新节点的子节点  就用diff算法 比较更新子节点</span></span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 如果新节点有子节点  而 旧节点没有子节点 同时 新节点没有text属性</span></span><br><span class="line">      <span class="comment">//判断老节点有text 变清空它</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) api.setTextContent(elm, <span class="string">''</span>);</span><br><span class="line">      <span class="comment">// 将新节点中的子节点添加进来</span></span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 如果老节点有子节点  新节点没有子节点</span></span><br><span class="line">      <span class="comment">// 便删除子节点</span></span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">      <span class="comment">// 老节点定义了text 新节点没有text</span></span><br><span class="line">      api.setTextContent(elm, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">    <span class="comment">// 如果新旧的text属性不相等</span></span><br><span class="line">    <span class="comment">// 更新文本</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 判断旧的是否有children</span></span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>); <span class="comment">// 移出旧节点的所有子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    api.setTextContent(elm, vnode.text!); <span class="comment">//设置文本节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  hook?.postpatch?.(oldVnode, vnode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析 patchVnode</strong><br>总的思路就是需要把 oldVnode 改造得和 newVnode 一样</p><ol><li>比较两个vnode 是不是相同的</li><li>如果新vnode是否有data属性 <ol><li>有则遍历调用cbs中的update方法, 如果新vnode的data.hook.update存在也要执行一次</li></ol></li><li>如果新vnode是否有text属性<ol><li>newVnode 没有text属性<ol><li>判断oldVnode和newVnode是否有children属性<ol><li>两个都有children =&gt; 则调用updateChildren 进行diff</li><li>oldVnode有newVnode没有 <ol><li>判断oldVnode是否有text属性<ol><li>有则移出</li></ol></li></ol></li><li>newVnode有oldVnode没有 =&gt; 移出所有children 节点</li><li>oldVnode存在text属性 =&gt; 移出text</li></ol></li></ol></li><li>newVnode的text 与 olcVnode的text 不相同<ol><li>判断oldVnode是否有children属性<ol><li>存在则 移出所有的children</li></ol></li><li>设置newVnode的text</li></ol></li></ol></li><li>调用postpath 钩子</li></ol><p><strong>分析 updateChildren</strong></p><ol><li>先比较两端<ol><li>旧 vnode 头 vs 新 vnode 头</li><li>旧 vnode 尾 vs 新 vnode 尾</li><li>旧 vnode 头 vs 新 vnode 尾</li><li>旧 vnode 尾 vs 新 vnode 头</li></ol></li><li>首尾不一样的情况，寻找 key 相同的节点，找不到则新建元素</li><li>如果找到 key，但是，元素选择器变化了，也新建元素</li><li>如果找到 key，并且元素选择没变， 则移动元素</li><li>两个列表对比完之后，清理多余的元素，新增添加的元素</li></ol>]]></content>
    
    <summary type="html">
    
      大半夜的补博客
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="snabbdom" scheme="http://blog.decade.run/tags/snabbdom/"/>
    
  </entry>
  
  <entry>
    <title>snabbdom</title>
    <link href="http://blog.decade.run/2020/07/03/snabbdom/"/>
    <id>http://blog.decade.run/2020/07/03/snabbdom/</id>
    <published>2020-07-02T17:34:50.000Z</published>
    <updated>2020-07-24T06:31:55.398Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ol><li>创建一个snabbdom-demo文件夹</li><li>cd snabbdom-demo</li><li>npm init -y</li><li>npm install parcel-bundler</li><li>然后在根目录下创建一个src目录</li><li>然后在根目录下创建一个index.html文件</li></ol><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ol><li>在src目录下创建一个main.js</li><li>在main.js里面写入 console.log(“main”)</li><li>在index.html中引入main.js</li><li>打开package.json</li><li>修改script 为 “dev”: “parcel index.html –open”</li><li>打开终端 输入npm run dev</li><li>网页会自动打开 我们检查控制台看是否输出 打印的main 打印出来 说明环境配置成功</li></ol><h3 id="引入snabbdom"><a href="#引入snabbdom" class="headerlink" title="引入snabbdom"></a>引入snabbdom</h3><ol><li>npm i snabbdom</li><li>我们看snabbdom的<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">github</a></li><li>我们在创建的mian.js 中使用</li></ol><h3 id="使用snabbdom"><a href="#使用snabbdom" class="headerlink" title="使用snabbdom"></a>使用snabbdom</h3><p>我们直接使用官网的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">'snabbdom/init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; classModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/class'</span></span><br><span class="line"><span class="keyword">import</span> &#123; propsModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/props'</span></span><br><span class="line"><span class="keyword">import</span> &#123; styleModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/style'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventListenersModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/eventlisteners'</span></span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'snabbdom/h'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> patch = init([ </span><br><span class="line">  classModule, </span><br><span class="line">  propsModule, </span><br><span class="line">  styleModule, </span><br><span class="line">  eventListenersModule,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'div#container.two.classes'</span>, &#123; <span class="attr">on</span>: &#123; <span class="attr">click</span>: someFn &#125; &#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">fontWeight</span>: <span class="string">'bold'</span> &#125; &#125;, <span class="string">'This is bold'</span>),</span><br><span class="line">  <span class="string">' and this is just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123; <span class="attr">props</span>: &#123; <span class="attr">href</span>: <span class="string">'/foo'</span> &#125; &#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">])</span><br><span class="line">patch(container, vnode)</span><br><span class="line"><span class="comment">// 记得在index.html中创建一个id为container的div</span></span><br></pre></td></tr></table></figure><p><strong>踩坑</strong><br>可能是我用的parcel 上面引入的方法都失败了<br>我为了偷懒 把具体的路径加了上去<br>改成下面那样<br>这里需要你实现一下 someFn方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">'snabbdom/src/package/init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; classModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/src/package/modules/class'</span></span><br><span class="line"><span class="keyword">import</span> &#123; propsModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/src/package/modules/props'</span></span><br><span class="line"><span class="keyword">import</span> &#123; styleModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/src/package/modules/style'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventListenersModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/src/package/modules/eventlisteners'</span></span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'snabbdom/src/package/h'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> patch = init([ </span><br><span class="line">  classModule, </span><br><span class="line">  propsModule, </span><br><span class="line">  styleModule, </span><br><span class="line">  eventListenersModule,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'div#container.two.classes'</span>, &#123; <span class="attr">on</span>: &#123; <span class="attr">click</span>: someFn &#125; &#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">fontWeight</span>: <span class="string">'bold'</span> &#125; &#125;, <span class="string">'This is bold'</span>),</span><br><span class="line">  <span class="string">' and this is just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123; <span class="attr">props</span>: &#123; <span class="attr">href</span>: <span class="string">'/foo'</span> &#125; &#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">])</span><br><span class="line">patch(container, vnode)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后界面是这个样子, 我还检查了元素<br><img src="/" class="lazyload" data-src="/img/snabbdom/snabbdom1.png"  alt="图1"><br><img src="/" class="lazyload" data-src="/img/snabbdom/snabbdom2.png"  alt="图2"></p><div class="note default">            <ol><li>首先我们可以看出 之前的id为container的div 多了两个类选择器</li><li>同时也多了个点击事件</li><li>里面多了一个span标签</li><li>多了一个a标签</li><li>然后就是我们控制台打印的this</li></ol><p>经过我的观察 this包括以下几部分</p><ol><li>children 这是一个数组 里面包含的每个元素结构和最外层一样</li><li>data 这是一个对象 里面可以放on(监听事件), style(样式), props(属性)</li><li>elm  代表的该元素的标签和标签上面的选择器</li><li>key 例子里面的都是undefined 暂时看不出来什么</li><li>listener 是一个方法 监听的对象是一个vnode 结合发现这个vnode 就是打印出来的这个this</li><li>sel 字符串 标签名加选择器名 组合的字符串</li><li>text 文本</li></ol><p>补充: text为undefined 的时候children不为undefined, children为undefined时  text不为undefined</p>          </div><p><strong>分析方法</strong><br>init 传入的是一个数组 数组里面可以是模块, 官网上还有第二个参数, 传入的是操作DOM的api, 返回值是一个patch方法<br>h 返回的是一个vnode 官网上说的accepts a tag/selector as a string, an optional data object and an optional string or array of children.<br>patch 第一个参数是oldVnode / 真实DOM , 第二个参数是newVnode 返回一个vnode</p>]]></content>
    
    <summary type="html">
    
      初识snabbdom
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="snabbdom" scheme="http://blog.decade.run/tags/snabbdom/"/>
    
  </entry>
  
  <entry>
    <title>heroku</title>
    <link href="http://blog.decade.run/2020/06/10/heroku/"/>
    <id>http://blog.decade.run/2020/06/10/heroku/</id>
    <published>2020-06-10T07:22:44.000Z</published>
    <updated>2020-06-10T07:54:05.863Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近太久没有搞vue了,然后又看见自己电脑之前angular时弄得网易云音乐的api, 于是有了想法….</strong></p><h2 id="最开始的想法-把api弄到自己的服务器上"><a href="#最开始的想法-把api弄到自己的服务器上" class="headerlink" title="最开始的想法 把api弄到自己的服务器上"></a>最开始的想法 把api弄到自己的服务器上</h2><ol><li>我的服务器是阿里的, 因为偷懒, 用了宝塔面板(用起来还是挺方便的)</li><li>点进我的面板… 找到文件,点击上传</li><li>然后解压.. 打开终端.. 进入文件 </li><li>npm i 拉完包后, npm run start 出现了一串我很开心的东西<br><img src="/" class="lazyload" data-src="/img/heroku/1.png"  alt="滴滴滴"><br>我以为好了, 但是访问不了</li><li>然后一上午到下午两点 都在百度 尝试 百度尝试之前游走</li><li>最后我进入到了我的小破站, 然后看见了一个heroku</li><li>不得不说, 那老师声音挺好听的…感谢一下<a href="https://www.bilibili.com/video/BV1xs411K7KC?t=673" target="_blank" rel="noopener">小破站链接</a></li></ol><h2 id="然后开始我的heroku"><a href="#然后开始我的heroku" class="headerlink" title="然后开始我的heroku"></a>然后开始我的heroku</h2><ol><li>首先是<a href="https://www.heroku.com/" target="_blank" rel="noopener">官网</a>注册 进不去啥的记得 番羽 土啬</li><li><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs" target="_blank" rel="noopener">官方手册</a>来一波 我弄得node的</li><li>先下一个<a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up" target="_blank" rel="noopener">可视化工具</a> 我用的windows</li><li>然后 我用的cmd打开我的那个网易云api文件</li><li>运行heroku create xxx (xxx 是你创建的命名)</li><li>然后git push heroku master<br>讲道理 能成功的 然后报了个错<br><img src="/" class="lazyload" data-src="/img/heroku/heroku1.png"  alt="报错"></li><li>然后翻了下文档 我git也不很熟悉 以后补<br><img src="/" class="lazyload" data-src="/img/heroku/heroku2.png"  alt="解决"></li><li>然后成功<br><img src="/" class="lazyload" data-src="/img/heroku/heroku3.png"  alt="成功"></li><li>最后访问的那个是 你最开始执行heroku create 生成的两个东西 一个是你后面登陆的链接 一个是你仓库的</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heroku create xxx </span><br><span class="line">// 会生成 两个链接 第一链接是我们后面用的</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">heroku gitxxxxxxxx.git  // 这是我进入官网找到我创建的那个里面找到的</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push heroku master</span><br></pre></td></tr></table></figure><p>最后访问那个网址!!!!</p><p><font color="red">我是肯定会部署到服务器上的, 一定的</font></p>]]></content>
    
    <summary type="html">
    
      因为自己太菜, 没有部署到自己的服务器上, 然后偶然看见heroku, 边开始试试
    
    </summary>
    
    
    
      <category term="heroku" scheme="http://blog.decade.run/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="http://blog.decade.run/2020/06/08/note4/"/>
    <id>http://blog.decade.run/2020/06/08/note4/</id>
    <published>2020-06-08T01:13:08.000Z</published>
    <updated>2020-06-08T03:04:50.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可扩展对象"><a href="#可扩展对象" class="headerlink" title="可扩展对象"></a>可扩展对象</h3><p>一个对象默认是可以扩展的, 即可以为他们添加新的属性。以及它们的 <strong>proto</strong> 属性可以被更改。</p><h3 id="Object-freeze-obj"><a href="#Object-freeze-obj" class="headerlink" title="Object.freeze(obj)"></a>Object.freeze(obj)</h3><p>该方法可以冻结一个对象, 冻结的对象再也不能被修改, 不能再向这个对象添加新的属性, 删除已有的属性, 不能修改给对象的可配置性, 可枚举性, 可写性, 不能修改已有属性的值, 也不能修改该对象的原型</p><p>参数就是一个对象, 返回值也是该对象 只不过被冻结了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"decade"</span>,</span><br><span class="line">  age: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj === obj2); <span class="comment">// true;</span></span><br><span class="line"></span><br><span class="line">obj.name = <span class="string">"zi-o"</span>; <span class="comment">// 执行但是不会改变那么的值  还有就是在严格模式下会报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"name"</span>, &#123;</span><br><span class="line">  value: <span class="number">1</span>, </span><br><span class="line">writable: <span class="literal">true</span>, <span class="comment">// false,   //可写</span></span><br><span class="line">enumerable: <span class="literal">true</span>, <span class="comment">//false,  //可枚举</span></span><br><span class="line">configurable: <span class="literal">true</span>,  <span class="comment">//false, //可配置</span></span><br><span class="line">&#125;) <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">obj.__proto__.x = <span class="number">123</span>; <span class="comment">// 没问题</span></span><br><span class="line">obj.__proto__ = &#123;&#125;; <span class="comment">// 报错 修改了原型</span></span><br><span class="line"></span><br><span class="line">obj.x = <span class="number">123</span><span class="comment">// 执行但是不会报错 也不会为obj添加新的属性x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复习下原型链</span></span><br><span class="line">obj.__proto__ === obj.__proto__.constructor.prototype; </span><br><span class="line"><span class="comment">// 我这里没有构造函数 所以大概的总结下</span></span><br><span class="line"><span class="comment">// 实例上有__proto__ 构造函数上有prototype</span></span><br></pre></td></tr></table></figure><h3 id="Object-isFrozen-obj"><a href="#Object-isFrozen-obj" class="headerlink" title="Object.isFrozen(obj)"></a>Object.isFrozen(obj)</h3><ul><li>判断一个对象是否被冻结 参数是一个对象 返回值是true/false</li><li>一个对象是冻结的是指它不可扩展，所有属性都是不可配置的，且所有数据属性（即没有getter或setter组件的访问器的属性）都是不可写的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.isFrozen(&#123;&#125;) <span class="comment">// false 对象默认是可以扩展的</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(<span class="built_in">Object</span>.preventExtensions(&#123;&#125;)) <span class="comment">// false 不可被扩展的  空对象   就是冻结的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj); <span class="comment">// false  非空对象也是非冻结的</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtentsions(obj);</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj); <span class="comment">// false  // 让这个对象变的不可扩展,并不意味着这个对象变成了冻结对象, 因为属性a还是可以配置的 可修改的</span></span><br><span class="line"><span class="keyword">delete</span> obj.a;</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj); <span class="comment">// true 删除那个可以配置的属性后 就是冻结对象了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj2); </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj2, <span class="string">"a"</span>, &#123;<span class="attr">writable</span>: <span class="literal">false</span>&#125;); <span class="comment">// 不可修改</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj2); <span class="comment">// false  只是不能修改a属性 但obj2还是能配置 所以还是非冻结对象</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj2, <span class="string">"a"</span>, &#123;<span class="attr">configurable</span>: <span class="literal">false</span>&#125;); <span class="comment">// 不可配置</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj2); <span class="comment">// true 此时obj2不可修改不可配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理 可写不可配置 =&gt; 非冻结对象</span></span><br><span class="line"><span class="comment">// 只需要把可写改成不可写 =&gt; 冻结对象</span></span><br></pre></td></tr></table></figure><h3 id="Object-preventExtensions-obj"><a href="#Object-preventExtensions-obj" class="headerlink" title="Object.preventExtensions(obj)"></a>Object.preventExtensions(obj)</h3><p>让一个对象变的不可扩展，也就是永远不能再添加新的属性。<br>阻止添加自身的属性。但其对象类型的原型依然可以添加新的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.preventExtensions(obj);</span><br><span class="line">obj === obj2;  <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(empty) <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(empty);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(empty) <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> nonExtensible = &#123; <span class="attr">removable</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(nonExtensible);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(nonExtensible, <span class="string">"new"</span>, &#123; <span class="attr">value</span>: <span class="number">8675309</span> &#125;); <span class="comment">// 抛出TypeError异常</span></span><br></pre></td></tr></table></figure><h3 id="Object-isExtensible-obj"><a href="#Object-isExtensible-obj" class="headerlink" title="Object.isExtensible(obj)"></a>Object.isExtensible(obj)</h3><p>判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...可以变的不可扩展.</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(empty);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(empty); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 密封对象是不可扩展的.</span></span><br><span class="line"><span class="keyword">var</span> sealed = <span class="built_in">Object</span>.seal(&#123;&#125;);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(sealed); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 冻结对象也是不可扩展.</span></span><br><span class="line"><span class="keyword">var</span> frozen = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(frozen); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Object-seal-obj"><a href="#Object-seal-obj" class="headerlink" title="Object.seal(obj)"></a>Object.seal(obj)</h3><p>封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="built_in">Object</span>.seal(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj === obj1);</span><br><span class="line">obj.a = <span class="number">2</span> <span class="comment">// 可以修改密封对象的属性值</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"a"</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我被读取了"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)<span class="comment">// 报错</span></span><br><span class="line">obj.x = <span class="number">1</span>; <span class="comment">// 添加失败</span></span><br><span class="line"><span class="keyword">delete</span> obj.a <span class="comment">// 删除失败</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"y"</span>, &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;)<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="Object-isSealed-obj"><a href="#Object-isSealed-obj" class="headerlink" title="Object.isSealed(obj)"></a>Object.isSealed(obj)</h3><p>判断一个对象是否被密封。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.isSealed(empty); <span class="comment">// === false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你把一个空对象变的不可扩展,则它同时也会变成个密封对象.</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(empty);</span><br><span class="line"><span class="built_in">Object</span>.isSealed(empty); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但如果这个对象不是空对象,则它不会变成密封对象,因为密封对象的所有自身属性必须是不可配置的.</span></span><br><span class="line"><span class="keyword">var</span> hasProp = &#123; <span class="attr">bar</span>: <span class="string">"1"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(hasProp);</span><br><span class="line"><span class="built_in">Object</span>.isSealed(hasProp); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果把这个属性变的不可配置,则这个对象也就成了密封对象.</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(hasProp, <span class="string">"bar"</span>, &#123; <span class="attr">configurable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="built_in">Object</span>.isSealed(hasProp); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简单的方法来生成一个密封对象,当然是使用Object.seal.</span></span><br><span class="line"><span class="keyword">var</span> sealed = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.seal(sealed);</span><br><span class="line"><span class="built_in">Object</span>.isSealed(sealed); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个密封对象同时也是不可扩展的.</span></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(sealed); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个密封对象也可以是一个冻结对象,但不是必须的.</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(sealed); <span class="comment">// true ，所有的属性都是不可写的</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Object</span>.seal(&#123; <span class="attr">p</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(s2); <span class="comment">// false， 属性"p"可写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="built_in">Object</span>.seal(&#123; <span class="keyword">get</span> p() &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125; &#125;);</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(s3); <span class="comment">// true ，访问器属性不考虑可写不可写,只考虑是否可配置</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可扩展对象&quot;&gt;&lt;a href=&quot;#可扩展对象&quot; class=&quot;headerlink&quot; title=&quot;可扩展对象&quot;&gt;&lt;/a&gt;可扩展对象&lt;/h3&gt;&lt;p&gt;一个对象默认是可以扩展的, 即可以为他们添加新的属性。以及它们的 &lt;strong&gt;proto&lt;/strong&gt; 属性
      
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="笔记" scheme="http://blog.decade.run/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="http://blog.decade.run/2020/06/04/note/"/>
    <id>http://blog.decade.run/2020/06/04/note/</id>
    <published>2020-06-04T02:32:03.000Z</published>
    <updated>2020-06-04T02:40:18.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>你在哪个目录下创建, 那个目录一定要存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir(path, callback(err)) </span><br><span class="line"><span class="comment">// path 路径</span></span><br><span class="line"><span class="comment">// callback 回调函数 参数一个err</span></span><br></pre></td></tr></table></figure><h3 id="open"><a href="#open" class="headerlink" title="open"></a>open</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.open(path, [mode], callback(err, fd))</span><br><span class="line"><span class="comment">// path 可以是一个buffer/ 路径</span></span><br><span class="line"><span class="comment">// mode 详细见下面</span></span><br><span class="line"><span class="comment">// err 报错信息</span></span><br><span class="line"><span class="comment">// fd  如下</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>mode</th><th>mean</th></tr></thead><tbody><tr><td>r</td><td>读取文件，如果文件不存在则抛出异常</td></tr><tr><td>r+</td><td>读取并写入文件，如果文件不存在则抛出异常</td></tr><tr><td>rs</td><td>读取并写入文件，指示操作系统绕开本地文件系统缓存</td></tr><tr><td>w</td><td>写入文件，文件不存在会被创建，存在则清空后写入</td></tr><tr><td>wx</td><td>写入文件，排它方式打开</td></tr><tr><td>w+</td><td>读取并写入文件，文件不存在则创建文件，存在则清空后写入</td></tr><tr><td>wx+</td><td>和 w+ 类似，排他方式打开</td></tr><tr><td>a</td><td>追加写入，文件不存在则创建文件</td></tr><tr><td>ax</td><td>与 a 类似，排他方式打开</td></tr><tr><td>a+</td><td>读取并追加写入，不存在则创建</td></tr><tr><td>ax+</td><td>与 a+ 类似，排他方式打开</td></tr></tbody></table><h3 id="fd-文件描述符"><a href="#fd-文件描述符" class="headerlink" title="fd 文件描述符"></a>fd 文件描述符</h3><ol><li>操作系统会为每个打开的文件分配一个名为文件描述符的数值标识, 文件操作使用这些文件描述符来识别与追踪每个特定的文件,window系统使用了一个不同但概念类似的机制来追踪资源, 为了方便用户, nodejs抽象了不同操作系统间的差异, 为所有打开的文件分配了数值的文件描述符.</li><li>在nodejs中, 没操作一个文件, 文件描述符都是递增的, 文件描述符一般从3开始, 因为前面有0, 1, 2三个比较特殊的表述符, 分别代表process.stdin(标准输入), process.stdout(标准输出), process.stderr(错误输出)</li></ol><h3 id="readline"><a href="#readline" class="headerlink" title="readline"></a>readline</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br></pre></td></tr></table></figure><h3 id="createInterface"><a href="#createInterface" class="headerlink" title="createInterface"></a>createInterface</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用构造函数关联一个输入流 一个输出流</span></span><br></pre></td></tr></table></figure><h4 id="line事件"><a href="#line事件" class="headerlink" title="line事件"></a>line事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rl.on(<span class="string">"line"</span>, line =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log($&#123;line&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// line事件 当用户输入'\n \r \r\n'时触发 一般就是按回车</span></span><br></pre></td></tr></table></figure><h4 id="close事件"><a href="#close事件" class="headerlink" title="close事件"></a>close事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rl.on(<span class="string">"close"</span>, ()=&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"关闭输入流"</span>)</span><br><span class="line">  process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// close事件 就是用户不输入了 ctrl + c就能不输入了</span></span><br></pre></td></tr></table></figure><h4 id="question"><a href="#question" class="headerlink" title="question"></a>question</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rl.question(<span class="string">'你最喜欢的食物是什么？'</span>, (answer) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`你最喜欢的食物是 <span class="subst">$&#123;answer&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/" class="lazyload" data-src="/img/note/4.png"  alt="界面图"><br><img src="/" class="lazyload" data-src="/img/note/5.png"  alt="效果图"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="keyword">let</span> directoryName = (fileName = createTime());</span><br><span class="line"><span class="keyword">let</span> filePath = <span class="string">`../每日计划/<span class="subst">$&#123;directoryName&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> template = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户输入</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Ctrl + C 退出输入'</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout,</span><br><span class="line">  prompt: <span class="string">'请输入计划安排:   '</span></span><br><span class="line">&#125;);</span><br><span class="line">rl.prompt();</span><br><span class="line">rl.on(<span class="string">'line'</span>, (line) =&gt; &#123;</span><br><span class="line">  template += line + <span class="string">'\n'</span>;</span><br><span class="line">  rl.prompt();</span><br><span class="line">&#125;).on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`\n输入完成, 开始创建<span class="subst">$&#123;directoryName&#125;</span>文件夹!!`</span>);</span><br><span class="line">  createDailyPlan(fs);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDailyPlan</span>(<span class="params">fs</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建目录</span></span><br><span class="line">  fs.mkdir(<span class="string">`<span class="subst">$&#123;filePath&#125;</span>`</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;directoryName&#125;</span>文件夹, 创建成功`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`开始创建<span class="subst">$&#123;fileName&#125;</span>.txt文件`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建文件</span></span><br><span class="line">  fs.open(<span class="string">`<span class="subst">$&#123;filePath&#125;</span>/<span class="subst">$&#123;fileName&#125;</span>.txt`</span>, <span class="string">'w'</span>, (err, fd) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fileName&#125;</span>.txt文件, 创建成功`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始写入今日计划'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始写文件</span></span><br><span class="line">  fs.writeFile(<span class="string">`<span class="subst">$&#123;filePath&#125;</span>/<span class="subst">$&#123;fileName&#125;</span>.txt`</span>, <span class="string">`<span class="subst">$&#123;template&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'今日计划写入完成'</span>);</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件名所用到的时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">let</span> mouth = dateFormat(date.getMonth() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> day = dateFormat(date.getDate());</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;mouth&#125;</span>-<span class="subst">$&#123;day&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeStr = time &gt; <span class="number">9</span> ? time : time.toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line">  <span class="keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      突然想搞一个每日计划生产的东东
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="笔记" scheme="http://blog.decade.run/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue源码(二)</title>
    <link href="http://blog.decade.run/2020/05/28/vue-note2/"/>
    <id>http://blog.decade.run/2020/05/28/vue-note2/</id>
    <published>2020-05-27T22:34:48.000Z</published>
    <updated>2020-08-19T07:38:30.190Z</updated>
    
    <content type="html"><![CDATA[<h1>今日份啃代码!!!</h1><ul><li><p>接着上次的写, 我们先跑一下vue源码下面的example/commit/index.html 然后把引入的script的vue.min.js 改成我们自己生成的vue.js<br>然后 我们暂时不想看到请求 所以我把mock.js的引入也删除, app.js里面我就剩了下面这么丢丢东西  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    branches: [<span class="string">'master'</span>, <span class="string">'dev'</span>],</span><br><span class="line">    currentBranch: <span class="string">'master'</span>,</span><br><span class="line">    commits: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>然后浏览器打开index.html 按F12 进入控制台 点击Source, 如图<br><img src="/" class="lazyload" data-src="/img/vue/1.png"  alt="控制台"><br>你能看见src 这下面就是源码 然后我们打个断点 我在我15行位置打的如上图, 然后刷新浏览器<br><font color="red">上图的左侧</font> 进行操作</p></li><li><p>点击下一步那个按钮<br>控制台会提示进入了一个新的文件 我们找到那个文件 src/core/instance/index.js 代码我没贴完</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我的理解 就是不是生成环境 同时 没有用new 会提示报错</span></span><br><span class="line"><span class="comment">// 然后调用_init(options) 这个方法</span></span><br><span class="line"><span class="comment">// 这时的options 为</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    branches: [<span class="string">'master'</span>, <span class="string">'dev'</span>],</span><br><span class="line">    currentBranch: <span class="string">'master'</span>,</span><br><span class="line">    commits: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再点击下一步<br>代码位置在 src/core/instance/init.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm: Component = <span class="keyword">this</span> <span class="comment">// vm 就是 Vue&#123;  &#125;</span></span><br><span class="line">vm._uid = uid++ ; <span class="comment">// vm = Vue &#123; _uid: 0 &#125; 这个是vue组件的id号</span></span><br><span class="line">vm._isVue = <span class="literal">true</span>; <span class="comment">// vm = Vue &#123; _uid: 0, _isVue: true &#125; 尤大佬给的注释是一个避免被observed的标志 </span></span><br><span class="line"><span class="comment">// 下面进入 整合options </span></span><br><span class="line"><span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123; <span class="comment">// 最开始进来没有_isComponent 所以进入else</span></span><br><span class="line">  initInternalComponent(vm, options)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 添加$options</span></span><br><span class="line">  vm.$options = mergeOptions(</span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">    options || &#123;&#125;,</span><br><span class="line">    vm</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font font-size="20" color="yellow">resolveConstructorOptions(vm.constructor) 源码</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveConstructorOptions</span> (<span class="params">Ctor: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = Ctor.options</span><br><span class="line">  <span class="keyword">if</span> (Ctor.super) </span><br><span class="line">    <span class="keyword">const</span> superOptions = resolveConstructorOptions(Ctor.super)</span><br><span class="line">    <span class="keyword">const</span> cachedSuperOptions = Ctor.superOptions</span><br><span class="line">    <span class="keyword">if</span> (superOptions !== cachedSuperOptions) &#123;</span><br><span class="line">      Ctor.superOptions = superOptions</span><br><span class="line">      <span class="keyword">const</span> modifiedOptions = resolveModifiedOptions(Ctor)</span><br><span class="line">      <span class="keyword">if</span> (modifiedOptions) &#123;</span><br><span class="line">        extend(Ctor.extendOptions, modifiedOptions)</span><br><span class="line">      &#125;</span><br><span class="line">      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions)</span><br><span class="line">      <span class="keyword">if</span> (options.name) &#123;</span><br><span class="line">        options.components[options.name] = Ctor</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info">            <p>Ctor 就是 Vue的构造函数<br>Ctor.options 的值是 {components: {…}, directives: {…}, filters: {…}, _base: ƒ}<br>然后没有 super 所以 返回的就是 {components: {…}, directives: {…}, filters: {…}, _base: ƒ}</p>          </div><p><font font-size="20" color="yellow">emmmmm 我懒得去找 我把所有的strats的所有属性全部弄出来</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">strats = &#123;</span><br><span class="line">  components: mergeAssets,</span><br><span class="line">  directives: mergeAssets,</span><br><span class="line">  filters: mergeAssets,</span><br><span class="line">  beforeCreate: mergeHook,</span><br><span class="line">  created: mergeHook,</span><br><span class="line">  beforeMount: mergeHook,</span><br><span class="line">  mounted: mergeHook,</span><br><span class="line">  beforeUpdate: mergeHook,</span><br><span class="line">  updated: mergeHook,</span><br><span class="line">  beforeDestroy: mergeHook,</span><br><span class="line">  destroyed: mergeHook,</span><br><span class="line">  activated: mergeHook,</span><br><span class="line">  deactivated: mergeHook,</span><br><span class="line">  errorCaptured: mergeHook,</span><br><span class="line">  serverPrefetch: mergeHook,</span><br><span class="line">&#125;</span><br><span class="line">strats.data = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!vm) &#123;</span><br><span class="line">    <span class="keyword">if</span> (childVal &amp;&amp; <span class="keyword">typeof</span> childVal !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">'The "data" option should be a function '</span> +</span><br><span class="line">        <span class="string">'that returns a per-instance value in component '</span> +</span><br><span class="line">        <span class="string">'definitions.'</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> parentVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mergeDataOrFn(parentVal, childVal, vm)</span><br><span class="line">&#125;,</span><br><span class="line">strats.watch = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="comment">// work around Firefox's Object.prototype.watch...</span></span><br><span class="line">  <span class="keyword">if</span> (parentVal === nativeWatch) parentVal = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">if</span> (childVal === nativeWatch) childVal = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (!childVal) <span class="keyword">return</span> <span class="built_in">Object</span>.create(parentVal || <span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assertObjectType(key, childVal, vm)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!parentVal) <span class="keyword">return</span> childVal</span><br><span class="line">  <span class="keyword">const</span> ret = &#123;&#125;</span><br><span class="line">  extend(ret, parentVal)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> childVal) &#123;</span><br><span class="line">    <span class="keyword">let</span> parent = ret[key]</span><br><span class="line">    <span class="keyword">const</span> child = childVal[key]</span><br><span class="line">    <span class="keyword">if</span> (parent &amp;&amp; !<span class="built_in">Array</span>.isArray(parent)) &#123;</span><br><span class="line">      parent = [parent]</span><br><span class="line">    &#125;</span><br><span class="line">    ret[key] = parent</span><br><span class="line">      ? parent.concat(child)</span><br><span class="line">      : <span class="built_in">Array</span>.isArray(child) ? child : [child]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;,</span><br><span class="line">strats.props =</span><br><span class="line">strats.methods =</span><br><span class="line">strats.inject =</span><br><span class="line">strats.computed = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断 childVal是不是对象</span></span><br><span class="line">  <span class="keyword">if</span> (childVal &amp;&amp; process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assertObjectType(key, childVal, vm)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果不存在parentVal 就直接返回ChildVal对象</span></span><br><span class="line">  <span class="keyword">if</span> (!parentVal) <span class="keyword">return</span> childVal</span><br><span class="line">  <span class="keyword">const</span> ret = <span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="comment">// 创建一个新的对象</span></span><br><span class="line">  extend(ret, parentVal) <span class="comment">// 将parentVal上的属性放到新对象上</span></span><br><span class="line">  <span class="keyword">if</span> (childVal) extend(ret, childVal) <span class="comment">// 如果childVal存在 则也把childVal上的放上去</span></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line">strats.provide = mergeDataOrFn</span><br></pre></td></tr></table></figure></li></ul><p>  <font font-size="20" color="yellow">然后去找到mergeOptions() 方法</font><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前传入的应该是 &#123;components: &#123;…&#125;, directives: &#123;…&#125;, filters: &#123;…&#125;, _base: ƒ&#125;, &#123;&#125;, vm</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeOptions</span> (<span class="params"> <span class="regexp">//</span> 整合option</span></span></span><br><span class="line"><span class="function"><span class="params">  parent: Object, </span></span></span><br><span class="line"><span class="function"><span class="params">  child: Object, </span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123; </span><br><span class="line">    checkComponents(child) <span class="comment">// 判断options 里面是否有注册的子组件 options.components</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> child === <span class="string">'function'</span>) &#123;</span><br><span class="line">    child = child.options</span><br><span class="line">  &#125;</span><br><span class="line">  normalizeProps(child, vm) <span class="comment">// 判断是否有props  </span></span><br><span class="line">  normalizeInject(child, vm) <span class="comment">// 判断是否是inject</span></span><br><span class="line">  normalizeDirectives(child) <span class="comment">// 判断是否有自定义指令</span></span><br><span class="line">  <span class="comment">// 如果没有_base 但是又有extends mixins这两个属性 需要整合</span></span><br><span class="line">  <span class="keyword">if</span> (!child._base) &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.extends) &#123;</span><br><span class="line">      parent = mergeOptions(parent, child.extends, vm)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (child.mixins) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class="line">        parent = mergeOptions(parent, child.mixins[i], vm)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> key</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> parent) &#123; <span class="comment">// 开始遍历 属性 components, directives, filters, _base 这就是key的四个值 分别传入下面的mergeField方法</span></span><br><span class="line">    mergeField(key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> child) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasOwn(parent, key)) &#123; <span class="comment">// 判断 parent上面是否有key这个属性</span></span><br><span class="line">      mergeField(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mergeField</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> strat = strats[key] || defaultStrat</span><br><span class="line">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  <font font-size="20" color="yellow">checkComponents, normalizeProps, normalizeInject, normalizeDirectives</font><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 components 子组件来遍历 检验组件名字是否合法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkComponents</span> (<span class="params">options: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> options.components) &#123;</span><br><span class="line">    validateComponentName(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// unicodeRegExp.source这个是检验中文字符啥的</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateComponentName</span> (<span class="params">name: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^[a-zA-Z][\\-\\.0-9_<span class="subst">$&#123;unicodeRegExp.source&#125;</span>]*$`</span>).test(name)) &#123;</span><br><span class="line">    warn(</span><br><span class="line">      <span class="string">'Invalid component name: "'</span> + name + <span class="string">'". Component names '</span> +</span><br><span class="line">      <span class="string">'should conform to valid custom element name in html5 specification.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// export const isBuiltInTag = makeMap('slot,component', true)  判断是否是内置的tag</span></span><br><span class="line">  <span class="comment">// export const isReservedTag = (tag: string): ?boolean =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//  return isHTMLTag(tag) || isSVG(tag)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 下面的就是让你不要用html内置tag来命名组件</span></span><br><span class="line">  <span class="keyword">if</span> (isBuiltInTag(name) || config.isReservedTag(name)) &#123;</span><br><span class="line">    warn(</span><br><span class="line">      <span class="string">'Do not use built-in or reserved HTML elements as component '</span> +</span><br><span class="line">      <span class="string">'id: '</span> + name</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个方法最后传出的props是数组样子 最后 被转换成了对象  最后转成的格式 options.props = &#123; title: &#123;type : null&#125;, .... &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeProps</span> (<span class="params">options: Object, vm: ?Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = options.props</span><br><span class="line">  <span class="keyword">if</span> (!props) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> i, val, name</span><br><span class="line">  <span class="comment">// 如果props是数组 例如 props: ['title', 'likes', 'isPublished', 'commentIds', 'author']</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(props)) &#123;</span><br><span class="line">    i = props.length</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      val = props[i]</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'string'</span>) &#123;</span><br><span class="line">        name = camelize(val)</span><br><span class="line">        <span class="comment">// camelize 这个方法是用来val是否用-来连接的</span></span><br><span class="line">        res[name] = &#123; <span class="attr">type</span>: <span class="literal">null</span> &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        warn(<span class="string">'props must be strings when using array syntax.'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPlainObject(props)) &#123;</span><br><span class="line">    <span class="comment">// 如果传的是对象</span></span><br><span class="line">    <span class="comment">// export function isPlainObject (obj: any): boolean &#123;</span></span><br><span class="line">      <span class="comment">//return _toString.call(obj) === '[object Object]'</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">      val = props[key]</span><br><span class="line">      name = camelize(key)</span><br><span class="line">      res[name] = isPlainObject(val)</span><br><span class="line">        ? val</span><br><span class="line">        : &#123; <span class="attr">type</span>: val &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    warn(</span><br><span class="line">      <span class="string">`Invalid value for option "props": expected an Array or an Object, `</span> +</span><br><span class="line">      <span class="string">`but got <span class="subst">$&#123;toRawType(props)&#125;</span>.`</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  options.props = res </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 功能和上面的相似 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeInject</span> (<span class="params">options: Object, vm: ?Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inject = options.inject</span><br><span class="line">  <span class="keyword">if</span> (!inject) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> normalized = options.inject = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(inject)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; inject.length; i++) &#123;</span><br><span class="line">      normalized[inject[i]] = &#123; <span class="attr">from</span>: inject[i] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPlainObject(inject)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> inject) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = inject[key]</span><br><span class="line">      normalized[key] = isPlainObject(val)</span><br><span class="line">        ? extend(&#123; <span class="attr">from</span>: key &#125;, val)</span><br><span class="line">        : &#123; <span class="attr">from</span>: val &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    warn(</span><br><span class="line">      <span class="string">`Invalid value for option "inject": expected an Array or an Object, `</span> +</span><br><span class="line">      <span class="string">`but got <span class="subst">$&#123;toRawType(inject)&#125;</span>.`</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeDirectives</span> (<span class="params">options: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dirs = options.directives</span><br><span class="line">  <span class="keyword">if</span> (dirs) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> dirs) &#123;</span><br><span class="line">      <span class="keyword">const</span> def = dirs[key]</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> def === <span class="string">'function'</span>) &#123;</span><br><span class="line">        dirs[key] = &#123; <span class="attr">bind</span>: def, <span class="attr">update</span>: def &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  <font font-size="20" color="yellow">mergeField defaultStrat mergeAssets mergeHook</font><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeField</span> (<span class="params">key</span>) </span>&#123; <span class="comment">// 根据拿到的键值 strats[key]存在 strat就变成了一个函数 否则就是默认的函数</span></span><br><span class="line">  <span class="keyword">const</span> strat = strats[key] || defaultStrat</span><br><span class="line">  options[key] = strat(parent[key], child[key], vm, key) </span><br><span class="line">  <span class="comment">// options 是一个空对象  因为无论是mergeHook还是mergeAssets还是defaultStrat参数不统一  但是前面的形参都是一样的 所以我们传最多的</span></span><br><span class="line">  <span class="comment">// 最后胜出的这个options 是包含 parent(vue构造函数原型上的components, filters, directive, _base被defaultStrat 返回的是Vue&#123;&#125; )还有child上的所有东西</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> strats = config.optionMergeStrategies <span class="comment">// &#123;  &#125; 空对象</span></span><br><span class="line">LIFECYCLE_HOOKS.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">  strats[hook] = mergeHook <span class="comment">// 注册函数</span></span><br><span class="line">&#125;)</span><br><span class="line">ASSET_TYPES.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  strats[type + <span class="string">'s'</span>] = mergeAssets <span class="comment">// 注册函数</span></span><br><span class="line">&#125;)</span><br><span class="line">LIFECYCLE_HOOKS = [</span><br><span class="line">  <span class="string">'beforeCreate'</span>,</span><br><span class="line">  <span class="string">'created'</span>,</span><br><span class="line">  <span class="string">'beforeMount'</span>,</span><br><span class="line">  <span class="string">'mounted'</span>,</span><br><span class="line">  <span class="string">'beforeUpdate'</span>,</span><br><span class="line">  <span class="string">'updated'</span>,</span><br><span class="line">  <span class="string">'beforeDestroy'</span>,</span><br><span class="line">  <span class="string">'destroyed'</span>,</span><br><span class="line">  <span class="string">'activated'</span>,</span><br><span class="line">  <span class="string">'deactivated'</span>,</span><br><span class="line">  <span class="string">'errorCaptured'</span>,</span><br><span class="line">  <span class="string">'serverPrefetch'</span></span><br><span class="line">],</span><br><span class="line">ASSET_TYPES = [</span><br><span class="line">  <span class="string">'component'</span>,</span><br><span class="line">  <span class="string">'directive'</span>,</span><br><span class="line">  <span class="string">'filter'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultStrat = <span class="function"><span class="keyword">function</span> (<span class="params">parentVal: any, childVal: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> childVal === <span class="literal">undefined</span></span><br><span class="line">    ? parentVal</span><br><span class="line">    : childVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeHook</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: ?Array&lt;Function&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: ?Function | ?Array&lt;Function&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Array</span>&lt;<span class="title">Function</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = childVal</span><br><span class="line">    ? parentVal</span><br><span class="line">      ? parentVal.concat(childVal)</span><br><span class="line">      : <span class="built_in">Array</span>.isArray(childVal)</span><br><span class="line">        ? childVal</span><br><span class="line">        : [childVal]</span><br><span class="line">    : parentVal</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">    ? dedupeHooks(res)</span><br><span class="line">    : res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupeHooks</span> (<span class="params">hooks</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hooks.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.indexOf(hooks[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">      res.push(hooks[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parentVal 传入的Vue构造函数原型上的options[key]</span></span><br><span class="line"><span class="comment">// childVal 传入的是我们构造实例的options[key]</span></span><br><span class="line"><span class="comment">// vm 就是Vue&#123;&#125;</span></span><br><span class="line"><span class="comment">// key 就是 传入的key</span></span><br><span class="line"><span class="comment">// 这个方法作用是 如果 我们实例化的传的options中有 这么几个字段components filters directives 就会把 parentVal[key] 作为 childVal[key]的原型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeAssets</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="built_in">Object</span>.create(parentVal || <span class="literal">null</span>) </span><br><span class="line">  <span class="keyword">if</span> (childVal) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; assertObjectType(key, childVal, vm)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这个方法判断 childVal 是不是 object</span></span><br><span class="line"><span class="comment">    function assertObjectType (name: string, value: any, vm: ?Component) &#123;</span></span><br><span class="line"><span class="comment">      if (!isPlainObject(value)) &#123;</span></span><br><span class="line"><span class="comment">        warn(</span></span><br><span class="line"><span class="comment">          `Invalid value for option "$&#123;name&#125;": expected an Object, ` +</span></span><br><span class="line"><span class="comment">          `but got $&#123;toRawType(value)&#125;.`,</span></span><br><span class="line"><span class="comment">          vm</span></span><br><span class="line"><span class="comment">        )</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> extend(res, childVal)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将childVal上面的属性 放到res 对象上</span></span><br><span class="line"><span class="comment">    export function extend (to: Object, _from: ?Object): Object &#123;</span></span><br><span class="line"><span class="comment">      for (const key in _from) &#123;</span></span><br><span class="line"><span class="comment">        to[key] = _from[key]</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      return to</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  <font font-size="20" color="yellow"> mergeDataOrFn  mergeData</font><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeDataOrFn</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  childVal: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): ?<span class="title">Function</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!vm) &#123;</span><br><span class="line">    <span class="comment">// in a Vue.extend merge, both should be functions</span></span><br><span class="line">    <span class="keyword">if</span> (!childVal) &#123;</span><br><span class="line">      <span class="keyword">return</span> parentVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!parentVal) &#123;</span><br><span class="line">      <span class="keyword">return</span> childVal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">mergedDataFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mergeData(</span><br><span class="line">        <span class="keyword">typeof</span> childVal === <span class="string">'function'</span> ? childVal.call(<span class="keyword">this</span>, <span class="keyword">this</span>) : childVal,</span><br><span class="line">        <span class="keyword">typeof</span> parentVal === <span class="string">'function'</span> ? parentVal.call(<span class="keyword">this</span>, <span class="keyword">this</span>) : parentVal</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">mergedInstanceDataFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// instance merge</span></span><br><span class="line">      <span class="keyword">const</span> instanceData = <span class="keyword">typeof</span> childVal === <span class="string">'function'</span></span><br><span class="line">        ? childVal.call(vm, vm)</span><br><span class="line">        : childVal</span><br><span class="line">      <span class="keyword">const</span> defaultData = <span class="keyword">typeof</span> parentVal === <span class="string">'function'</span></span><br><span class="line">        ? parentVal.call(vm, vm)</span><br><span class="line">        : parentVal</span><br><span class="line">      <span class="keyword">if</span> (instanceData) &#123;</span><br><span class="line">        <span class="keyword">return</span> mergeData(instanceData, defaultData)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultData</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Reflect.ownKeys() 返回一个由目标对象自身的属性键组成的数组。 也能读出symbol属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeData</span> (<span class="params">to: Object, from: ?Object</span>): <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">from</span>) <span class="keyword">return</span> to</span><br><span class="line">  <span class="keyword">let</span> key, toVal, fromVal</span><br><span class="line"></span><br><span class="line">  <span class="comment">//hasSymbol 是否支持原生的Symbol 和 Reflect</span></span><br><span class="line">  <span class="keyword">const</span> keys = hasSymbol</span><br><span class="line">    ? <span class="built_in">Reflect</span>.ownKeys(<span class="keyword">from</span>)</span><br><span class="line">    : <span class="built_in">Object</span>.keys(<span class="keyword">from</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    <span class="comment">// in case the object is already observed...</span></span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'__ob__'</span>) <span class="keyword">continue</span> <span class="comment">// 判断是否是响应式对象</span></span><br><span class="line">    toVal = to[key]</span><br><span class="line">    fromVal = <span class="keyword">from</span>[key]</span><br><span class="line">    <span class="keyword">if</span> (!hasOwn(to, key)) &#123; <span class="comment">// 如果to没有这个键值</span></span><br><span class="line">      <span class="keyword">set</span>(to, key, fromVal) // 就给to上加上这个键值 并赋值 这个<span class="keyword">set</span>方法会派发一次更新</span><br><span class="line">    &#125; else if (</span><br><span class="line">      toVal !== fromVal &amp;&amp;</span><br><span class="line">      isPlainObject(toVal) &amp;&amp;</span><br><span class="line">      isPlainObject(fromVal)</span><br><span class="line">    ) &#123;</span><br><span class="line">      mergeData(toVal, fromVal) <span class="comment">// 如果toval和fromval 不相等且都是对象 则递归</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue源码(一)</title>
    <link href="http://blog.decade.run/2020/05/26/vue-note1/"/>
    <id>http://blog.decade.run/2020/05/26/vue-note1/</id>
    <published>2020-05-25T22:34:48.000Z</published>
    <updated>2020-05-29T01:26:43.039Z</updated>
    
    <content type="html"><![CDATA[<h1>今天开始正式接触 vue 源码, 在结合小破站上的学习同时 自己也在摸着走下去, 冲啊!!!</h1><p>讲道理 vue的源码已经被我放了很久了, 之前真的就只是在看源码, 突然觉得自己好蠢 , 今天逛小破站的时候 发现了一个视频 讲的是怎么配置vue源码环境..</p><p>我…</p><p>行吧, 我也尝试着去弄了下, 嗯 失败了 </p><p>失败不可怕, 所以我到处找怎么弄得 </p><p>奈何本人的webpack 打包啥的 一窍不通(后期补补) 只能搜到一个尝试一下 以后得改改</p><h3 id="下载vue源码-我看的是2-6-1的"><a href="#下载vue源码-我看的是2-6-1的" class="headerlink" title="下载vue源码 我看的是2.6.1的"></a>下载vue源码 我看的是2.6.1的</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/vue.git</span><br><span class="line">npm i </span><br><span class="line">npm dev</span><br></pre></td></tr></table></figure><p>简单的步骤就是这样 其实中间我暂时还是踩了很多坑的,<br><img src="/" class="lazyload" data-src="/img/note/3.png"  alt="报错"></p><p>我们先看红的那一块, 因为vue打包是用的rollup打包的 对window不友好… 当然有钱的小伙伴可以买个mac(口红!!!)</p><p>首先我们找到node_modules\rollup-plugin-alias\dist\rollup-plugin-alias.js这个文件</p><p>改一下这句代码, 大概位置在70行 </p><p>为了方面 我粘了一大堆代码(为了水字数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">resolveId(importee, importer) &#123;</span><br><span class="line">  <span class="keyword">const</span> importeeId = normalizeId(importee);</span><br><span class="line">  <span class="keyword">const</span> importerId = normalizeId(importer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First match is supposed to be the correct one</span></span><br><span class="line">  <span class="keyword">const</span> toReplace = aliasKeys.find(<span class="function"><span class="params">key</span> =&gt;</span> matches(key, importeeId));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!toReplace || !importerId) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// const entry = options[toReplace]; // 这是原来的</span></span><br><span class="line">  <span class="keyword">const</span> entry = normalizeId(options[toReplace]); <span class="comment">// 改成这样</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> updatedId = normalizeId(importeeId.replace(toReplace, entry));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isFilePath(updatedId)) &#123;</span><br><span class="line">    <span class="keyword">const</span> directory = path.posix.dirname(importerId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Resolve file names</span></span><br><span class="line">    <span class="keyword">const</span> filePath = path.posix.resolve(directory, updatedId);</span><br><span class="line">    <span class="keyword">const</span> match = resolve.map(<span class="function"><span class="params">ext</span> =&gt;</span> (endsWith(ext, filePath) ? filePath : <span class="string">`<span class="subst">$&#123;filePath&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>))</span><br><span class="line">      .find(exists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">      updatedId = match;</span><br><span class="line">      <span class="comment">// To keep the previous behaviour we simply return the file path</span></span><br><span class="line">      <span class="comment">// with extension</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (endsWith(<span class="string">'.js'</span>, filePath)) &#123;</span><br><span class="line">      updatedId = filePath;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      updatedId = filePath + <span class="string">'.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if alias is windows absoulate path return resolved path or</span></span><br><span class="line">  <span class="comment">// rollup on windows will throw:</span></span><br><span class="line">  <span class="comment">//  [TypeError: Cannot read property 'specifier' of undefined]</span></span><br><span class="line">  <span class="keyword">if</span> (VOLUME.test(entry)) &#123;</span><br><span class="line">    <span class="keyword">return</span> path__default.resolve(updatedId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> updatedId;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后还有个坑 就是  路径千万不有中文路径, 报错改半天 然后还是报错 最后把中文文件名改成英文的 就ok了!!!</p><p>然后在package.json 的script </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:web-full-dev --sourcemap"</span>,</span><br></pre></td></tr></table></figure><p>然后就能生成map了 然后自己去谷歌打断点!!!</p><h3 id="makeMap"><a href="#makeMap" class="headerlink" title="makeMap"></a>makeMap</h3><p>为什么突然写这个呢? 大概是突然看见 然后去研究了一下 然后又补了下自己的空缺</p><p>这个方法的路径是在src/shared/utils.js 106行这个位置<br>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">makeMap</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  str: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  expectsLowerCase?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): (<span class="params">key: string</span>) =&gt; <span class="title">true</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> list: <span class="built_in">Array</span>&lt;string&gt; = str.split(<span class="string">','</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    map[list[i]] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> expectsLowerCase</span><br><span class="line">    ? <span class="function"><span class="params">val</span> =&gt;</span> map[val.toLowerCase()]</span><br><span class="line">    : <span class="function"><span class="params">val</span> =&gt;</span> map[val]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数是字符串 然后看见下面有个split(“,”) 可以猜测一下 这个字符串的中间以逗号来区分<br>第二个参数是个可选的布尔型 结合return 返回的 样子来看 判断需不需要把val给转成大写<br>在看里面 生成一个map对象<br>把str分割成数组<br>给map赋值 键名就是切割出来的每一项  键值就是 true<br>返回的是一个函数 传入一个val 根据这个val是否存在map中 返回true / undefined</p><p>然后我在src/platforms/utils/elements.js里面找到了 这个文件名大概就是说解析html的<br>然后开始找实际的使用地方 代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isHTMLTag = makeMap(</span><br><span class="line">  <span class="string">'html,body,base,head,link,meta,style,title,'</span> +</span><br><span class="line">  <span class="string">'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,'</span> +</span><br><span class="line">  <span class="string">'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,'</span> +</span><br><span class="line">  <span class="string">'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,'</span> +</span><br><span class="line">  <span class="string">'s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,'</span> +</span><br><span class="line">  <span class="string">'embed,object,param,source,canvas,script,noscript,del,ins,'</span> +</span><br><span class="line">  <span class="string">'caption,col,colgroup,table,thead,tbody,td,th,tr,'</span> +</span><br><span class="line">  <span class="string">'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,'</span> +</span><br><span class="line">  <span class="string">'output,progress,select,textarea,'</span> +</span><br><span class="line">  <span class="string">'details,dialog,menu,menuitem,summary,'</span> +</span><br><span class="line">  <span class="string">'content,element,shadow,template,blockquote,iframe,tfoot'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this map is intentionally selective, only covering SVG elements that may</span></span><br><span class="line"><span class="comment">// contain child elements.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isSVG = makeMap(</span><br><span class="line">  <span class="string">'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,'</span> +</span><br><span class="line">  <span class="string">'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,'</span> +</span><br><span class="line">  <span class="string">'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view'</span>,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 应该是在解析的时候判断是否存在这标签 存在就解析 不存在就报错 .. 总感觉不对 2333</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://blog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript 运行机制</title>
    <link href="http://blog.decade.run/2020/05/25/note3/"/>
    <id>http://blog.decade.run/2020/05/25/note3/</id>
    <published>2020-05-24T22:34:48.000Z</published>
    <updated>2020-06-08T01:14:57.657Z</updated>
    
    <content type="html"><![CDATA[<p>开始琢磨vue的源码(2.6)的 在看nextTick 发现了自己知识盲区, 然后开始自己的踩雷</p><h4 id="javascript-是一门单线程语言"><a href="#javascript-是一门单线程语言" class="headerlink" title="javascript 是一门单线程语言"></a>javascript 是一门单线程语言</h4><p>最新的HTML5中提出了Web-Worker, 但javacript的本质还是一门单线程语言, 所有说javascript是多线程语言都是纸老虎<br>web-Worker 允许javascript脚本 创建多个线程, 但是子线程完全受主线程控制, 且子线程不能操作DOM</p><h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><ol><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</li><li>排队的任务过多,  一个一个执行中, cpu 很多时间是空闲的, 这时javascript 可以挂起等待中的任务, 先运行后面的任务, 等到IO设备返回结果时, 再运行挂起的任务</li><li>基于上面, 所以有了同步任务和异步任务. 同步任务指的是在主程序上排队执行的任务, 只有前一个完成, 才能执行后面的. 异步任务就是不进入子进程, 进入任务队列. 只有任务队列通知主进程某个异步任务可以执行了, 该任务才会进入子进程</li></ol><h4>执行机制如下: </h4><li>所有同步任务都在主线程上执行，形成一个执行栈(execution context stack)</li><li>主线程之外，还存在一个"任务队列"(task queue). 只要异步任务有了运行结果，就在"任务队列"之中放置一个事件</li><li>一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行</li><li>主线程不断重复上面的第三步</li><p><font color="red">只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。</font></p><p><img src="/" class="lazyload" data-src="/img/note/1.png"  alt="图例"></p><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>显而易见 上面的代码执行结果为 先打印执行2 再等待3s 打印1 我们再看下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">sleep(<span class="number">100000</span>);</span><br></pre></td></tr></table></figure><p>上面的代码等到我们看见打印出来1 感觉远远不止过了1秒 再看我们把参数设置为0秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面的参数0 代表的是立即执行嘛 答案是否定的 </p><p>我们结合上面的执行机制 来捋一捋setTimeout</p><ol><li>setTimeout是异步任务, 所以会放进任务队列中 </li><li>然后注册setTimeout的回调函数</li><li>过了设置的时间后, 会给主线程一个提示, 提示可以执行这个方法了</li><li>这时主线程会查看当前的执行栈是否为空, 如果是空 则执行setTimeout回调, 否就等待执行栈为空的时候 再执行回调</li></ol><p>所以参数0 这个意思只是为了尽快的进入执行栈中执行, 还有就是你设置的延迟几秒后执行, 有时候不一定就是你设置的几秒</p><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h4><p>和setTimeout 不同的地方就是 会每隔固定的时间 推一个异步任务到任务队列 然后也是等待执行栈空了 ,再执行</p><p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>除了广义的同步与异步任务外, 还有着更加精细的定义</p><ol><li>宏任务(macro-task) 包括整体代码script，setTimeout，setInterval</li><li>微任务(macro-task) Promise，process.nextTick</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>按照上面的事件循环机制来讲<br>首先这一大块代码作为一个宏任务进入主线程<br>先遇到setInterval 注册 然后丢到宏任务的事件队列中<br>然后找到其中的微任务new Promise 所以会先打印出2<br>然后执行resolve() 打印出3<br>然后打印4<br>最后打印出1 </p><p><img src="/" class="lazyload" data-src="/img/note/2.png"  alt="图例"></p>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="js" scheme="http://blog.decade.run/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>echarts笔记</title>
    <link href="http://blog.decade.run/2020/05/21/note2/"/>
    <id>http://blog.decade.run/2020/05/21/note2/</id>
    <published>2020-05-20T22:05:17.000Z</published>
    <updated>2020-05-21T08:43:27.744Z</updated>
    
    <content type="html"><![CDATA[<p>今天踩踩echarts, 被坑到的地方还是有些许的!!!<br>废话不多说, 没啥好介绍的直接上步骤</p><h3 id="怎么安装echarts"><a href="#怎么安装echarts" class="headerlink" title="怎么安装echarts"></a>怎么安装echarts</h3><p>安装这个, <a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">官网</a>也给了npm的安装方法</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><p>因为我是在vue项目中用的echarts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中引入</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span><br><span class="line"><span class="comment">// 挂载在vue上, 后面可以直接用了</span></span><br><span class="line">Vue.prototype.$echarts = echarts;</span><br><span class="line"><span class="comment">// 进入你自己要用echarts的页面 我只把基本怎么用的代码写了</span></span><br><span class="line"><span class="keyword">let</span> myCharts = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'myChart'</span>))</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  tooltip: &#123;&#125;,</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">      data: []</span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;&#125;,</span><br><span class="line">  series: [&#123;</span><br><span class="line">      name: <span class="string">''</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      data: []</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line">myCharts.setOption(options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然你也可以按需引入 我还是推荐按需引入的 进入到你要用到echarts的vue页面</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span>;</span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'echarts2'</span>));</span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">'item'</span>,</span><br><span class="line">    formatter: <span class="string">'&#123;a&#125;&lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  legend: <span class="keyword">this</span>.legend,</span><br><span class="line">  <span class="comment">//饼图中各模块的颜色</span></span><br><span class="line">  color: [<span class="string">'#32dadd'</span>, <span class="string">'#b6a2de'</span>, <span class="string">'#5ab1ef'</span>, <span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'#ccc'</span>],</span><br><span class="line">  <span class="comment">// 饼图数据</span></span><br><span class="line">  series: &#123;</span><br><span class="line">    name: <span class="string">'例子'</span>,</span><br><span class="line">    type: <span class="string">'pie'</span>, <span class="comment">//echarts图的类型   pie代表饼图</span></span><br><span class="line">    radius: <span class="string">'50%'</span>, <span class="comment">//饼图中饼状部分的大小所占整个父元素的百分比</span></span><br><span class="line">    center: [<span class="string">'50%'</span>, <span class="string">'35%'</span>], <span class="comment">//整个饼图在整个父元素中的位置</span></span><br><span class="line">    data: <span class="keyword">this</span>.data,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      normal: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">          formatter: <span class="string">'&#123;d&#125;%'</span></span><br><span class="line">          <span class="comment">// show: true //饼图上是否出现标注文字 标注各模块代表什么  默认是true</span></span><br><span class="line">          <span class="comment">// position: 'inner' //控制饼图上标注文字相对于饼图的位置  默认位置在饼图外</span></span><br><span class="line">        &#125;,</span><br><span class="line">        labelLine: &#123;</span><br><span class="line">          show: <span class="literal">true</span> <span class="comment">//官网demo里外部标注上的小细线的显示隐藏    默认显示</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">myChart.setOption(option);</span><br><span class="line"><span class="comment">// 这样基本就能使用了</span></span><br></pre></td></tr></table></figure><h3 id="介绍下echarts-的配置"><a href="#介绍下echarts-的配置" class="headerlink" title="介绍下echarts 的配置"></a>介绍下echarts 的配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我没有用过的注释了 后面细细研究</span></span><br><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  title: &#123;&#125;, <span class="comment">// 标题组件，包含主标题和副标题。</span></span><br><span class="line">  legend: &#123;&#125;, <span class="comment">// 图例组件。</span></span><br><span class="line">  grid: &#123;&#125;, <span class="comment">// 直角坐标系内绘图网格</span></span><br><span class="line">  xAxis: &#123;&#125;, <span class="comment">//直角坐标系 grid 中的 x 轴</span></span><br><span class="line">  yAxis: &#123;&#125;, <span class="comment">// 直角坐标系 grid 中的 y 轴</span></span><br><span class="line">  <span class="comment">// polar: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// radiusAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// angleAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// radar: &#123;&#125;,</span></span><br><span class="line">  dataZoon: [&#123;&#125;], <span class="comment">// dataZoom 组件 用于区域缩放</span></span><br><span class="line">  <span class="comment">// visualMap: [&#123;&#125;],</span></span><br><span class="line">  tooltip: &#123;&#125;, <span class="comment">// 提示框组件的通用介绍：</span></span><br><span class="line">  <span class="comment">// axisPointer: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// toolbox: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// brush: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// geo: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// parallel: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// parallelAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// singleAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// timeline: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// graphic: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// calendar: &#123;&#125;,</span></span><br><span class="line">  dataset: &#123;&#125;, <span class="comment">//数据集（dataset）组件用于单独的数据集声明</span></span><br><span class="line">  <span class="comment">// aria: &#123;&#125;,</span></span><br><span class="line">  series: [&#123;&#125;], <span class="comment">// 系列列表。每个系列通过 type 决定自己的图表类型</span></span><br><span class="line">  color: [<span class="string">'#c23531'</span>,<span class="string">'#2f4554'</span>, <span class="string">'#61a0a8'</span>, <span class="string">'#d48265'</span>, <span class="string">'#91c7ae'</span>,<span class="string">'#749f83'</span>,  <span class="string">'#ca8622'</span>, <span class="string">'#bda29a'</span>,<span class="string">'#6e7074'</span>, <span class="string">'#546570'</span>, <span class="string">'#c4ccd3'</span>], <span class="comment">// 调色盘颜色列表。如果系列没有设置颜色，则会依次循环从该列表中取颜色作为系列颜色。 </span></span><br><span class="line">  backgroundColor: <span class="string">'transparent'</span>, <span class="comment">// 默认透明</span></span><br><span class="line">  textStyle: &#123;&#125;, <span class="comment">// 全局的字体样式。</span></span><br><span class="line">  animation: <span class="literal">true</span>, <span class="comment">// 开启动画</span></span><br><span class="line">  animationThreshold: <span class="number">2000</span>, <span class="comment">// 是否开启动画的阈值，当单个系列显示的图形数量大于这个阈值时会关闭动画。</span></span><br><span class="line">  animationDuration: <span class="number">1000</span>, <span class="comment">// 初始动画的时长，支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的初始动画效果：</span></span><br><span class="line">  animationEasing: cubicOut, <span class="comment">// 初始动画的缓动效果。不同的缓动效果可以[参考](https://echarts.apache.org/examples/zh/editor.html?c=line-easing)</span></span><br><span class="line">  animationDelay: <span class="number">0</span>, <span class="comment">// 初始动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的初始动画效果。</span></span><br><span class="line">  animationDurationUpdate: <span class="number">300</span>, <span class="comment">// 数据更新动画的时长。 支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的更新动画效果：</span></span><br><span class="line">  animationEasingUpdate: cubicOut, <span class="comment">// 数据更新动画的缓动效果。</span></span><br><span class="line">  animationDelayUpdate: <span class="number">0</span>, <span class="comment">// 数据更新动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的更新动画效果。</span></span><br><span class="line">  blendMode: <span class="string">'source-over'</span>, <span class="comment">// 图形的混合模式，不同的混合模式见 https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation 。</span></span><br><span class="line">  hoverLayerThreshold: <span class="number">3000</span>, <span class="comment">//图形数量阈值，决定是否开启单独的 hover 层，在整个图表的图形数量大于该阈值时开启单独的 hover 层。</span></span><br><span class="line">  useUTC: <span class="literal">false</span> <span class="comment">//是否使用 UTC 时间。</span></span><br><span class="line">&#125;</span><br><span class="line">animationDuration: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据时长越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">animationDelay: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据延迟越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">animationDurationUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据时长越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">animationDelayUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据延迟越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = &#123;</span><br><span class="line">  show: <span class="literal">true</span>, <span class="comment">//显示title</span></span><br><span class="line">  text: <span class="string">'例子'</span>, <span class="comment">// 主标题文字</span></span><br><span class="line">  link: <span class="string">'xxxx.xxxx.com'</span>, <span class="comment">// 超链接</span></span><br><span class="line">  target: <span class="string">'blank'</span>, <span class="comment">// 新窗口打开 self当前窗口打开</span></span><br><span class="line">  textStyle: &#123;</span><br><span class="line">    color: <span class="string">'#ccc'</span>, <span class="comment">// 主标题文字</span></span><br><span class="line">    fontStyle: <span class="string">'normal'</span>, <span class="comment">// 主标题文字风格 'italic' | 'oblique'</span></span><br><span class="line">    fontWeight: <span class="string">'normal'</span>, <span class="comment">//粗细 bold | bolder | lighter | 100 | 200 | 300 | 400</span></span><br><span class="line">    fontFamily: <span class="string">'宋体'</span>, <span class="comment">// 字体</span></span><br><span class="line">    lineHeight: <span class="number">10</span>, <span class="comment">// 行高</span></span><br><span class="line">    width: , <span class="comment">// 一般不指定, 宽度 如果不指定rich不能使用width 和height 可用百分比</span></span><br><span class="line">    height: , <span class="comment">// 一般不指定</span></span><br><span class="line">    textBorderColor: <span class="string">'transparent'</span>, <span class="comment">//文字本身的描边颜色。</span></span><br><span class="line">    textBorderWidth: <span class="number">2</span>, <span class="comment">// 文字本身的描边宽度。</span></span><br><span class="line">    textShadowColor: <span class="string">'transparent'</span>, <span class="comment">//文字本身的阴影颜色。</span></span><br><span class="line">    textShadowBlur: <span class="number">10</span>, <span class="comment">// 阴影长度</span></span><br><span class="line">    textShadowOffsetX: <span class="number">5</span>,</span><br><span class="line">    textShadowOffsetY: <span class="number">5</span>, <span class="comment">// 偏移</span></span><br><span class="line">    rich: &#123;&#125; <span class="comment">// 富文本样式 例如下</span></span><br><span class="line">    <span class="comment">// label: &#123;</span></span><br><span class="line">    <span class="comment">// // 在文本中，可以对部分文本采用 rich 中定义样式。</span></span><br><span class="line">    <span class="comment">// // 这里需要在文本中使用标记符号：</span></span><br><span class="line">    <span class="comment">// // `&#123;styleName|text content text content&#125;` 标记样式名。</span></span><br><span class="line">    <span class="comment">// // 注意，换行仍是使用 '\n'。</span></span><br><span class="line">    <span class="comment">//   formatter: [</span></span><br><span class="line">    <span class="comment">//       '&#123;a|这段文本采用样式a&#125;',</span></span><br><span class="line">    <span class="comment">//       '&#123;b|这段文本采用样式b&#125;这段用默认样式&#123;x|这段用样式x&#125;'</span></span><br><span class="line">    <span class="comment">//   ].join('\n'),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   rich: &#123;</span></span><br><span class="line">    <span class="comment">//     a: &#123;</span></span><br><span class="line">    <span class="comment">//         color: 'red',</span></span><br><span class="line">    <span class="comment">//         lineHeight: 10</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     b: &#123;</span></span><br><span class="line">    <span class="comment">//         backgroundColor: &#123;</span></span><br><span class="line">    <span class="comment">//             image: 'xxx/xxx.jpg'</span></span><br><span class="line">    <span class="comment">//         &#125;,</span></span><br><span class="line">    <span class="comment">//         height: 40</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     x: &#123;</span></span><br><span class="line">    <span class="comment">//         fontSize: 18,</span></span><br><span class="line">    <span class="comment">//         fontFamily: 'Microsoft YaHei',</span></span><br><span class="line">    <span class="comment">//         borderColor: '#449933',</span></span><br><span class="line">    <span class="comment">//         borderRadius: 4</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;, <span class="comment">// 主标题标题样式</span></span><br><span class="line">  subtext: <span class="string">'xxx'</span>, <span class="comment">// 副标题</span></span><br><span class="line">  sublink: <span class="string">'xxx.xxx.com'</span>,</span><br><span class="line">  subtarget: <span class="string">'self'</span>,</span><br><span class="line">  subtextStyle: &#123;</span><br><span class="line">    align: <span class="string">'right'</span>, <span class="comment">// 水平对齐方式 left | center 默认自动</span></span><br><span class="line">    verticalAlign: <span class="string">'top'</span>, <span class="comment">// 垂直对齐 middle | bottom 默认自动</span></span><br><span class="line">  &#125;, <span class="comment">// 我只是副标题样式在主标题样式基础上没有的部分列出来了</span></span><br><span class="line">  textAlign: <span class="string">'auto'</span>, <span class="comment">// 整体（包括 text 和 subtext）的垂直对齐。 可选值：'auto'、'top'、'bottom'、'middle'。</span></span><br><span class="line">  triggerEvent: <span class="literal">false</span>, <span class="comment">// 触发事件</span></span><br><span class="line">  padding: <span class="number">5</span>, <span class="comment">// 标题内边距 也可以是数组形式[5, 10] 顶右底左</span></span><br><span class="line">  itemGap: <span class="number">10</span>, <span class="comment">// 主副标题之间的间距。</span></span><br><span class="line">  left: <span class="string">'auto'</span>, <span class="comment">// title 容器距左边的位置 可以是数字也可以是百分比 也可以是right | center</span></span><br><span class="line">  top: <span class="string">'auto'</span>, <span class="comment">// 顶部距离, 可以是数字也可以是百分比 bottom | middle</span></span><br><span class="line">  right: <span class="string">'auto'</span>,</span><br><span class="line">  bottom: <span class="string">'auto'</span>,</span><br><span class="line">  backgroundColor: <span class="string">'transparent'</span>, <span class="comment">// 支持rgb rgba #ccc red</span></span><br><span class="line">  borderColor: <span class="string">'#ccc'</span>,  <span class="comment">// 同上</span></span><br><span class="line">  borderWidth: <span class="number">10</span>, <span class="comment">// 标题的边框线宽。</span></span><br><span class="line">  borderRadius: <span class="number">5</span>, <span class="comment">// 圆角 也可以是数组形式[5, 0, 0, 0] 左上, 右上, 右下, 左下</span></span><br><span class="line">  shadowBlur: <span class="number">10</span>,</span><br><span class="line">  shadowColor: <span class="string">'#ccc'</span>,</span><br><span class="line">  shadowOffsetX: <span class="number">5</span>,</span><br><span class="line">  shadowOffsetY: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### legend</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">let</span> legend = &#123;</span><br><span class="line">  show: <span class="literal">true</span>,</span><br><span class="line">  left: <span class="string">'20%'</span>,</span><br><span class="line">  right: <span class="string">'20%'</span>,</span><br><span class="line">  bottom: <span class="string">'10%'</span>,</span><br><span class="line">  top: <span class="string">'10%'</span>,</span><br><span class="line">  width: <span class="string">'auto'</span>,</span><br><span class="line">  height: <span class="string">'auto'</span>,</span><br><span class="line">  orient: <span class="string">'horizontal'</span>, <span class="comment">// 水平还是垂直 'vertical'</span></span><br><span class="line">  align: <span class="string">'auto'</span>,</span><br><span class="line">  padding: <span class="number">5</span>,</span><br><span class="line">  itemGap: <span class="number">10</span>, <span class="comment">//横向布局时为水平间隔，纵向布局时为纵向间隔。</span></span><br><span class="line">  itemWidth: <span class="number">25</span>,</span><br><span class="line">  itemHeight: <span class="number">14</span>,</span><br><span class="line">  formatter: , <span class="comment">// 用来格式化图例文本，支持字符串模板和回调函数两种形式。</span></span><br><span class="line">  selectedMode: <span class="literal">true</span>, <span class="comment">// 也可以设置成single multiple</span></span><br><span class="line">  inactiveColor: <span class="string">'#ccc'</span>, <span class="comment">// 图例关闭时候的颜色</span></span><br><span class="line">  selected: &#123;&#125;, <span class="comment">// 图例选中状态表。</span></span><br><span class="line">  textStyle: &#123;&#125;, <span class="comment">// 同title 的textStyle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      初次上手echarts
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="笔记" scheme="http://blog.decade.run/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="echarts" scheme="http://blog.decade.run/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="http://blog.decade.run/2020/05/20/note1/"/>
    <id>http://blog.decade.run/2020/05/20/note1/</id>
    <published>2020-05-20T08:48:03.000Z</published>
    <updated>2020-05-20T08:55:11.741Z</updated>
    
    <content type="html"><![CDATA[<p>先上自己成功的步骤!!!</p><ol><li>安装好下面两个插件<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible -S</span><br><span class="line">npm i postcss-plugin-px2rem  -S</span><br></pre></td></tr></table></figure></li><li>打开vue.config.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">css: &#123;</span><br><span class="line">  loaderOptions: &#123;</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-plugin-px2rem'</span>)(&#123;</span><br><span class="line">          rootValue: <span class="number">192</span>,</span><br><span class="line">          exclude: <span class="regexp">/(node_module)/i</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改lib-flexible下的flexible.js文件 72行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">  <span class="keyword">if</span> (width / dpr &gt; <span class="number">540</span>) &#123;</span><br><span class="line">      width = width * dpr; <span class="comment">// 原来是width = 540 * dpr</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">  docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line">  flexible.rem = win.rem = rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>over</li></ol>]]></content>
    
    <summary type="html">
    
      要求根据分辨率进行自适应
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="笔记" scheme="http://blog.decade.run/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>javascript执行上下文与执行栈</title>
    <link href="http://blog.decade.run/2020/05/19/ds2/"/>
    <id>http://blog.decade.run/2020/05/19/ds2/</id>
    <published>2020-05-18T22:34:48.000Z</published>
    <updated>2020-05-20T03:25:46.418Z</updated>
    
    <content type="html"><![CDATA[<p>前几天逛掘金的时候突然看见一篇文章<a href="https://juejin.im/post/5ebced85e51d454dc1467664#heading-13" target="_blank" rel="noopener">面试官：说说执行上下文吧</a>, 执行上下文, 有点懵逼, 然后就开始搬砖!!</p><h3 id="什么是执行上下文"><a href="#什么是执行上下文" class="headerlink" title="什么是执行上下文"></a>什么是执行上下文</h3><p>当 JS 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 “准备工作”，就叫做 “执行上下文(execution context 简称 EC)” 或者也可以叫做执行环境。<br>下面准备一串代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a= <span class="number">1</span>; </span><br><span class="line">foo(<span class="number">1</span>) </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (a === <span class="number">5</span>) &#123; <span class="keyword">return</span> &#125; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before'</span>,a) </span><br><span class="line">  foo(a + <span class="number">1</span>) </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'after'</span>,a) </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>, a)</span><br></pre></td></tr></table></figure><p>看见这串代码, 我们会分析this指向(这里没有没有提及this), 这里打印的a的值是多少, 这里打印出来的顺序是什么. 然后大概这个执行前的准备工作也就是做这些吧</p><p>js中的执行上下文一共有三种</p><ol><li>全局执行的上下文 一个程序只会存在一个全局执行上下文</li><li>函数的执行上下文 函数被调用的时候, 就会创建一个函数执行上下文</li><li>Eval函数的执行上下文</li></ol><h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h3><p>执行栈，在其他编程语言中也被叫做调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。<br>当 JavaScript 引擎首次读取你的脚本时，它会创建一个全局执行上下文并将其推入当前的执行栈。每当发生一个函数调用，引擎都会为该函数创建一个新的执行上下文并将其推到当前执行栈的顶端。<br>引擎会运行执行上下文在执行栈顶端的函数，当此函数运行完成后，其对应的执行上下文将会从执行栈中弹出，上下文控制权将移到当前执行栈的下一个执行上下文</p><p>这种进栈弹栈的操作 有点像之前学进程的时候, 我画了这么一个图<br><img src="/" class="lazyload" data-src="/img/dsalg/3.png"  alt="进程运行"><br>而之前的那段代码 执行的操作其实是和这个图的操作 相差无疑的, 我也只是省略了入栈的操作</p><h3 id="执行上下文是如何被创建的"><a href="#执行上下文是如何被创建的" class="headerlink" title="执行上下文是如何被创建的"></a>执行上下文是如何被创建的</h3><p>执行上下文分两个阶段创建：</p><ol><li>创建阶段</li><li>执行阶段</li></ol><h4 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h4><ol><li>确定 this 的值，也被称为 This Binding。</li><li>LexicalEnvironment（词法环境） 组件被创建。</li><li>VariableEnvironment（变量环境） 组件被创建.</li></ol><p>伪代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExecutionContext = &#123;  </span><br><span class="line">  ThisBinding = <span class="xml"><span class="tag">&lt;<span class="name">this</span> <span class="attr">value</span>&gt;</span>,  </span></span><br><span class="line"><span class="xml">  LexicalEnvironment = &#123; ... &#125;,  </span></span><br><span class="line"><span class="xml">  VariableEnvironment = &#123; ... &#125;,  </span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>This Binding<ol><li>在全局执行上下文中，this 的值指向全局对象，在浏览器中，this 的值指向 window 对象。</li><li>在函数执行上下文中，this 的值取决于函数的调用方式。如果它被一个对象引用调用，那么 this 的值被设置为该对象，否则 this 的值被设置为全局对象或 undefined（严格模式下）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;  </span><br><span class="line">name: <span class="string">'peter'</span>,  </span><br><span class="line">birthYear: <span class="number">1994</span>,  </span><br><span class="line">calcAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2018</span> - <span class="keyword">this</span>.birthYear);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">person.calcAge();   </span><br><span class="line"><span class="comment">// 'this' 指向 'person', 因为 'calcAge' 是被 'person' 对象引用调用的。</span></span><br><span class="line"><span class="keyword">let</span> calculateAge = person.calcAge;  </span><br><span class="line">calculateAge();  </span><br><span class="line"><span class="comment">// 'this' 指向全局 window 对象,因为没有给出任何对象引用</span></span><br></pre></td></tr></table></figure></li></ol></li><li>词法环境（Lexical Environment）<br>组成<ol><li>对外部环境的引用 对外部环境的引用意味着它可以访问其外部词法环境。</li><li>环境记录（environment record） 环境记录是存储变量和函数声明的实际位置。<ol><li>声明性环境记录 存储变量、函数和参数。一个函数环境包含声明性环境记录。</li><li>对象环境记录 用于定义在全局执行上下文中出现的变量和函数的关联。全局环境包含对象环境记录。<br>类型</li></ol></li><li>全局环境（在全局执行上下文中）是一个没有外部环境的词法环境, 全局环境的外部环境引用为 null。它拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。</li><li>函数环境，用户在函数中定义的变量被存储在环境记录中。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。还包括一个arguments对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> c = a + b;  </span><br><span class="line">&#125;  </span><br><span class="line">foo(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// arguments 对象  </span></span><br><span class="line">Arguments: &#123;<span class="number">0</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">3</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;,</span><br></pre></td></tr></table></figure></li></ol></li><li>变量环境 它也是一个词法环境，其 EnvironmentRecord 包含了由 VariableStatements 在此执行上下文创建的绑定。<br>在 ES6 中，LexicalEnvironment 组件和 VariableEnvironment 组件的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;  </span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span>;  </span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">e, f</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">20</span>;  </span><br><span class="line">  <span class="keyword">return</span> e * f * g;  </span><br><span class="line">&#125;</span><br><span class="line">c = multiply(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// 执行上下文如下</span></span><br><span class="line"><span class="comment">//全局</span></span><br><span class="line">GlobalExectionContext = &#123;</span><br><span class="line">  ThisBinding: <span class="xml"><span class="tag">&lt;<span class="name">Global</span> <span class="attr">Object</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">  LexicalEnvironment: &#123;   // 只有let const 的变量</span></span><br><span class="line"><span class="xml">    EnvironmentRecord: &#123;  </span></span><br><span class="line"><span class="xml">      Type: "Object",  </span></span><br><span class="line"><span class="xml">      // 标识符绑定在这里  </span></span><br><span class="line"><span class="xml">      a: <span class="tag">&lt; <span class="attr">uninitialized</span> &gt;</span>,  </span></span><br><span class="line"><span class="xml">      b: <span class="tag">&lt; <span class="attr">uninitialized</span> &gt;</span>,  </span></span><br><span class="line"><span class="xml">      multiply: <span class="tag">&lt; <span class="attr">func</span> &gt;</span>  </span></span><br><span class="line"><span class="xml">    &#125;  </span></span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line">  VariableEnvironment: &#123;   // var</span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: "Object",  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      c: undefined,  </span><br><span class="line">    &#125;  </span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">// 函数</span><br><span class="line">FunctionExectionContext = &#123;   </span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line">  LexicalEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: "Declarative",  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,  // 多的arguments对象</span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line">  VariableEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: "Declarative",  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      g: undefined  </span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">需要注意的时候 函数只有在执行的时候才有函数执行上下文</font></li></ol><p><font size="16">over</font>, 另外今天把我的<a href="http://120.24.215.228/newClock/" target="_blank" rel="noopener">时钟</a>也就是我的封面图那个钟把日期加了进去</p>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="javascript" scheme="http://blog.decade.run/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="http://blog.decade.run/2020/05/19/data-structure/"/>
    <id>http://blog.decade.run/2020/05/19/data-structure/</id>
    <published>2020-05-18T22:34:48.000Z</published>
    <updated>2020-05-19T21:58:58.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单的阐述下数据结构和算法"><a href="#简单的阐述下数据结构和算法" class="headerlink" title="简单的阐述下数据结构和算法"></a>简单的阐述下数据结构和算法</h3><ol><li>数据结构是计算机的基础, 算法是计算机科学</li><li>程序设计 = 数据结构 + 算法</li><li>“数据结构(data structure)是计算机中存储, 组织数据的方式. 通常情况下, 精心选择的数据结构可以带来最秀效率的算法” —–  维基百科</li><li>解决问题的的方法和步骤</li><li>数据结构是离不开算法的</li></ol><div class="note info">            <p>作为正在成长的前端小菜鸟, 自己还是希望在以后面试的时候, 问起这一块的时候自己还是能对答如流. </p>          </div><p>数据结构分为逻辑结构和物理结构</p><ol><li>逻辑结构: 是指数据对象中数据元素之间的相关关系<ol><li>集合结构: 集合中的元素除了同属于一个相同的集合以外, 没有任何关系</li><li>线性结构: 线性结构中数据元素之间是一对一的关系</li><li>树形结构: 数据元素之间存在一种一对多的层次关系</li><li>图形结构: 多对多的关系</li></ol></li><li>物理结构: 是指数据在计算机中的存储形式</li></ol><p>存储方式分为顺序存储和链式存储</p><ol><li>顺序存储: 是把数据元素存放在地址连续的存储单元里, 其数据间的逻辑关系和物理关系是一致的<br><img src="/" class="lazyload" data-src="/img/dsalg/1.png"  alt="顺序存储"></li><li>链式存储: 是把数据元素存放在任意的存储单元里<br><img src="/" class="lazyload" data-src="/img/dsalg/2.png"  alt="链式存储"></li></ol><p>线性结构和非线性结构</p><ol><li>线性结构: 一个有序数据元素的集合，其特点是数据元素之间存在一对一的线性关系</li><li>非线性结构: 各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系</li></ol><h3 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h3><ol><li>数组(array)</li><li>链表(linked list)</li><li>栈(stack)</li><li>队列(queue)</li><li>散列表/哈希表(hash)</li><li>堆(heap)</li><li>图(graph)</li><li>数(tree)</li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>首先我们得明确, javascript中的数组不是真正意义上的数组</p><p>常见语言的数组有以下两个特点: </p><ol><li>不能存放不同类型的数据</li><li>数组的容量不会自动改变</li></ol><div class="note info">            <p>首先数组的存储方式是顺序存储, 所以满足我上面解释的 数据的逻辑关系和物理关系是一致的. 所谓的逻辑关系我的理解就是: 假设当前元素的内存地址存放在0x0000 而且当前元素的大小是8bit, 所以它的下一个元素的内存地址就是0x0001 物理关系就是所有元素的大小都是一致的. </p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 动态方式生成数组 这里的动态指的是数组长度 */</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">// 这里的3可以改成4</span></span><br><span class="line"><span class="comment">/* 静态方式生成数组  这里指的是数组元素*/</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  静态方式生成数组, 系统会根据后面元素的个数自动计算数组长度 </span></span><br><span class="line"><span class="comment">  静态方式生成数组右边的中括号里面不能放数字</span></span><br><span class="line"><span class="comment">  静态方式省略格式创建数组, 不能先声明后赋值, 只能声明的同时赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>因为数组的长度固定, 所以我们会在对数组进行删除和插入操作的时候会很麻烦:</p><ol><li>插入数据: 我们需要把插入位置后面的数据往后移</li><li>删除数据: 我们需要把被删除数据后面的数据往前移</li></ol>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://blog.decade.run/tags/learn/"/>
    
      <category term="数据结构" scheme="http://blog.decade.run/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
