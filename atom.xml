<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小明</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myblog.loveli.top/"/>
  <updated>2020-04-16T08:10:16.341Z</updated>
  <id>http://myblog.loveli.top/</id>
  
  <author>
    <name>Decade W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>learn-ts (二)</title>
    <link href="http://myblog.loveli.top/2020/04/16/learn-ts2/"/>
    <id>http://myblog.loveli.top/2020/04/16/learn-ts2/</id>
    <published>2020-04-16T03:40:24.000Z</published>
    <updated>2020-04-16T08:10:16.341Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p><font size="4"><strong>复习一下</strong></font><br>JavaScript 的类型分为两种：原始数据类型（Primitive data types）和对象类型（Object types）。<br>原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。<br>typescript中 主要讲boolean, number, string, null, undefined, 以及ts中的新的(后面会提及)</p>          </div><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><ol><li>布尔值是最基础的数据类型, 在TypeScript中, 使用的boolean来定义的 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isActive: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li>值得注意的是, 使用Boolean构造函数创建的对象<font color="red">不是</font>布尔值, 它是一个实例, 是对象 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isActive: <span class="built_in">boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// Type 'Boolean' is not assignable to type 'boolean'.</span></span><br><span class="line"><span class="comment">// 'boolean' is a primitive, but 'Boolean' is a wrapper object. Prefer using 'boolean' when possible.</span></span><br></pre></td></tr></table></figure></li><li>直接调用Boolean(1), 返回的也是一个布尔值 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isActive: <span class="built_in">boolean</span> = <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ol><div class="note info">            <p>当然我更推荐是用第一种, 直接赋予true/false</p>          </div><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><p>使用的number来定义数值类型, 下面有几个文档上的例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>; <span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>; <span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> notANumber: <span class="built_in">number</span> = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> infinityNumber: <span class="built_in">number</span> = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure><p> 终端打开编译<br> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xx.ts</span><br></pre></td></tr></table></figure><br> 编译结果<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decLiteral = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">var</span> hexLiteral = <span class="number">0xf00d</span>; <span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">var</span> binaryLiteral = <span class="number">10</span>; <span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">var</span> octalLiteral = <span class="number">484</span>;</span><br><span class="line"><span class="keyword">var</span> notANumber = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> infinityNumber = <span class="literal">Infinity</span>;</span><br></pre></td></tr></table></figure></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用的是string, 当然也支持ES6中的字符串模板</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">"decade"</span>,</span><br><span class="line">    age: <span class="built_in">number</span> = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`hello my name is <span class="subst">$&#123;name&#125;</span>, i am <span class="subst">$&#123;age&#125;</span> years old`</span></span><br></pre></td></tr></table></figure><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>javascript中没有空值这个概念(我最早接触是学c的时候 void main()), 在typescript中, void用来表示没有任何返回值得函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">`name is <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明一个变量为空值类型 是没有用的 你只能给它赋值为undefined或者null</span></span><br><span class="line"><span class="keyword">let</span> voidVal: <span class="built_in">void</span> = <span class="literal">null</span>; <span class="comment">// let voidVal: void = undefined</span></span><br></pre></td></tr></table></figure><h2 id="undefined和null"><a href="#undefined和null" class="headerlink" title="undefined和null"></a>undefined和null</h2><p>在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><div class="note info">            <p>值得一提的是undefined/null两个都是其他类型的子类型, 所以可以给一个number类型的值赋值一个undefined/null</p>          </div><h2 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h2><p>使用的是any, 记得之前不是提过嘛能把js直接改为ts 就靠的是这个any, 下面来详细说明</p><ol><li>一个普通类型在被赋值的时候, 是不允许被赋值为别的类型的(undefined, null除外)<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">"abc"</span></span><br><span class="line">str = <span class="number">123</span>; <span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'</span></span><br></pre></td></tr></table></figure></li><li>但是如果是any类的话是可以的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">any</span> = <span class="string">"abc"</span></span><br><span class="line">str = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li><li>在任意值上访问任何属性都是允许的, 同理访问任何方法也是被允许的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意属性</span></span><br><span class="line"><span class="keyword">let</span> anyThing: <span class="built_in">any</span> = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName);</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName.firstName);</span><br><span class="line"><span class="comment">// 任意方法</span></span><br><span class="line"><span class="keyword">let</span> anyThing: <span class="built_in">any</span> = <span class="string">'Tom'</span>;</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>);</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>).sayHello();</span><br><span class="line">anyThing.myName.setFirstName(<span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure></li><li>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> something; <span class="comment">// let something: any</span></span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br></pre></td></tr></table></figure></li></ol><p>something.setName(‘Tom’);</p><div class="note info">            <p>值得一提的是, any类型要慎用, 如果你常用any 写的不就个js没区别了嘛 any是会让ts的忽略严格的类型检查</p>          </div>]]></content>
    
    <summary type="html">
    
      这是第二部分, 复习typescipt中的数据类型
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://myblog.loveli.top/categories/TypeScript/"/>
    
    
      <category term="learn" scheme="http://myblog.loveli.top/tags/learn/"/>
    
      <category term="TypeScript" scheme="http://myblog.loveli.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>learn-ts (一)</title>
    <link href="http://myblog.loveli.top/2020/04/16/learn-ts/"/>
    <id>http://myblog.loveli.top/2020/04/16/learn-ts/</id>
    <published>2020-04-16T02:41:29.000Z</published>
    <updated>2020-04-16T07:03:55.708Z</updated>
    
    <content type="html"><![CDATA[<p>现在开始从基础的重新来一遍吧(我主要都是看文档,自己动手敲例子,完了之后结合的angular8写的实战),下面是我看的<a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">文档</a>,接下来我们正式开始吧</p><h2 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a>什么是TypeScript</h2><blockquote><p>TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。<br>这是我找的官网的一句话, 我自己的理解主要是在type上, 总所周知, js是弱类型语言, 弱类型语言和强类型语言我认为的区别 是否存在隐式类型转换, 写过js的都知道</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"abc"</span> <span class="comment">// 这是定义一个变量str </span></span><br><span class="line"><span class="keyword">typeof</span> str <span class="comment">// 打印的"string" 这里只是为了举个例子 别打我</span></span><br><span class="line">str = <span class="number">123</span></span><br><span class="line"><span class="keyword">typeof</span> str <span class="comment">// "number</span></span><br></pre></td></tr></table></figure><p>就是因为js可以这样的隐式转换, 所以有时候会出现很多明明写的没有问题, 但是就是找不到错误的报错, 举个栗子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeStrLength</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.length;</span><br><span class="line">&#125; <span class="comment">// 这是一个做减法的函数</span></span><br><span class="line">computeStrLength(<span class="string">"abcdecahfka"</span>) <span class="comment">// 这样是没问题的</span></span><br><span class="line">computeStrLength(<span class="number">123445</span>) <span class="comment">// 打印undefined</span></span><br></pre></td></tr></table></figure><p>感觉写的例子不够深….QAQ</p><h3 id="TypeScript有以下几个好处"><a href="#TypeScript有以下几个好处" class="headerlink" title="TypeScript有以下几个好处"></a>TypeScript有以下几个好处</h3><ol><li>TypeScript 增加了代码的可读性和可维护性<ul><li>知道这个函数需要什么类型的参数一眼就知道怎么用</li><li>编译的时候类型出错 会报错</li><li>增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等</li></ul></li><li>TypeScript 非常包容<ul><li>可以直接将js文件命名为ts文件</li><li>有自己的类型推断</li><li>可以定义自己需要的类型</li><li>编译报错也能生成js文件</li></ul></li><li>TypeScript 用户多,社区活跃<ul><li>大部分第三方库都有提供给 TypeScript 的类型定义文件</li></ul></li></ol><h2 id="安装TypeScript"><a href="#安装TypeScript" class="headerlink" title="安装TypeScript"></a>安装TypeScript</h2><p>安装TypeScript</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br></pre></td></tr></table></figure><p>我用的编辑器是vscode 推荐的插件 </p><ol><li>markdown-all-in-one </li><li>Markdown Preview Enhanced</li></ol><h2 id="Hello-TypeScript"><a href="#Hello-TypeScript" class="headerlink" title="Hello TypeScript"></a>Hello TypeScript</h2><p>新建文件夹取名 ts-learn, 用vscode打开该文件, 打开终端输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>文件夹里面会多出一个tsconfig.json文件 这里面都有基本的配置 我不一一说了详细看这个<a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html" target="_blank" rel="noopener">文档</a><br>然后自己再新建一个hello.ts文件, 在里面输入一下内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countStrLength</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span>;</span><br><span class="line">strLength = countStriLength(str);</span><br><span class="line"><span class="built_in">console</span>.log(strLength);</span><br></pre></td></tr></table></figure><p>打开终端, 执行以下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p>你会发现文件中多了一个hello.js文件</p><p>先把基础的写好了, emmmmm, 又水完一篇</p>]]></content>
    
    <summary type="html">
    
      许久之前把typescript过完,今天又慢慢再来复习第三遍(第二遍敲代码的时候过了一次了)
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://myblog.loveli.top/categories/TypeScript/"/>
    
    
      <category term="learn" scheme="http://myblog.loveli.top/tags/learn/"/>
    
      <category term="TypeScript" scheme="http://myblog.loveli.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello myBlog</title>
    <link href="http://myblog.loveli.top/2020/04/13/Hello-myBlog/"/>
    <id>http://myblog.loveli.top/2020/04/13/Hello-myBlog/</id>
    <published>2020-04-13T07:55:49.000Z</published>
    <updated>2020-04-15T03:52:17.728Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于是我的第一篇博客,我把我怎么搭建的复习复习吧! 前期的准备<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node</a>,<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>,下载好了之后,我顺便把怎么配置node环境(water)写一下吧.</p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><div class="note info">            <p>安装node,傻瓜式安装一直按next即可,中间有个选择盘符,不推荐放在c盘</p>          </div><h2 id="检查node是否安装成功"><a href="#检查node是否安装成功" class="headerlink" title="检查node是否安装成功"></a>检查node是否安装成功</h2><p>先进入cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/img/hellomyblog/nodev.png"  alt="如果如图有版本提示说明安装成功"></p><div class="note info">            <p>安装完成后目录如下, 另外需要自己手动创建两个文件夹,一个叫node_cache(存放缓存的),node_global(全局安装插件的放这个文件夹)</p>          </div><p><img src="/" class="lazyload" data-src="/img/hellomyblog/nodecomplete.png"  alt="安装完成图片"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><div class="note info">            <p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。</p>          </div><p>创建完两个文件夹后,打开cmd,执行下面的命令,因为我是安装在H盘下的nodejs目录下的,所以你需要自己修改一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix "H:\nodejs\node_global"</span><br><span class="line">npm config <span class="built_in">set</span> cache "H:\nodejs\node_cache"</span><br></pre></td></tr></table></figure><div class="note info">            <p>由于npm安装插件是从国外下载的,受网络影响大,建议更换成国内淘宝镜像,指令如下</p>          </div><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure><p>上述工作完成后,我们开始配置环境<br>右键单击我的电脑,找到属性,然后找到高级系统设置,找到环境变量<br><img src="/" class="lazyload" data-src="/img/hellomyblog/1.png"  alt="属性,高级系统设置"><br><img src="/" class="lazyload" data-src="/img/hellomyblog/environment.png"  alt="环境变量"></p><p>node_path环境变量:<br>进入环境变量对话框，在系统变量下新建NODE_PATH，输入H:\nodejs\node_global\node_modules，将用户变量下的Path修改为H:\nodejs\node_global<br><img src="/" class="lazyload" data-src="/img/hellomyblog/2.png"  alt="path1"><br><img src="/" class="lazyload" data-src="/img/hellomyblog/3.png"  alt="path2"></p><p><img src="/" class="lazyload" data-src="/img/hellomyblog/4.png"  alt="NODE_PATH"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>打开cmd 全局安装一个express</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><p>安装完之后 去你的node_global目录下的node_module找express<br><img src="/" class="lazyload" data-src="/img/hellomyblog/5.png"  alt="express"></p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>一样的傻瓜式安装,看是否安装成功只需要在桌面单击右键,看是否有Git Bush Here, Git GUI Here 就行了<br><img src="/" class="lazyload" data-src="/img/hellomyblog/6.png"  alt="git安装"></p><div class="note default">            <p>因为hexo 推送到github仓库不需要是用git 推送送的 以后再补上吧!!!</p>          </div><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>打开git bush / cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>第一步初始化hexo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init yourBlogName</span><br></pre></td></tr></table></figure><p>进入到你yourBlogNameogName这个文件夹,然后执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yourBlogName</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>然后一个基本的博客模板就完成了,分析一下文件目录</p><div class="note default">            <p>由于我也是入门小白, 基本的可以去<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a>查看<br>总的用到的以下的几条指令</p>          </div><ol><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li><li>hexo clean 清除之前生成的json文件, public目录下的东西</li><li>hexo g 生成json文件 以及public 目录下的东西</li><li>hexo server 开启服务 访问4000端口即可</li><li>hexo d 这个是你绑定了github仓库 后推代码到仓库的 你需要安装插件</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这是我的第一篇博客,并且我取了个中二的名字
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.loveli.top/tags/learn/"/>
    
      <category term="hexo" scheme="http://myblog.loveli.top/tags/hexo/"/>
    
  </entry>
  
</feed>
