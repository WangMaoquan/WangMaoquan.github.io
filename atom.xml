<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小明</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myblog.decade.run/"/>
  <updated>2020-05-28T05:17:07.399Z</updated>
  <id>http://myblog.decade.run/</id>
  
  <author>
    <name>Decade W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue源码(二)</title>
    <link href="http://myblog.decade.run/2020/05/28/vue-note2/"/>
    <id>http://myblog.decade.run/2020/05/28/vue-note2/</id>
    <published>2020-05-27T22:34:48.000Z</published>
    <updated>2020-05-28T05:17:07.399Z</updated>
    
    <content type="html"><![CDATA[<h1>今日份啃代码!!!</h1><ul><li><p>接着上次的写, 我们先跑一下vue源码下面的example/commit/index.html 然后把引入的script的vue.min.js 改成我们自己生成的vue.js<br>然后 我们暂时不想看到请求 所以我把mock.js的引入也删除, app.js里面我就剩了下面这么丢丢东西  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    branches: [<span class="string">'master'</span>, <span class="string">'dev'</span>],</span><br><span class="line">    currentBranch: <span class="string">'master'</span>,</span><br><span class="line">    commits: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>然后浏览器打开index.html 按F12 进入控制台 点击Source, 如图<br><img src="/" class="lazyload" data-src="/img/vue/1.png"  alt="控制台"><br>你能看见src 这下面就是源码 然后我们打个断点 我在我15行位置打的如上图, 然后刷新浏览器<br><font color="red">上图的左侧</font> 进行操作</p></li><li><p>点击下一步那个按钮<br>控制台会提示进入了一个新的文件 我们找到那个文件 src/core/instance/index.js 代码我没贴完</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我的理解 就是不是生成环境 同时 没有用new 会提示报错</span></span><br><span class="line"><span class="comment">// 然后调用_init(options) 这个方法</span></span><br><span class="line"><span class="comment">// 这时的options 为</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    branches: [<span class="string">'master'</span>, <span class="string">'dev'</span>],</span><br><span class="line">    currentBranch: <span class="string">'master'</span>,</span><br><span class="line">    commits: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再点击下一步<br>代码位置在 src/core/instance/init.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm: Component = <span class="keyword">this</span> <span class="comment">// vm 就是 Vue&#123;  &#125;</span></span><br><span class="line">vm._uid = uid++ ; <span class="comment">// vm = Vue &#123; _uid: 0 &#125; 这个是vue组件的id号</span></span><br><span class="line">vm._isVue = <span class="literal">true</span>; <span class="comment">// vm = Vue &#123; _uid: 0, _isVue: true &#125; 尤大佬给的注释是一个避免被observed的标志 </span></span><br><span class="line"><span class="comment">// 下面进入 整合options </span></span><br><span class="line"><span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123; <span class="comment">// 最开始进来没有_isComponent 所以进入else</span></span><br><span class="line">  initInternalComponent(vm, options)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 添加$options</span></span><br><span class="line">  vm.$options = mergeOptions(</span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">    options || &#123;&#125;,</span><br><span class="line">    vm</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>resolveConstructorOptions(vm.constructor) 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveConstructorOptions</span> (<span class="params">Ctor: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = Ctor.options</span><br><span class="line">  <span class="keyword">if</span> (Ctor.super) </span><br><span class="line">    <span class="keyword">const</span> superOptions = resolveConstructorOptions(Ctor.super)</span><br><span class="line">    <span class="keyword">const</span> cachedSuperOptions = Ctor.superOptions</span><br><span class="line">    <span class="keyword">if</span> (superOptions !== cachedSuperOptions) &#123;</span><br><span class="line">      Ctor.superOptions = superOptions</span><br><span class="line">      <span class="keyword">const</span> modifiedOptions = resolveModifiedOptions(Ctor)</span><br><span class="line">      <span class="keyword">if</span> (modifiedOptions) &#123;</span><br><span class="line">        extend(Ctor.extendOptions, modifiedOptions)</span><br><span class="line">      &#125;</span><br><span class="line">      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions)</span><br><span class="line">      <span class="keyword">if</span> (options.name) &#123;</span><br><span class="line">        options.components[options.name] = Ctor</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Ctor 就是 Vue的构造函数</span></span><br><span class="line"><span class="comment">  Ctor.options 的值是 &#123;components: &#123;…&#125;, directives: &#123;…&#125;, filters: &#123;…&#125;, _base: ƒ&#125;</span></span><br><span class="line"><span class="comment">  然后没有 super 所以 返回的就是 &#123;components: &#123;…&#125;, directives: &#123;…&#125;, filters: &#123;…&#125;, _base: ƒ&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3>然后去找到mergeOptions() 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前传入的应该是 &#123;components: &#123;…&#125;, directives: &#123;…&#125;, filters: &#123;…&#125;, _base: ƒ&#125;, &#123;&#125;, vm</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeOptions</span> (<span class="params"> <span class="regexp">//</span> 整合option</span></span></span><br><span class="line"><span class="function"><span class="params">  parent: Object, </span></span></span><br><span class="line"><span class="function"><span class="params">  child: Object, </span></span></span><br><span class="line"><span class="function"><span class="params">  vm?: Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123; </span><br><span class="line">    checkComponents(child) <span class="comment">// 判断options 里面是否有注册的子组件 options.components</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> child === <span class="string">'function'</span>) &#123;</span><br><span class="line">    child = child.options</span><br><span class="line">  &#125;</span><br><span class="line">  normalizeProps(child, vm) <span class="comment">// 判断是否有props  </span></span><br><span class="line">  normalizeInject(child, vm) <span class="comment">// 判断是否是inject</span></span><br><span class="line">  normalizeDirectives(child) <span class="comment">// 判断是否有自定义指令</span></span><br><span class="line">  <span class="comment">// 如果没有_base 但是又有extends mixins这两个属性 需要整合</span></span><br><span class="line">  <span class="keyword">if</span> (!child._base) &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.extends) &#123;</span><br><span class="line">      parent = mergeOptions(parent, child.extends, vm)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (child.mixins) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class="line">        parent = mergeOptions(parent, child.mixins[i], vm)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> key</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> parent) &#123; <span class="comment">// 开始遍历 属性 components, directives, filters, _base 这就是key的四个值 分别传入下面的mergeField方法</span></span><br><span class="line">    mergeField(key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> child) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasOwn(parent, key)) &#123;</span><br><span class="line">      mergeField(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mergeField</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> strat = strats[key] || defaultStrat</span><br><span class="line">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>mergeField() 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeField</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> strat = strats[key] || defaultStrat</span><br><span class="line">  options[key] = strat(parent[key], child[key], vm, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>strats[key] 和 defaultStrat 源码</h3> 啃的我好难<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strats = config.optionMergeStrategies <span class="comment">// &#123;  &#125; 空对象</span></span><br><span class="line">LIFECYCLE_HOOKS.forEach(<span class="function"><span class="params">hook</span> =&gt;</span> &#123;</span><br><span class="line">  strats[hook] = mergeHook <span class="comment">// 注册函数</span></span><br><span class="line">&#125;)</span><br><span class="line">ASSET_TYPES.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  strats[type + <span class="string">'s'</span>] = mergeAssets <span class="comment">// 注册函数</span></span><br><span class="line">&#125;)</span><br><span class="line">LIFECYCLE_HOOKS = [</span><br><span class="line">  <span class="string">'beforeCreate'</span>,</span><br><span class="line">  <span class="string">'created'</span>,</span><br><span class="line">  <span class="string">'beforeMount'</span>,</span><br><span class="line">  <span class="string">'mounted'</span>,</span><br><span class="line">  <span class="string">'beforeUpdate'</span>,</span><br><span class="line">  <span class="string">'updated'</span>,</span><br><span class="line">  <span class="string">'beforeDestroy'</span>,</span><br><span class="line">  <span class="string">'destroyed'</span>,</span><br><span class="line">  <span class="string">'activated'</span>,</span><br><span class="line">  <span class="string">'deactivated'</span>,</span><br><span class="line">  <span class="string">'errorCaptured'</span>,</span><br><span class="line">  <span class="string">'serverPrefetch'</span></span><br><span class="line">],</span><br><span class="line">ASSET_TYPES = [</span><br><span class="line">  <span class="string">'component'</span>,</span><br><span class="line">  <span class="string">'directive'</span>,</span><br><span class="line">  <span class="string">'filter'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://myblog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue源码(一)</title>
    <link href="http://myblog.decade.run/2020/05/26/vue-note1/"/>
    <id>http://myblog.decade.run/2020/05/26/vue-note1/</id>
    <published>2020-05-25T22:34:48.000Z</published>
    <updated>2020-05-28T03:39:23.240Z</updated>
    
    <content type="html"><![CDATA[<h1>今天开始正式接触 vue 源码, 在结合小破站上的学习同时 自己也在摸着走下去, 冲啊!!!</h1><p>讲道理 vue的源码已经被我放了很久了, 之前真的就只是在看源码, 突然觉得自己好蠢 , 今天逛小破站的时候 发现了一个视频 讲的是怎么配置vue源码环境..</p><p>我…</p><p>行吧, 我也尝试着去弄了下, 嗯 失败了 </p><p>失败不可怕, 所以我到处找怎么弄得 </p><p>奈何本人的webpack 打包啥的 一窍不通(后期补补) 只能搜到一个尝试一下 以后得改改</p><h3 id="下载vue源码-我看的是2-6-1的"><a href="#下载vue源码-我看的是2-6-1的" class="headerlink" title="下载vue源码 我看的是2.6.1的"></a>下载vue源码 我看的是2.6.1的</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/vue.git</span><br><span class="line">npm i </span><br><span class="line">npm dev</span><br></pre></td></tr></table></figure><p>简单的步骤就是这样 其实中间我暂时还是踩了很多坑的,<br><img src="/" class="lazyload" data-src="/img/note/3.png"  alt="报错"></p><p>我们先看红的那一块, 因为vue打包是用的rollup打包的 对window不友好… 当然有钱的小伙伴可以买个mac(口红!!!)</p><p>首先我们找到node_modules\rollup-plugin-alias\dist\rollup-plugin-alias.js这个文件</p><p>改一下这句代码, 大概位置在70行 </p><p>为了方面 我粘了一大堆代码(为了水字数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">resolveId(importee, importer) &#123;</span><br><span class="line">  <span class="keyword">const</span> importeeId = normalizeId(importee);</span><br><span class="line">  <span class="keyword">const</span> importerId = normalizeId(importer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First match is supposed to be the correct one</span></span><br><span class="line">  <span class="keyword">const</span> toReplace = aliasKeys.find(<span class="function"><span class="params">key</span> =&gt;</span> matches(key, importeeId));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!toReplace || !importerId) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// const entry = options[toReplace]; // 这是原来的</span></span><br><span class="line">  <span class="keyword">const</span> entry = normalizeId(options[toReplace]); <span class="comment">// 改成这样</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> updatedId = normalizeId(importeeId.replace(toReplace, entry));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isFilePath(updatedId)) &#123;</span><br><span class="line">    <span class="keyword">const</span> directory = path.posix.dirname(importerId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Resolve file names</span></span><br><span class="line">    <span class="keyword">const</span> filePath = path.posix.resolve(directory, updatedId);</span><br><span class="line">    <span class="keyword">const</span> match = resolve.map(<span class="function"><span class="params">ext</span> =&gt;</span> (endsWith(ext, filePath) ? filePath : <span class="string">`<span class="subst">$&#123;filePath&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>))</span><br><span class="line">      .find(exists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">      updatedId = match;</span><br><span class="line">      <span class="comment">// To keep the previous behaviour we simply return the file path</span></span><br><span class="line">      <span class="comment">// with extension</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (endsWith(<span class="string">'.js'</span>, filePath)) &#123;</span><br><span class="line">      updatedId = filePath;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      updatedId = filePath + <span class="string">'.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if alias is windows absoulate path return resolved path or</span></span><br><span class="line">  <span class="comment">// rollup on windows will throw:</span></span><br><span class="line">  <span class="comment">//  [TypeError: Cannot read property 'specifier' of undefined]</span></span><br><span class="line">  <span class="keyword">if</span> (VOLUME.test(entry)) &#123;</span><br><span class="line">    <span class="keyword">return</span> path__default.resolve(updatedId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> updatedId;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后还有个坑 就是  路径千万不有中文路径, 报错改半天 然后还是报错 最后把中文文件名改成英文的 就ok了!!!</p><p>然后在package.json 的script </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>: <span class="string">"rollup -w -c scripts/config.js --environment TARGET:web-full-dev --sourcemap"</span>,</span><br></pre></td></tr></table></figure><p>然后就能生成map了 然后自己去谷歌打断点!!!</p><h3 id="makeMap"><a href="#makeMap" class="headerlink" title="makeMap"></a>makeMap</h3><p>为什么突然写这个呢? 大概是突然看见 然后去研究了一下 然后又补了下自己的空缺</p><p>这个方法的路径是在src/shared/utils.js 106行这个位置<br>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">makeMap</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  str: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  expectsLowerCase?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): (<span class="params">key: string</span>) =&gt; <span class="title">true</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> list: <span class="built_in">Array</span>&lt;string&gt; = str.split(<span class="string">','</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    map[list[i]] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> expectsLowerCase</span><br><span class="line">    ? <span class="function"><span class="params">val</span> =&gt;</span> map[val.toLowerCase()]</span><br><span class="line">    : <span class="function"><span class="params">val</span> =&gt;</span> map[val]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数是字符串 然后看见下面有个split(“,”) 可以猜测一下 这个字符串的中间以逗号来区分<br>第二个参数是个可选的布尔型 结合return 返回的 样子来看 判断需不需要把val给转成大写<br>在看里面 生成一个map对象<br>把str分割成数组<br>给map赋值 键名就是切割出来的每一项  键值就是 true<br>返回的是一个函数 传入一个val 根据这个val是否存在map中 返回true / undefined</p><p>然后我在src/compiler/paser/html-paser.js里面找到了 这个文件名大概就是说解析html的<br>然后开始找实际的使用地方 代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isPlainTextElement = makeMap(<span class="string">'script,style,textarea'</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> isIgnoreNewlineTag = makeMap(<span class="string">'pre,textarea'</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 应该是在解析的时候判断是否存在这标签 存在就解析 不存在就报错 .. 总感觉不对 2333</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="vue" scheme="http://myblog.decade.run/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript 运行机制</title>
    <link href="http://myblog.decade.run/2020/05/25/note3/"/>
    <id>http://myblog.decade.run/2020/05/25/note3/</id>
    <published>2020-05-24T22:34:48.000Z</published>
    <updated>2020-05-25T05:07:37.547Z</updated>
    
    <content type="html"><![CDATA[<p>开始琢磨vue的源码(2.6)的 在看nextTick 发现了自己知识盲区, 然后开始自己的踩雷</p><h4 id="javascript-是一门单线程语言"><a href="#javascript-是一门单线程语言" class="headerlink" title="javascript 是一门单线程语言"></a>javascript 是一门单线程语言</h4><p>最新的HTML5中提出了Web-Worker, 但javacript的本质还是一门单线程语言, 所有说javascript是多线程语言都是纸老虎<br>web-Worker 允许javascript脚本 创建多个线程, 但是子线程完全受主线程控制, 且子线程不能操作DOM</p><h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><ol><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</li><li>排队的任务过多,  一个一个执行中, cpu 很多时间是空闲的, 这时javascript 可以挂起等待中的任务, 先运行后面的任务, 等到IO设备返回结果时, 再运行挂起的任务</li><li>基于上面, 所以有了同步任务和异步任务. 同步任务指的是在主程序上排队执行的任务, 只有前一个完成, 才能执行后面的. 异步任务就是不进入子进程, 进入任务队列. 只有任务队列通知主进程某个异步任务可以执行了, 该任务才会进入子进程</li></ol><h4>执行机制如下: </h4><li>所有同步任务都在主线程上执行，形成一个执行栈(execution context stack)</li><li>主线程之外，还存在一个"任务队列"(task queue). 只要异步任务有了运行结果，就在"任务队列"之中放置一个事件</li><li>一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行</li><li>主线程不断重复上面的第三步</li><p><font color="red">只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。</font></p><p><img src="/" class="lazyload" data-src="/img/note/1.png"  alt="图例"></p><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>显而易见 上面的代码执行结果为 先打印执行2 再等待3s 打印1 我们再看下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">sleep(<span class="number">100000</span>);</span><br></pre></td></tr></table></figure><p>上面的代码等到我们看见打印出来1 感觉远远不止过了1秒 再看我们把参数设置为0秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上面的参数0 代表的是立即执行嘛 答案是否定的 </p><p>我们结合上面的执行机制 来捋一捋setTimeout</p><ol><li>setTimeout是异步任务, 所以会放进任务队列中 </li><li>然后注册setTimeout的回调函数</li><li>过了设置的时间后, 会给主线程一个提示, 提示可以执行这个方法了</li><li>这时主线程会查看当前的执行栈是否为空, 如果是空 则执行setTimeout回调, 否就等待执行栈为空的时候 再执行回调</li></ol><p>所以参数0 这个意思只是为了尽快的进入执行栈中执行, 还有就是你设置的延迟几秒后执行, 有时候不一定就是你设置的几秒</p><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h4><p>和setTimeout 不同的地方就是 会每隔固定的时间 推一个异步任务到任务队列 然后也是等待执行栈空了 ,再执行</p><p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>除了广义的同步与异步任务外, 还有着更加精细的定义</p><ol><li>宏任务(macro-task) 包括整体代码script，setTimeout，setInterval</li><li>微任务(macro-task) Promise，process.nextTick</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>按照上面的事件循环机制来讲<br>首先这一大块代码作为一个宏任务进入主线程<br>先遇到setInterval 注册 然后丢到宏任务的事件队列中<br>然后找到其中的微任务new Promise 所以会先打印出2<br>然后执行resolve() 打印出3<br>然后打印4<br>最后打印出1 </p><p><img src="/" class="lazyload" data-src="/img/note/2.png"  alt="图例"></p>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="js" scheme="http://myblog.decade.run/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>echarts笔记</title>
    <link href="http://myblog.decade.run/2020/05/21/note2/"/>
    <id>http://myblog.decade.run/2020/05/21/note2/</id>
    <published>2020-05-20T22:05:17.000Z</published>
    <updated>2020-05-21T08:43:27.744Z</updated>
    
    <content type="html"><![CDATA[<p>今天踩踩echarts, 被坑到的地方还是有些许的!!!<br>废话不多说, 没啥好介绍的直接上步骤</p><h3 id="怎么安装echarts"><a href="#怎么安装echarts" class="headerlink" title="怎么安装echarts"></a>怎么安装echarts</h3><p>安装这个, <a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">官网</a>也给了npm的安装方法</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><p>因为我是在vue项目中用的echarts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中引入</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span><br><span class="line"><span class="comment">// 挂载在vue上, 后面可以直接用了</span></span><br><span class="line">Vue.prototype.$echarts = echarts;</span><br><span class="line"><span class="comment">// 进入你自己要用echarts的页面 我只把基本怎么用的代码写了</span></span><br><span class="line"><span class="keyword">let</span> myCharts = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'myChart'</span>))</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  tooltip: &#123;&#125;,</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">      data: []</span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;&#125;,</span><br><span class="line">  series: [&#123;</span><br><span class="line">      name: <span class="string">''</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      data: []</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line">myCharts.setOption(options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然你也可以按需引入 我还是推荐按需引入的 进入到你要用到echarts的vue页面</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span>;</span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'echarts2'</span>));</span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">'item'</span>,</span><br><span class="line">    formatter: <span class="string">'&#123;a&#125;&lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  legend: <span class="keyword">this</span>.legend,</span><br><span class="line">  <span class="comment">//饼图中各模块的颜色</span></span><br><span class="line">  color: [<span class="string">'#32dadd'</span>, <span class="string">'#b6a2de'</span>, <span class="string">'#5ab1ef'</span>, <span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'#ccc'</span>],</span><br><span class="line">  <span class="comment">// 饼图数据</span></span><br><span class="line">  series: &#123;</span><br><span class="line">    name: <span class="string">'例子'</span>,</span><br><span class="line">    type: <span class="string">'pie'</span>, <span class="comment">//echarts图的类型   pie代表饼图</span></span><br><span class="line">    radius: <span class="string">'50%'</span>, <span class="comment">//饼图中饼状部分的大小所占整个父元素的百分比</span></span><br><span class="line">    center: [<span class="string">'50%'</span>, <span class="string">'35%'</span>], <span class="comment">//整个饼图在整个父元素中的位置</span></span><br><span class="line">    data: <span class="keyword">this</span>.data,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      normal: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">          formatter: <span class="string">'&#123;d&#125;%'</span></span><br><span class="line">          <span class="comment">// show: true //饼图上是否出现标注文字 标注各模块代表什么  默认是true</span></span><br><span class="line">          <span class="comment">// position: 'inner' //控制饼图上标注文字相对于饼图的位置  默认位置在饼图外</span></span><br><span class="line">        &#125;,</span><br><span class="line">        labelLine: &#123;</span><br><span class="line">          show: <span class="literal">true</span> <span class="comment">//官网demo里外部标注上的小细线的显示隐藏    默认显示</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">myChart.setOption(option);</span><br><span class="line"><span class="comment">// 这样基本就能使用了</span></span><br></pre></td></tr></table></figure><h3 id="介绍下echarts-的配置"><a href="#介绍下echarts-的配置" class="headerlink" title="介绍下echarts 的配置"></a>介绍下echarts 的配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我没有用过的注释了 后面细细研究</span></span><br><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  title: &#123;&#125;, <span class="comment">// 标题组件，包含主标题和副标题。</span></span><br><span class="line">  legend: &#123;&#125;, <span class="comment">// 图例组件。</span></span><br><span class="line">  grid: &#123;&#125;, <span class="comment">// 直角坐标系内绘图网格</span></span><br><span class="line">  xAxis: &#123;&#125;, <span class="comment">//直角坐标系 grid 中的 x 轴</span></span><br><span class="line">  yAxis: &#123;&#125;, <span class="comment">// 直角坐标系 grid 中的 y 轴</span></span><br><span class="line">  <span class="comment">// polar: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// radiusAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// angleAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// radar: &#123;&#125;,</span></span><br><span class="line">  dataZoon: [&#123;&#125;], <span class="comment">// dataZoom 组件 用于区域缩放</span></span><br><span class="line">  <span class="comment">// visualMap: [&#123;&#125;],</span></span><br><span class="line">  tooltip: &#123;&#125;, <span class="comment">// 提示框组件的通用介绍：</span></span><br><span class="line">  <span class="comment">// axisPointer: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// toolbox: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// brush: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// geo: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// parallel: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// parallelAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// singleAxis: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// timeline: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// graphic: &#123;&#125;,</span></span><br><span class="line">  <span class="comment">// calendar: &#123;&#125;,</span></span><br><span class="line">  dataset: &#123;&#125;, <span class="comment">//数据集（dataset）组件用于单独的数据集声明</span></span><br><span class="line">  <span class="comment">// aria: &#123;&#125;,</span></span><br><span class="line">  series: [&#123;&#125;], <span class="comment">// 系列列表。每个系列通过 type 决定自己的图表类型</span></span><br><span class="line">  color: [<span class="string">'#c23531'</span>,<span class="string">'#2f4554'</span>, <span class="string">'#61a0a8'</span>, <span class="string">'#d48265'</span>, <span class="string">'#91c7ae'</span>,<span class="string">'#749f83'</span>,  <span class="string">'#ca8622'</span>, <span class="string">'#bda29a'</span>,<span class="string">'#6e7074'</span>, <span class="string">'#546570'</span>, <span class="string">'#c4ccd3'</span>], <span class="comment">// 调色盘颜色列表。如果系列没有设置颜色，则会依次循环从该列表中取颜色作为系列颜色。 </span></span><br><span class="line">  backgroundColor: <span class="string">'transparent'</span>, <span class="comment">// 默认透明</span></span><br><span class="line">  textStyle: &#123;&#125;, <span class="comment">// 全局的字体样式。</span></span><br><span class="line">  animation: <span class="literal">true</span>, <span class="comment">// 开启动画</span></span><br><span class="line">  animationThreshold: <span class="number">2000</span>, <span class="comment">// 是否开启动画的阈值，当单个系列显示的图形数量大于这个阈值时会关闭动画。</span></span><br><span class="line">  animationDuration: <span class="number">1000</span>, <span class="comment">// 初始动画的时长，支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的初始动画效果：</span></span><br><span class="line">  animationEasing: cubicOut, <span class="comment">// 初始动画的缓动效果。不同的缓动效果可以[参考](https://echarts.apache.org/examples/zh/editor.html?c=line-easing)</span></span><br><span class="line">  animationDelay: <span class="number">0</span>, <span class="comment">// 初始动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的初始动画效果。</span></span><br><span class="line">  animationDurationUpdate: <span class="number">300</span>, <span class="comment">// 数据更新动画的时长。 支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的更新动画效果：</span></span><br><span class="line">  animationEasingUpdate: cubicOut, <span class="comment">// 数据更新动画的缓动效果。</span></span><br><span class="line">  animationDelayUpdate: <span class="number">0</span>, <span class="comment">// 数据更新动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的更新动画效果。</span></span><br><span class="line">  blendMode: <span class="string">'source-over'</span>, <span class="comment">// 图形的混合模式，不同的混合模式见 https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation 。</span></span><br><span class="line">  hoverLayerThreshold: <span class="number">3000</span>, <span class="comment">//图形数量阈值，决定是否开启单独的 hover 层，在整个图表的图形数量大于该阈值时开启单独的 hover 层。</span></span><br><span class="line">  useUTC: <span class="literal">false</span> <span class="comment">//是否使用 UTC 时间。</span></span><br><span class="line">&#125;</span><br><span class="line">animationDuration: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据时长越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">animationDelay: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据延迟越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">animationDurationUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据时长越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">animationDelayUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 越往后的数据延迟越大</span></span><br><span class="line">  <span class="keyword">return</span> idx * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = &#123;</span><br><span class="line">  show: <span class="literal">true</span>, <span class="comment">//显示title</span></span><br><span class="line">  text: <span class="string">'例子'</span>, <span class="comment">// 主标题文字</span></span><br><span class="line">  link: <span class="string">'xxxx.xxxx.com'</span>, <span class="comment">// 超链接</span></span><br><span class="line">  target: <span class="string">'blank'</span>, <span class="comment">// 新窗口打开 self当前窗口打开</span></span><br><span class="line">  textStyle: &#123;</span><br><span class="line">    color: <span class="string">'#ccc'</span>, <span class="comment">// 主标题文字</span></span><br><span class="line">    fontStyle: <span class="string">'normal'</span>, <span class="comment">// 主标题文字风格 'italic' | 'oblique'</span></span><br><span class="line">    fontWeight: <span class="string">'normal'</span>, <span class="comment">//粗细 bold | bolder | lighter | 100 | 200 | 300 | 400</span></span><br><span class="line">    fontFamily: <span class="string">'宋体'</span>, <span class="comment">// 字体</span></span><br><span class="line">    lineHeight: <span class="number">10</span>, <span class="comment">// 行高</span></span><br><span class="line">    width: , <span class="comment">// 一般不指定, 宽度 如果不指定rich不能使用width 和height 可用百分比</span></span><br><span class="line">    height: , <span class="comment">// 一般不指定</span></span><br><span class="line">    textBorderColor: <span class="string">'transparent'</span>, <span class="comment">//文字本身的描边颜色。</span></span><br><span class="line">    textBorderWidth: <span class="number">2</span>, <span class="comment">// 文字本身的描边宽度。</span></span><br><span class="line">    textShadowColor: <span class="string">'transparent'</span>, <span class="comment">//文字本身的阴影颜色。</span></span><br><span class="line">    textShadowBlur: <span class="number">10</span>, <span class="comment">// 阴影长度</span></span><br><span class="line">    textShadowOffsetX: <span class="number">5</span>,</span><br><span class="line">    textShadowOffsetY: <span class="number">5</span>, <span class="comment">// 偏移</span></span><br><span class="line">    rich: &#123;&#125; <span class="comment">// 富文本样式 例如下</span></span><br><span class="line">    <span class="comment">// label: &#123;</span></span><br><span class="line">    <span class="comment">// // 在文本中，可以对部分文本采用 rich 中定义样式。</span></span><br><span class="line">    <span class="comment">// // 这里需要在文本中使用标记符号：</span></span><br><span class="line">    <span class="comment">// // `&#123;styleName|text content text content&#125;` 标记样式名。</span></span><br><span class="line">    <span class="comment">// // 注意，换行仍是使用 '\n'。</span></span><br><span class="line">    <span class="comment">//   formatter: [</span></span><br><span class="line">    <span class="comment">//       '&#123;a|这段文本采用样式a&#125;',</span></span><br><span class="line">    <span class="comment">//       '&#123;b|这段文本采用样式b&#125;这段用默认样式&#123;x|这段用样式x&#125;'</span></span><br><span class="line">    <span class="comment">//   ].join('\n'),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   rich: &#123;</span></span><br><span class="line">    <span class="comment">//     a: &#123;</span></span><br><span class="line">    <span class="comment">//         color: 'red',</span></span><br><span class="line">    <span class="comment">//         lineHeight: 10</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     b: &#123;</span></span><br><span class="line">    <span class="comment">//         backgroundColor: &#123;</span></span><br><span class="line">    <span class="comment">//             image: 'xxx/xxx.jpg'</span></span><br><span class="line">    <span class="comment">//         &#125;,</span></span><br><span class="line">    <span class="comment">//         height: 40</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     x: &#123;</span></span><br><span class="line">    <span class="comment">//         fontSize: 18,</span></span><br><span class="line">    <span class="comment">//         fontFamily: 'Microsoft YaHei',</span></span><br><span class="line">    <span class="comment">//         borderColor: '#449933',</span></span><br><span class="line">    <span class="comment">//         borderRadius: 4</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;, <span class="comment">// 主标题标题样式</span></span><br><span class="line">  subtext: <span class="string">'xxx'</span>, <span class="comment">// 副标题</span></span><br><span class="line">  sublink: <span class="string">'xxx.xxx.com'</span>,</span><br><span class="line">  subtarget: <span class="string">'self'</span>,</span><br><span class="line">  subtextStyle: &#123;</span><br><span class="line">    align: <span class="string">'right'</span>, <span class="comment">// 水平对齐方式 left | center 默认自动</span></span><br><span class="line">    verticalAlign: <span class="string">'top'</span>, <span class="comment">// 垂直对齐 middle | bottom 默认自动</span></span><br><span class="line">  &#125;, <span class="comment">// 我只是副标题样式在主标题样式基础上没有的部分列出来了</span></span><br><span class="line">  textAlign: <span class="string">'auto'</span>, <span class="comment">// 整体（包括 text 和 subtext）的垂直对齐。 可选值：'auto'、'top'、'bottom'、'middle'。</span></span><br><span class="line">  triggerEvent: <span class="literal">false</span>, <span class="comment">// 触发事件</span></span><br><span class="line">  padding: <span class="number">5</span>, <span class="comment">// 标题内边距 也可以是数组形式[5, 10] 顶右底左</span></span><br><span class="line">  itemGap: <span class="number">10</span>, <span class="comment">// 主副标题之间的间距。</span></span><br><span class="line">  left: <span class="string">'auto'</span>, <span class="comment">// title 容器距左边的位置 可以是数字也可以是百分比 也可以是right | center</span></span><br><span class="line">  top: <span class="string">'auto'</span>, <span class="comment">// 顶部距离, 可以是数字也可以是百分比 bottom | middle</span></span><br><span class="line">  right: <span class="string">'auto'</span>,</span><br><span class="line">  bottom: <span class="string">'auto'</span>,</span><br><span class="line">  backgroundColor: <span class="string">'transparent'</span>, <span class="comment">// 支持rgb rgba #ccc red</span></span><br><span class="line">  borderColor: <span class="string">'#ccc'</span>,  <span class="comment">// 同上</span></span><br><span class="line">  borderWidth: <span class="number">10</span>, <span class="comment">// 标题的边框线宽。</span></span><br><span class="line">  borderRadius: <span class="number">5</span>, <span class="comment">// 圆角 也可以是数组形式[5, 0, 0, 0] 左上, 右上, 右下, 左下</span></span><br><span class="line">  shadowBlur: <span class="number">10</span>,</span><br><span class="line">  shadowColor: <span class="string">'#ccc'</span>,</span><br><span class="line">  shadowOffsetX: <span class="number">5</span>,</span><br><span class="line">  shadowOffsetY: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### legend</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">let</span> legend = &#123;</span><br><span class="line">  show: <span class="literal">true</span>,</span><br><span class="line">  left: <span class="string">'20%'</span>,</span><br><span class="line">  right: <span class="string">'20%'</span>,</span><br><span class="line">  bottom: <span class="string">'10%'</span>,</span><br><span class="line">  top: <span class="string">'10%'</span>,</span><br><span class="line">  width: <span class="string">'auto'</span>,</span><br><span class="line">  height: <span class="string">'auto'</span>,</span><br><span class="line">  orient: <span class="string">'horizontal'</span>, <span class="comment">// 水平还是垂直 'vertical'</span></span><br><span class="line">  align: <span class="string">'auto'</span>,</span><br><span class="line">  padding: <span class="number">5</span>,</span><br><span class="line">  itemGap: <span class="number">10</span>, <span class="comment">//横向布局时为水平间隔，纵向布局时为纵向间隔。</span></span><br><span class="line">  itemWidth: <span class="number">25</span>,</span><br><span class="line">  itemHeight: <span class="number">14</span>,</span><br><span class="line">  formatter: , <span class="comment">// 用来格式化图例文本，支持字符串模板和回调函数两种形式。</span></span><br><span class="line">  selectedMode: <span class="literal">true</span>, <span class="comment">// 也可以设置成single multiple</span></span><br><span class="line">  inactiveColor: <span class="string">'#ccc'</span>, <span class="comment">// 图例关闭时候的颜色</span></span><br><span class="line">  selected: &#123;&#125;, <span class="comment">// 图例选中状态表。</span></span><br><span class="line">  textStyle: &#123;&#125;, <span class="comment">// 同title 的textStyle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      初次上手echarts
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="笔记" scheme="http://myblog.decade.run/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="echarts" scheme="http://myblog.decade.run/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="http://myblog.decade.run/2020/05/20/note1/"/>
    <id>http://myblog.decade.run/2020/05/20/note1/</id>
    <published>2020-05-20T08:48:03.000Z</published>
    <updated>2020-05-20T08:55:11.741Z</updated>
    
    <content type="html"><![CDATA[<p>先上自己成功的步骤!!!</p><ol><li>安装好下面两个插件<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible -S</span><br><span class="line">npm i postcss-plugin-px2rem  -S</span><br></pre></td></tr></table></figure></li><li>打开vue.config.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">css: &#123;</span><br><span class="line">  loaderOptions: &#123;</span><br><span class="line">    postcss: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-plugin-px2rem'</span>)(&#123;</span><br><span class="line">          rootValue: <span class="number">192</span>,</span><br><span class="line">          exclude: <span class="regexp">/(node_module)/i</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改lib-flexible下的flexible.js文件 72行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">  <span class="keyword">if</span> (width / dpr &gt; <span class="number">540</span>) &#123;</span><br><span class="line">      width = width * dpr; <span class="comment">// 原来是width = 540 * dpr</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> rem = width / <span class="number">10</span>;</span><br><span class="line">  docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line">  flexible.rem = win.rem = rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>over</li></ol>]]></content>
    
    <summary type="html">
    
      要求根据分辨率进行自适应
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="笔记" scheme="http://myblog.decade.run/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="http://myblog.decade.run/2020/05/19/data-structure/"/>
    <id>http://myblog.decade.run/2020/05/19/data-structure/</id>
    <published>2020-05-18T22:34:48.000Z</published>
    <updated>2020-05-19T21:58:58.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单的阐述下数据结构和算法"><a href="#简单的阐述下数据结构和算法" class="headerlink" title="简单的阐述下数据结构和算法"></a>简单的阐述下数据结构和算法</h3><ol><li>数据结构是计算机的基础, 算法是计算机科学</li><li>程序设计 = 数据结构 + 算法</li><li>“数据结构(data structure)是计算机中存储, 组织数据的方式. 通常情况下, 精心选择的数据结构可以带来最秀效率的算法” —–  维基百科</li><li>解决问题的的方法和步骤</li><li>数据结构是离不开算法的</li></ol><div class="note info">            <p>作为正在成长的前端小菜鸟, 自己还是希望在以后面试的时候, 问起这一块的时候自己还是能对答如流. </p>          </div><p>数据结构分为逻辑结构和物理结构</p><ol><li>逻辑结构: 是指数据对象中数据元素之间的相关关系<ol><li>集合结构: 集合中的元素除了同属于一个相同的集合以外, 没有任何关系</li><li>线性结构: 线性结构中数据元素之间是一对一的关系</li><li>树形结构: 数据元素之间存在一种一对多的层次关系</li><li>图形结构: 多对多的关系</li></ol></li><li>物理结构: 是指数据在计算机中的存储形式</li></ol><p>存储方式分为顺序存储和链式存储</p><ol><li>顺序存储: 是把数据元素存放在地址连续的存储单元里, 其数据间的逻辑关系和物理关系是一致的<br><img src="/" class="lazyload" data-src="/img/dsalg/1.png"  alt="顺序存储"></li><li>链式存储: 是把数据元素存放在任意的存储单元里<br><img src="/" class="lazyload" data-src="/img/dsalg/2.png"  alt="链式存储"></li></ol><p>线性结构和非线性结构</p><ol><li>线性结构: 一个有序数据元素的集合，其特点是数据元素之间存在一对一的线性关系</li><li>非线性结构: 各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系</li></ol><h3 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h3><ol><li>数组(array)</li><li>链表(linked list)</li><li>栈(stack)</li><li>队列(queue)</li><li>散列表/哈希表(hash)</li><li>堆(heap)</li><li>图(graph)</li><li>数(tree)</li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>首先我们得明确, javascript中的数组不是真正意义上的数组</p><p>常见语言的数组有以下两个特点: </p><ol><li>不能存放不同类型的数据</li><li>数组的容量不会自动改变</li></ol><div class="note info">            <p>首先数组的存储方式是顺序存储, 所以满足我上面解释的 数据的逻辑关系和物理关系是一致的. 所谓的逻辑关系我的理解就是: 假设当前元素的内存地址存放在0x0000 而且当前元素的大小是8bit, 所以它的下一个元素的内存地址就是0x0001 物理关系就是所有元素的大小都是一致的. </p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 动态方式生成数组 这里的动态指的是数组长度 */</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">// 这里的3可以改成4</span></span><br><span class="line"><span class="comment">/* 静态方式生成数组  这里指的是数组元素*/</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  静态方式生成数组, 系统会根据后面元素的个数自动计算数组长度 </span></span><br><span class="line"><span class="comment">  静态方式生成数组右边的中括号里面不能放数字</span></span><br><span class="line"><span class="comment">  静态方式省略格式创建数组, 不能先声明后赋值, 只能声明的同时赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>因为数组的长度固定, 所以我们会在对数组进行删除和插入操作的时候会很麻烦:</p><ol><li>插入数据: 我们需要把插入位置后面的数据往后移</li><li>删除数据: 我们需要把被删除数据后面的数据往前移</li></ol>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="数据结构" scheme="http://myblog.decade.run/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>javascript执行上下文与执行栈</title>
    <link href="http://myblog.decade.run/2020/05/19/ds2/"/>
    <id>http://myblog.decade.run/2020/05/19/ds2/</id>
    <published>2020-05-18T22:34:48.000Z</published>
    <updated>2020-05-20T03:25:46.418Z</updated>
    
    <content type="html"><![CDATA[<p>前几天逛掘金的时候突然看见一篇文章<a href="https://juejin.im/post/5ebced85e51d454dc1467664#heading-13" target="_blank" rel="noopener">面试官：说说执行上下文吧</a>, 执行上下文, 有点懵逼, 然后就开始搬砖!!</p><h3 id="什么是执行上下文"><a href="#什么是执行上下文" class="headerlink" title="什么是执行上下文"></a>什么是执行上下文</h3><p>当 JS 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 “准备工作”，就叫做 “执行上下文(execution context 简称 EC)” 或者也可以叫做执行环境。<br>下面准备一串代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a= <span class="number">1</span>; </span><br><span class="line">foo(<span class="number">1</span>) </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (a === <span class="number">5</span>) &#123; <span class="keyword">return</span> &#125; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before'</span>,a) </span><br><span class="line">  foo(a + <span class="number">1</span>) </span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'after'</span>,a) </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>, a)</span><br></pre></td></tr></table></figure><p>看见这串代码, 我们会分析this指向(这里没有没有提及this), 这里打印的a的值是多少, 这里打印出来的顺序是什么. 然后大概这个执行前的准备工作也就是做这些吧</p><p>js中的执行上下文一共有三种</p><ol><li>全局执行的上下文 一个程序只会存在一个全局执行上下文</li><li>函数的执行上下文 函数被调用的时候, 就会创建一个函数执行上下文</li><li>Eval函数的执行上下文</li></ol><h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h3><p>执行栈，在其他编程语言中也被叫做调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。<br>当 JavaScript 引擎首次读取你的脚本时，它会创建一个全局执行上下文并将其推入当前的执行栈。每当发生一个函数调用，引擎都会为该函数创建一个新的执行上下文并将其推到当前执行栈的顶端。<br>引擎会运行执行上下文在执行栈顶端的函数，当此函数运行完成后，其对应的执行上下文将会从执行栈中弹出，上下文控制权将移到当前执行栈的下一个执行上下文</p><p>这种进栈弹栈的操作 有点像之前学进程的时候, 我画了这么一个图<br><img src="/" class="lazyload" data-src="/img/dsalg/3.png"  alt="进程运行"><br>而之前的那段代码 执行的操作其实是和这个图的操作 相差无疑的, 我也只是省略了入栈的操作</p><h3 id="执行上下文是如何被创建的"><a href="#执行上下文是如何被创建的" class="headerlink" title="执行上下文是如何被创建的"></a>执行上下文是如何被创建的</h3><p>执行上下文分两个阶段创建：</p><ol><li>创建阶段</li><li>执行阶段</li></ol><h4 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h4><ol><li>确定 this 的值，也被称为 This Binding。</li><li>LexicalEnvironment（词法环境） 组件被创建。</li><li>VariableEnvironment（变量环境） 组件被创建.</li></ol><p>伪代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExecutionContext = &#123;  </span><br><span class="line">  ThisBinding = <span class="xml"><span class="tag">&lt;<span class="name">this</span> <span class="attr">value</span>&gt;</span>,  </span></span><br><span class="line"><span class="xml">  LexicalEnvironment = &#123; ... &#125;,  </span></span><br><span class="line"><span class="xml">  VariableEnvironment = &#123; ... &#125;,  </span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>This Binding<ol><li>在全局执行上下文中，this 的值指向全局对象，在浏览器中，this 的值指向 window 对象。</li><li>在函数执行上下文中，this 的值取决于函数的调用方式。如果它被一个对象引用调用，那么 this 的值被设置为该对象，否则 this 的值被设置为全局对象或 undefined（严格模式下）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;  </span><br><span class="line">name: <span class="string">'peter'</span>,  </span><br><span class="line">birthYear: <span class="number">1994</span>,  </span><br><span class="line">calcAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2018</span> - <span class="keyword">this</span>.birthYear);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">person.calcAge();   </span><br><span class="line"><span class="comment">// 'this' 指向 'person', 因为 'calcAge' 是被 'person' 对象引用调用的。</span></span><br><span class="line"><span class="keyword">let</span> calculateAge = person.calcAge;  </span><br><span class="line">calculateAge();  </span><br><span class="line"><span class="comment">// 'this' 指向全局 window 对象,因为没有给出任何对象引用</span></span><br></pre></td></tr></table></figure></li></ol></li><li>词法环境（Lexical Environment）<br>组成<ol><li>对外部环境的引用 对外部环境的引用意味着它可以访问其外部词法环境。</li><li>环境记录（environment record） 环境记录是存储变量和函数声明的实际位置。<ol><li>声明性环境记录 存储变量、函数和参数。一个函数环境包含声明性环境记录。</li><li>对象环境记录 用于定义在全局执行上下文中出现的变量和函数的关联。全局环境包含对象环境记录。<br>类型</li></ol></li><li>全局环境（在全局执行上下文中）是一个没有外部环境的词法环境, 全局环境的外部环境引用为 null。它拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。</li><li>函数环境，用户在函数中定义的变量被存储在环境记录中。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。还包括一个arguments对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> c = a + b;  </span><br><span class="line">&#125;  </span><br><span class="line">foo(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// arguments 对象  </span></span><br><span class="line">Arguments: &#123;<span class="number">0</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">3</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;,</span><br></pre></td></tr></table></figure></li></ol></li><li>变量环境 它也是一个词法环境，其 EnvironmentRecord 包含了由 VariableStatements 在此执行上下文创建的绑定。<br>在 ES6 中，LexicalEnvironment 组件和 VariableEnvironment 组件的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;  </span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span>;  </span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">e, f</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">20</span>;  </span><br><span class="line">  <span class="keyword">return</span> e * f * g;  </span><br><span class="line">&#125;</span><br><span class="line">c = multiply(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// 执行上下文如下</span></span><br><span class="line"><span class="comment">//全局</span></span><br><span class="line">GlobalExectionContext = &#123;</span><br><span class="line">  ThisBinding: <span class="xml"><span class="tag">&lt;<span class="name">Global</span> <span class="attr">Object</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">  LexicalEnvironment: &#123;   // 只有let const 的变量</span></span><br><span class="line"><span class="xml">    EnvironmentRecord: &#123;  </span></span><br><span class="line"><span class="xml">      Type: "Object",  </span></span><br><span class="line"><span class="xml">      // 标识符绑定在这里  </span></span><br><span class="line"><span class="xml">      a: <span class="tag">&lt; <span class="attr">uninitialized</span> &gt;</span>,  </span></span><br><span class="line"><span class="xml">      b: <span class="tag">&lt; <span class="attr">uninitialized</span> &gt;</span>,  </span></span><br><span class="line"><span class="xml">      multiply: <span class="tag">&lt; <span class="attr">func</span> &gt;</span>  </span></span><br><span class="line"><span class="xml">    &#125;  </span></span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line">  VariableEnvironment: &#123;   // var</span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: "Object",  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      c: undefined,  </span><br><span class="line">    &#125;  </span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">// 函数</span><br><span class="line">FunctionExectionContext = &#123;   </span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line">  LexicalEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: "Declarative",  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,  // 多的arguments对象</span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line">  VariableEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: "Declarative",  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      g: undefined  </span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">需要注意的时候 函数只有在执行的时候才有函数执行上下文</font></li></ol><p><font size="16">over</font>, 另外今天把我的<a href="http://120.24.215.228/newClock/" target="_blank" rel="noopener">时钟</a>也就是我的封面图那个钟把日期加了进去</p>]]></content>
    
    <summary type="html">
    
      大清早的学习
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="javascript" scheme="http://myblog.decade.run/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello myBlog</title>
    <link href="http://myblog.decade.run/2020/04/13/Hello-myBlog/"/>
    <id>http://myblog.decade.run/2020/04/13/Hello-myBlog/</id>
    <published>2020-04-13T07:55:49.000Z</published>
    <updated>2020-04-15T03:52:17.728Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于是我的第一篇博客,我把我怎么搭建的复习复习吧! 前期的准备<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node</a>,<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>,下载好了之后,我顺便把怎么配置node环境(water)写一下吧.</p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><div class="note info">            <p>安装node,傻瓜式安装一直按next即可,中间有个选择盘符,不推荐放在c盘</p>          </div><h2 id="检查node是否安装成功"><a href="#检查node是否安装成功" class="headerlink" title="检查node是否安装成功"></a>检查node是否安装成功</h2><p>先进入cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="/img/hellomyblog/nodev.png"  alt="如果如图有版本提示说明安装成功"></p><div class="note info">            <p>安装完成后目录如下, 另外需要自己手动创建两个文件夹,一个叫node_cache(存放缓存的),node_global(全局安装插件的放这个文件夹)</p>          </div><p><img src="/" class="lazyload" data-src="/img/hellomyblog/nodecomplete.png"  alt="安装完成图片"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><div class="note info">            <p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。</p>          </div><p>创建完两个文件夹后,打开cmd,执行下面的命令,因为我是安装在H盘下的nodejs目录下的,所以你需要自己修改一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix "H:\nodejs\node_global"</span><br><span class="line">npm config <span class="built_in">set</span> cache "H:\nodejs\node_cache"</span><br></pre></td></tr></table></figure><div class="note info">            <p>由于npm安装插件是从国外下载的,受网络影响大,建议更换成国内淘宝镜像,指令如下</p>          </div><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure><p>上述工作完成后,我们开始配置环境<br>右键单击我的电脑,找到属性,然后找到高级系统设置,找到环境变量<br><img src="/" class="lazyload" data-src="/img/hellomyblog/1.png"  alt="属性,高级系统设置"><br><img src="/" class="lazyload" data-src="/img/hellomyblog/environment.png"  alt="环境变量"></p><p>node_path环境变量:<br>进入环境变量对话框，在系统变量下新建NODE_PATH，输入H:\nodejs\node_global\node_modules，将用户变量下的Path修改为H:\nodejs\node_global<br><img src="/" class="lazyload" data-src="/img/hellomyblog/2.png"  alt="path1"><br><img src="/" class="lazyload" data-src="/img/hellomyblog/3.png"  alt="path2"></p><p><img src="/" class="lazyload" data-src="/img/hellomyblog/4.png"  alt="NODE_PATH"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>打开cmd 全局安装一个express</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><p>安装完之后 去你的node_global目录下的node_module找express<br><img src="/" class="lazyload" data-src="/img/hellomyblog/5.png"  alt="express"></p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>一样的傻瓜式安装,看是否安装成功只需要在桌面单击右键,看是否有Git Bush Here, Git GUI Here 就行了<br><img src="/" class="lazyload" data-src="/img/hellomyblog/6.png"  alt="git安装"></p><div class="note default">            <p>因为hexo 推送到github仓库不需要是用git 推送送的 以后再补上吧!!!</p>          </div><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>打开git bush / cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>第一步初始化hexo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init yourBlogName</span><br></pre></td></tr></table></figure><p>进入到你yourBlogNameogName这个文件夹,然后执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> yourBlogName</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>然后一个基本的博客模板就完成了,分析一下文件目录</p><div class="note default">            <p>由于我也是入门小白, 基本的可以去<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a>查看<br>总的用到的以下的几条指令</p>          </div><ol><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li><li>hexo clean 清除之前生成的json文件, public目录下的东西</li><li>hexo g 生成json文件 以及public 目录下的东西</li><li>hexo server 开启服务 访问4000端口即可</li><li>hexo d 这个是你绑定了github仓库 后推代码到仓库的 你需要安装插件</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这是我的第一篇博客,并且我取了个中二的名字
    
    </summary>
    
    
    
      <category term="learn" scheme="http://myblog.decade.run/tags/learn/"/>
    
      <category term="hexo" scheme="http://myblog.decade.run/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>return back</title>
    <link href="http://myblog.decade.run/2020/04/13/return-back/"/>
    <id>http://myblog.decade.run/2020/04/13/return-back/</id>
    <published>2020-04-13T07:55:49.000Z</published>
    <updated>2020-05-18T06:54:09.090Z</updated>
    
    <content type="html"><![CDATA[<p>论文答辩结束, 等待毕业ing<br>为了更好的照顾好自己, 以及自己女朋友, 我先立下几个flag<br>1 更加的爱女朋友(ahhh)<br>2 早上6点起床敲代码<br>3 晚上尽量早点睡!(时间有点难搞, 就怕事情多起来)<br>4 每天尽量更新自己学到的<br>5 算法,数据结构,http等一系列的东西自己找个时间补了吧<br>6 撸源码<br>7 从头开始 我还是个前端小白!!!<br>8 待补充…</p>]]></content>
    
    <summary type="html">
    
      毕业设计答辩论文都over了
    
    </summary>
    
    
    
      <category term="结束啦" scheme="http://myblog.decade.run/tags/%E7%BB%93%E6%9D%9F%E5%95%A6/"/>
    
  </entry>
  
</feed>
